package  org.springrain.lottery.web;

import java.io.File;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.time.DateFormatUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springrain.frame.cached.ICached;
import org.springrain.frame.common.SessionUser;
import org.springrain.frame.controller.BaseController;
import org.springrain.frame.util.DateUtils;
import org.springrain.frame.util.Finder;
import org.springrain.frame.util.GlobalStatic;
import org.springrain.frame.util.Page;
import org.springrain.frame.util.ReturnDatas;
import org.springrain.frame.util.property.MessageUtils;
import org.springrain.lottery.entity.BasketballLeagueOdds;
import org.springrain.lottery.entity.BasketballScheme;
import org.springrain.lottery.entity.BasketballSchemeMatch;
import org.springrain.lottery.entity.BetAgent;
import org.springrain.lottery.entity.BetAgentwithdraw;
import org.springrain.lottery.entity.BetBetting;
import org.springrain.lottery.entity.BetDaywinorfailrebate;
import org.springrain.lottery.entity.BetFirstrechargerebate;
import org.springrain.lottery.entity.BetGold;
import org.springrain.lottery.entity.BetMember;
import org.springrain.lottery.entity.BetRankMember;
import org.springrain.lottery.entity.BetRechargecard;
import org.springrain.lottery.entity.BetRedenvelopeRecord;
import org.springrain.lottery.entity.BetRegisterReward;
import org.springrain.lottery.entity.BetReliefRecord;
import org.springrain.lottery.entity.BetReportform;
import org.springrain.lottery.entity.BetScorerecord;
import org.springrain.lottery.entity.BetSinglerecharge;
import org.springrain.lottery.entity.BetSubordinaterebateDetail;
import org.springrain.lottery.entity.BetTodayrechargerebate;
import org.springrain.lottery.entity.BetTransferAccounts;
import org.springrain.lottery.entity.BetWeekwinorfailrebate;
import org.springrain.lottery.entity.BetWithdrawcash;
import org.springrain.lottery.entity.BjdcOdds;
import org.springrain.lottery.entity.BjdcScheme;
import org.springrain.lottery.entity.BjdcSchemeMatch;
import org.springrain.lottery.entity.LotteryOrder;
import org.springrain.lottery.entity.LotteryScheme;
import org.springrain.lottery.entity.SoccerAllbetting;
import org.springrain.lottery.entity.SoccerLeague2choose1odds;
import org.springrain.lottery.entity.SoccerLeagueOdds;
import org.springrain.lottery.entity.SoccerScheme;
import org.springrain.lottery.entity.SoccerSchemeMatch;
import org.springrain.lottery.service.IBasketballLeagueOddsService;
import org.springrain.lottery.service.IBasketballSchemeMatchService;
import org.springrain.lottery.service.IBasketballSchemeService;
import org.springrain.lottery.service.IBetAgentService;
import org.springrain.lottery.service.IBetAgentreportformJcService;
import org.springrain.lottery.service.IBetAgentreportformNewJcService;
import org.springrain.lottery.service.IBetAgentwithdrawService;
import org.springrain.lottery.service.IBetBettingService;
import org.springrain.lottery.service.IBetDaywinorfailrebateService;
import org.springrain.lottery.service.IBetFirstrechargerebateService;
import org.springrain.lottery.service.IBetGoldService;
import org.springrain.lottery.service.IBetMemberService;
import org.springrain.lottery.service.IBetPaymentInterfaceService;
import org.springrain.lottery.service.IBetRankMemberService;
import org.springrain.lottery.service.IBetRechargecardService;
import org.springrain.lottery.service.IBetRedenvelopeRecordService;
import org.springrain.lottery.service.IBetRegisterRewardService;
import org.springrain.lottery.service.IBetReliefRecordService;
import org.springrain.lottery.service.IBetReportformService;
import org.springrain.lottery.service.IBetScorerecordService;
import org.springrain.lottery.service.IBetSigninRewardService;
import org.springrain.lottery.service.IBetSinglerechargeService;
import org.springrain.lottery.service.IBetSubordinaterebateDetailService;
import org.springrain.lottery.service.IBetTodayrechargerebateService;
import org.springrain.lottery.service.IBetTransferAccountsService;
import org.springrain.lottery.service.IBetWeekwinorfailrebateService;
import org.springrain.lottery.service.IBetWithdrawcashService;
import org.springrain.lottery.service.IBjdcOddsService;
import org.springrain.lottery.service.IBjdcSchemeMatchService;
import org.springrain.lottery.service.IBjdcSchemeService;
import org.springrain.lottery.service.ILotteryOrderService;
import org.springrain.lottery.service.ISoccerAllbettingService;
import org.springrain.lottery.service.ISoccerLeague2choose1oddsService;
import org.springrain.lottery.service.ISoccerLeagueOddsService;
import org.springrain.lottery.service.ISoccerSchemeMatchService;
import org.springrain.lottery.service.ISoccerSchemeService;
import org.springrain.lottery.utils.AgentUtils;
import org.springrain.lottery.utils.WeekOfDate;
import org.springrain.lottery.utils.basketballWeekOfDate;

import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * TODO 在此加入类描述
 * @copyright {@link weicms.net}
 * @author springrain<Auto generate>
 * @version  2017-04-12 11:30:45
 * @see org.springrain.lottery.web.BetReportform
 */
@Controller
@RequestMapping(value="/betreportform")
public class BetReportformController  extends BaseController {
	@Resource
	private IBetAgentreportformNewJcService betAgentreportformNewJcService;
	@Resource
	private IBetReportformService betReportformService;
	@Resource
	private IBetMemberService betMemberService;
	@Resource
	private IBetGoldService betGoldService;
	@Resource
	private IBetWithdrawcashService betWithdrawcashService;
	@Resource
	private IBetRedenvelopeRecordService betRedenvelopeRecordService;
	@Resource
	private IBetScorerecordService betScorerecordService;
	@Resource
	private IBetDaywinorfailrebateService betDaywinorfailrebateService;
	@Resource
	private IBetRechargecardService betRechargecardService;
	@Resource
	private IBetFirstrechargerebateService betFirstrechargerebateService;
	@Resource
	private IBjdcOddsService bjdcOddsService;
	@Resource
	private IBjdcSchemeMatchService bjdcSchemeMatchService;
	@Resource 
	private IBetSubordinaterebateDetailService betSubordinaterebateDetailService;
	@Resource
	private IBetBettingService betBettingService;
	@Resource
	private IBetRegisterRewardService betRegisterRewardService;
	@Resource
	private IBetSinglerechargeService betSinglerechargeService;
	@Resource
	private IBetTodayrechargerebateService betTodayrechargerebateService;
	@Resource
	private IBetWeekwinorfailrebateService betWeekwinorfailrebateService;
	@Resource
	private IBetTransferAccountsService betTransferAccountsService;
	@Resource
	private IBetPaymentInterfaceService betPaymentInterfaceService;
	@Resource
	private IBetSigninRewardService betSigninRewardService;
	@Resource
	private IBetReliefRecordService betReliefRecordService;
	@Resource
	private IBetRankMemberService betRankMemberService;
	@Resource
	private IBjdcSchemeService bjdcSchemeService;
	@Resource
	private ISoccerLeague2choose1oddsService soccerLeague2choose1oddsService;
	@Resource
	private ISoccerSchemeService soccerSchemeService;
	@Resource
	private ISoccerSchemeMatchService soccerSchemeMatchService;
	@Resource
	private IBetAgentreportformJcService betAgentreportformJcService;
	@Resource
	private ISoccerLeagueOddsService soccerLeagueOddsService;
	@Resource
	private ISoccerAllbettingService soccerAllbettingService;
	@Resource
	private ICached cached;
	@Resource
	private IBetAgentService betAgentService;
	@Resource
	private IBasketballSchemeMatchService basketballSchemeMatchService;
	@Resource
	private IBasketballLeagueOddsService basketballLeagueOddsService;
	@Resource
	private IBasketballSchemeService basketballSchemeService;
	@Resource
	private IBetAgentwithdrawService betAgentwithdrawService;
	@Resource
	private ILotteryOrderService lotteryOrderService;
	
	private String listurl="/lottery/betreportform/betreportformListqq";
	private String listurlsec="/lottery/betreportform/betreportformListqqsec";
	
	@RequestMapping("/agreport/v5")
	public String agreportnewjc(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		if("1".equals(request.getParameter("k"))){
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", agentid));
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd = betAgentreportformNewJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_newjc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double recharge=0.;
								Double withdraw=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("recharge");
								Object object12 = ddd.get("withdraw");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									recharge=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									withdraw=((BigDecimal)object12).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("recharge", recharge);
								map.put("withdraw", withdraw);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformNewJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_newjc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid));
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
				model.addAttribute("agentdatas", agentdatas);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betagentt.getAccount());
				model.addAttribute("agentnickname", betagentt.getNickname());
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				return "/lottery/betreportform/betreportformagreportv2";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}

				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id)").setParam("id", requestagentid));
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd = betAgentreportformNewJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge ,sum(withdraw) as withdraw from bet_agentreportform_newjc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double recharge=0.;
								Double withdraw=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("recharge");
								Object object12 = ddd.get("withdraw");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									recharge=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									withdraw=((BigDecimal)object12).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("recharge", recharge);
								map.put("withdraw", withdraw);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformNewJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_newjc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid));
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
				model.addAttribute("agentdatas", agentdatas);
				model.addAttribute("agentaccount", betaaa.getAccount());
				model.addAttribute("agentnickname", betaaa.getNickname());
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				model.addAttribute("agentid", requestagentid);
				return "/lottery/betreportform/betreportformagreportv5";
			}
		}else if("2".equals(request.getParameter("k"))){
			//投注额
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList111";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas= bjdcSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),BjdcScheme.class,page);
						
						corebjdc(datas);
						
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbjdcbettingList111";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 and a.state!=2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList111";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state!=2 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting111";
				}
			}else{
				return "errorpage/error";
			}
		}else if("3".equals(request.getParameter("k"))){
			//游戏输赢
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						gcsoccer(model, betReportform, agentid, returnObject,
								page, memberid2, starttime, endtime, gcname,
								calendar);
						return "/lottery/betreportform/betreportformsoccerbettingList222";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.settlementtime>=:starttime and a.settlementtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList222";
					}
				}else{
					page.setOrder("result");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.settlementtime>=:starttime and a.settlementtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting222";
				}
			}else{
				return "errorpage/error";
			}
		}else if("4".equals(request.getParameter("k"))){
			//未结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=0 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList333";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList333";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting333";
				}
			}else{
				return "errorpage/error";
			}
		}else if("5".equals(request.getParameter("k"))){
			//投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList444";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas= bjdcSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),BjdcScheme.class,page);
						
						corebjdc(datas);
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbjdcbettingList444";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a inner join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime  ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList444";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,sum(a.commission) as commission,sum(b.bettingmoney) as totallybettingmoney,sum(b.bettingscore-b.bettingmoney) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime  group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting444";
				
				}
			}else{
				return "errorpage/error";
			}
		
		}else if("6".equals(request.getParameter("k"))){
			//会员
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
				}else{
					BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
					if(betaaa!=null){
						if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
							
						}else{
							return "/errorpage/error";
						}
					}else{
						return "/errorpage/error";
					}

					// ==构造分页请求
					Page page = newPage(request,"b.bettingmoney","desc");
					// ==执行分页查询
					String starttime = request.getParameter("starttime");
					String endtime = request.getParameter("endtime");
					Date date1 =DateUtils.convertString2Date(endtime);
					Calendar calendar = new GregorianCalendar();
					if(date1!=null){
						calendar.setTime(date1); 
						calendar.add(Calendar.DATE,1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
					}
					if(StringUtils.isBlank(starttime)){
						starttime="0000-00-00";
					}
					if(StringUtils.isBlank(endtime)){
						endtime="9999-00-00";
					}
					List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,f.treatedbettingmoney,f.bettingscore,f.bettingwin,g.bettingtimecommission from bet_member a " +
							"left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 " +
							"left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 " +
							"left join (select memberid2,sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 group by memberid2)f on f.memberid2=a.id2 " +
							"left join (select memberid2,sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id) group by memberid2)g on g.memberid2=a.id2 "+
							" where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
					returnObject.setQueryBean(betReportform);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("agentaccount", betaaa.getAccount());
					model.addAttribute("agentnickname", betaaa.getNickname());
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", requestagentid);
					return "/lottery/betreportform/betreportformagmemberreport";
				}
		
		}else if("7".equals(request.getParameter("k"))){
			//未结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList5";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList5";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					//北单处理
					bjdc(datas);
					basketballAll(datas);
					superlottoAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList5";
				}
			}
		}else if("8".equals(request.getParameter("k"))){
			//投注额
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList6";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) and a.situation!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList6";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					superlottoAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList6";
				}
			}
		}else if("9".equals(request.getParameter("k"))){
			//已结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList7";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList7";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					superlottoAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList7";
				}
			}
		}else if("10".equals(request.getParameter("k"))){
			//代理投注退佣（按结算时间统计）
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id ) vxcv on vxcv.id=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid)  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id ) vxcv on vxcv.id=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid )  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList8";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2) vxcv on vxcv.schemeid=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid)  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2) vxcv on vxcv.schemeid=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList8";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission left join (select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2) vxcv on vxcv.id=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission left join (select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2) vxcv on vxcv.id=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList8";
				}
			}
		}else if("11".equals(request.getParameter("k"))){
			//游戏输赢(按结算时间统计)
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList9";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList9";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList9";
				}
			}
		}else if("12".equals(request.getParameter("k"))){
			//投注退佣
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList10";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
//						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (c.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid ) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList10";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type) and a.agentid=:agentid ").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList10";
				}
			}
		}else if("13".equals(request.getParameter("k"))){
			//已结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=1 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList555";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=1 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList555";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney, sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.state=1 and a.bettingtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting555";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
			}else{
				return "errorpage/error";
			}
		}else if("14".equals(request.getParameter("k"))){
			//会员投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.settlementtime>=:starttime and a.settlementtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and d.bettingtime>=:starttime and d.bettingtime<:endtime and d.situation=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						 
						soccer(datas);
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList666";
					}else{
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a left join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and e.bettingtime>=:starttime and e.bettingtime<:endtime and e.state=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList666";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,sum(a.commission) as commission,sum(b.bettingmoney) as totallybettingmoney,sum(b.bettingscore-b.bettingmoney) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and b.bettingtime>=:starttime and b.bettingtime<:endtime and b.state=1 group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting666";
				}
			}else{
				return "errorpage/error";
			}
		}else if("15".equals(request.getParameter("k"))){
			//转账
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			// ==构造分页请求
			Page page = newPage(request,"time","desc");
			// ==执行分页查询
			String starttime = request.getParameter("startTime");
			String endtime = request.getParameter("endTime");
			Date date1 =DateUtils.convertString2Date(endtime);
			Calendar calendar = new GregorianCalendar();
			if(date1!=null){
				calendar.setTime(date1); 
				calendar.add(Calendar.DATE,1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
			}
			if(StringUtils.isBlank(starttime)){
				starttime="0000-00-00";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="9999-00-00";
			}
			if("1".equals(request.getParameter("todayflag"))){
				Date dateeee=new Date();
				 starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				 endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date2 =DateUtils.convertString2Date(endtime);
				Calendar calendar1 = new GregorianCalendar();
				if(date2!=null){
					calendar1.setTime(date2); 
					calendar1.add(Calendar.DATE,1);
					Date date3=calendar1.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
			}
			List<BetTransferAccounts> datas = new ArrayList<>();
			
			if("1".equals(request.getParameter("directlyunder"))){
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid), BetTransferAccounts.class, page);
				model.addAttribute("directlyunder", 1);
			}else{
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid or agentparentids like :aid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid).setParam("aid", "%,"+requestagentid+",%"), BetTransferAccounts.class, page);
			}
			
			returnObject.setQueryBean(new BetBetting());
			returnObject.setPage(page);
			returnObject.setData(datas);
			if(!"0000-00-00".equals(starttime)){
				model.addAttribute("startTime", starttime);
			}
			if(!"9999-00-00".equals(endtime)){
				Date date2 =DateUtils.convertString2Date(endtime);
				calendar.setTime(date2); 
				calendar.add(Calendar.DATE,-1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
				model.addAttribute("endTime", endtime);
			}
			
			model.addAttribute("agentid", requestagentid);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformbetTransferAccountsList2";
		}else{
			//今日
			model.addAttribute("todayflag", 1);
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				//所在周开始日期
				Date dateeee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", agentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							
							Map<String, Object> ddd = betAgentreportformNewJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_newjc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double recharge=0.;
								Double withdraw=0.;
								
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("recharge");
								Object object12 = ddd.get("withdraw");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									recharge=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									withdraw=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("recharge", recharge);
								map.put("withdraw", withdraw);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformNewJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_newjc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid));
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid),page);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betagentt.getAccount());	
				model.addAttribute("agentnickname", betagentt.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				return "/lottery/betreportform/betreportformagreportv2";
		
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
//				Calendar cal = Calendar.getInstance();
//				int d = 0;
//				if(cal.get(Calendar.DAY_OF_WEEK)==1){
//					d = -6;
//				}else{
//					d = 2-cal.get(Calendar.DAY_OF_WEEK);
//				}
//				cal.add(Calendar.DAY_OF_WEEK, d);
				//所在周开始日期
				Date dateee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateee);
//				cal.add(Calendar.DAY_OF_WEEK, 6);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", requestagentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							
							Map<String, Object> ddd = betAgentreportformNewJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge ,sum(withdraw) as withdraw from bet_agentreportform_newjc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double recharge=0.;
								Double withdraw=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("recharge");
								Object object12 = ddd.get("withdraw");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									recharge=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									withdraw=((BigDecimal)object12).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("recharge", recharge);
								map.put("withdraw", withdraw);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformNewJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_newjc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid));
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}

//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
//				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betaaa.getAccount());
				model.addAttribute("agentnickname", betaaa.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				model.addAttribute("agentid", requestagentid);
				return "/lottery/betreportform/betreportformagreportv5";
			}
		}
	}
	
	@RequestMapping("/agreport")
	public String agreport(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		if("1".equals(request.getParameter("k"))){
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", agentid));
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
									"(select sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				model.addAttribute("agentdatas", agentdatas);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betagentt.getAccount());
				model.addAttribute("agentnickname", betagentt.getNickname());
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				return "/lottery/betreportform/betreportformagreport";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}

				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", requestagentid));
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting  where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
									"(select sum(commission) as bettingtimecommission from bet_commission where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				model.addAttribute("agentdatas", agentdatas);
				model.addAttribute("agentaccount", betaaa.getAccount());
				model.addAttribute("agentnickname", betaaa.getNickname());
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				model.addAttribute("agentid", requestagentid);
				return "/lottery/betreportform/betreportformagreport";
			}
		}else if("2".equals(request.getParameter("k"))){
			//投注额
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList111";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas= bjdcSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),BjdcScheme.class,page);
						
						corebjdc(datas);
						
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbjdcbettingList111";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 and a.state!=2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList111";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state!=2 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting111";
				}
			}else{
				return "errorpage/error";
			}
		}else if("3".equals(request.getParameter("k"))){
			//游戏输赢
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						gcsoccer(model, betReportform, agentid, returnObject,
								page, memberid2, starttime, endtime, gcname,
								calendar);
						return "/lottery/betreportform/betreportformsoccerbettingList222";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.settlementtime>=:starttime and a.settlementtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList222";
					}
				}else{
					page.setOrder("result");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.settlementtime>=:starttime and a.settlementtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting222";
				}
			}else{
				return "errorpage/error";
			}
		}else if("4".equals(request.getParameter("k"))){
			//未结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=0 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList333";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList333";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting333";
				}
			}else{
				return "errorpage/error";
			}
		}else if("5".equals(request.getParameter("k"))){
			//投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList444";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas= bjdcSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),BjdcScheme.class,page);
						
						corebjdc(datas);
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbjdcbettingList444";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a inner join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime  ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList444";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,sum(a.commission) as commission,sum(b.bettingmoney) as totallybettingmoney,sum(b.bettingscore-b.bettingmoney) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime  group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting444";
				
				}
			}else{
				return "errorpage/error";
			}
		
		}else if("6".equals(request.getParameter("k"))){
			//会员
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
				}else{
					BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
					if(betaaa!=null){
						if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
							
						}else{
							return "/errorpage/error";
						}
					}else{
						return "/errorpage/error";
					}

					// ==构造分页请求
					Page page = newPage(request,"b.bettingmoney","desc");
					// ==执行分页查询
					String starttime = request.getParameter("starttime");
					String endtime = request.getParameter("endtime");
					Date date1 =DateUtils.convertString2Date(endtime);
					Calendar calendar = new GregorianCalendar();
					if(date1!=null){
						calendar.setTime(date1); 
						calendar.add(Calendar.DATE,1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
					}
					if(StringUtils.isBlank(starttime)){
						starttime="0000-00-00";
					}
					if(StringUtils.isBlank(endtime)){
						endtime="9999-00-00";
					}
					List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,f.treatedbettingmoney,f.bettingscore,f.bettingwin,g.bettingtimecommission from bet_member a " +
							"left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 " +
							"left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 " +
							"left join (select memberid2,sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 group by memberid2)f on f.memberid2=a.id2 " +
							"left join (select memberid2,sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id) group by memberid2)g on g.memberid2=a.id2 "+
							" where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
					returnObject.setQueryBean(betReportform);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("agentaccount", betaaa.getAccount());
					model.addAttribute("agentnickname", betaaa.getNickname());
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", requestagentid);
					return "/lottery/betreportform/betreportformagmemberreport";
				}
		
		}else if("7".equals(request.getParameter("k"))){
			//未结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList5";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList5";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					//北单处理
					bjdc(datas);
					basketballAll(datas);
					superlottoAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList5";
				}
			}
		}else if("8".equals(request.getParameter("k"))){
			//投注额
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList6";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) and a.situation!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList6";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					//篮球处理
					basketballAll(datas);
					superlottoAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList6";
				}
			}
		}else if("9".equals(request.getParameter("k"))){
			//已结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList7";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList7";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					superlottoAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList7";
				}
			}
		}else if("10".equals(request.getParameter("k"))){
			//代理投注退佣（按结算时间统计）
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id ) vxcv on vxcv.id=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid)  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id ) vxcv on vxcv.id=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid )  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList8";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2) vxcv on vxcv.schemeid=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid)  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2) vxcv on vxcv.schemeid=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList8";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission left join (select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2) vxcv on vxcv.id=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission left join (select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2) vxcv on vxcv.id=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList8";
				}
			}
		}else if("11".equals(request.getParameter("k"))){
			//游戏输赢(按结算时间统计)
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList9";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList9";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList9";
				}
			}
		}else if("12".equals(request.getParameter("k"))){
			//投注退佣
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList10";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
//						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (c.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid ) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList10";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type) and a.agentid=:agentid ").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList10";
				}
			}
		}else if("13".equals(request.getParameter("k"))){
			//已结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=1 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList555";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=1 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList555";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney, sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.state=1 and a.bettingtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting555";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
				return "errorpage/error";
			}
		}else if("14".equals(request.getParameter("k"))){
			//会员投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.settlementtime>=:starttime and a.settlementtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and d.bettingtime>=:starttime and d.bettingtime<:endtime and d.situation=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						 
						soccer(datas);
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList666";
					}else{
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a left join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and e.bettingtime>=:starttime and e.bettingtime<:endtime and e.state=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList666";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,sum(a.commission) as commission,sum(b.bettingmoney) as totallybettingmoney,sum(b.bettingscore-b.bettingmoney) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and b.bettingtime>=:starttime and b.bettingtime<:endtime and b.state=1 group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting666";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
				return "errorpage/error";
			}
		}else if("15".equals(request.getParameter("k"))){
			//转账
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			// ==构造分页请求
			Page page = newPage(request,"time","desc");
			// ==执行分页查询
			String starttime = request.getParameter("startTime");
			String endtime = request.getParameter("endTime");
			Date date1 =DateUtils.convertString2Date(endtime);
			Calendar calendar = new GregorianCalendar();
			if(date1!=null){
				calendar.setTime(date1); 
				calendar.add(Calendar.DATE,1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
			}
			if(StringUtils.isBlank(starttime)){
				starttime="0000-00-00";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="9999-00-00";
			}
			if("1".equals(request.getParameter("todayflag"))){
				Date dateeee=new Date();
				 starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				 endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date2 =DateUtils.convertString2Date(endtime);
				Calendar calendar1 = new GregorianCalendar();
				if(date2!=null){
					calendar1.setTime(date2); 
					calendar1.add(Calendar.DATE,1);
					Date date3=calendar1.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
			}
			List<BetTransferAccounts> datas = new ArrayList<>();
			
			if("1".equals(request.getParameter("directlyunder"))){
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid), BetTransferAccounts.class, page);
				model.addAttribute("directlyunder", 1);
			}else{
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid or agentparentids like :aid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid).setParam("aid", "%,"+requestagentid+",%"), BetTransferAccounts.class, page);
			}
			
			returnObject.setQueryBean(new BetBetting());
			returnObject.setPage(page);
			returnObject.setData(datas);
			if(!"0000-00-00".equals(starttime)){
				model.addAttribute("startTime", starttime);
			}
			if(!"9999-00-00".equals(endtime)){
				Date date2 =DateUtils.convertString2Date(endtime);
				calendar.setTime(date2); 
				calendar.add(Calendar.DATE,-1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
				model.addAttribute("endTime", endtime);
			}
			
			model.addAttribute("agentid", requestagentid);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformbetTransferAccountsList2";
		}else{
			//今日
			model.addAttribute("todayflag", 1);
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				//所在周开始日期
				Date dateeee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", agentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid),page);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betagentt.getAccount());	
				model.addAttribute("agentnickname", betagentt.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				return "/lottery/betreportform/betreportformagreport";
		
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
//				Calendar cal = Calendar.getInstance();
//				int d = 0;
//				if(cal.get(Calendar.DAY_OF_WEEK)==1){
//					d = -6;
//				}else{
//					d = 2-cal.get(Calendar.DAY_OF_WEEK);
//				}
//				cal.add(Calendar.DAY_OF_WEEK, d);
				//所在周开始日期
				Date dateee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateee);
//				cal.add(Calendar.DAY_OF_WEEK, 6);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", requestagentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(commission) as bettingtimecommission from bet_commission where  bettingtime>=:starttime and  bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission where  bettingtime>=:starttime and  bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				
				
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
//				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betaaa.getAccount());
				model.addAttribute("agentnickname", betaaa.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				model.addAttribute("agentid", requestagentid);
				return "/lottery/betreportform/betreportformagreport";
			}
		}
	}



	private void soccer(List<SoccerScheme> datas) throws Exception {
		if(datas!=null){
			List<String> schemeids=new ArrayList<String>();
			schemeids.add("");
			for (SoccerScheme soccerScheme2 : datas) {
				String schemeid = soccerScheme2.getSchemeid();
				if(schemeid!=null){
					schemeids.add(soccerScheme2.getSchemeid());
				}
			}
				
			List<SoccerSchemeMatch> matchDatas= soccerSchemeMatchService.queryForList(new Finder("select a.schemeid,a.id,a.mid,a.dan,b.matchname,b.leftteamname,b.rightteamname,b.starttime,b.endtime,b.num,c.halfscore,c.allscore from soccer_scheme_match a LEFT JOIN soccer_league_arrange b on a.mid = b.mid left join soccer_league_result c on a.mid = c.mid where a.schemeid in (:schemeid)  order by a.id").setParam("schemeid", schemeids), SoccerSchemeMatch.class);
			if(matchDatas!=null){
				List<Map<String, Object>> resultMap = soccerSchemeMatchService.queryForList(new Finder("select a.oddsname,a.mid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.playmethodid,c.schemeid from soccer_league_order_content a LEFT JOIN soccer_league_playmethod_oddsname b on a.oddsname=b.oddsname LEFT JOIN soccer_league_order c on a.orderid = c.orderid where  c.schemeid in (:schemeid)  group by c.schemeid, a.mid,a.oddsname").setParam("schemeid", schemeids));
				if(resultMap!=null){
					for (Map<String, Object> m : resultMap){
						String oddsname  = m.get("oddsname").toString();
						String oddsrealname = "";
					    if("left_odds".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("2x1_"+m.get("mid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
									SoccerLeague2choose1odds readValue = mmmm.readValue(cached2, SoccerLeague2choose1odds.class);
									oddsrealname =readValue.getLeft_name();
										m.put("oddsrealname", oddsrealname);
						    	}else{
						    		oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select left_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
							    	 m.put("oddsrealname", oddsrealname);
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select left_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
						    	 m.put("oddsrealname", oddsrealname);
							}
					    }else if("right_odds".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("2x1_"+m.get("mid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
									SoccerLeague2choose1odds readValue = mmmm.readValue(cached2, SoccerLeague2choose1odds.class);
									oddsrealname =readValue.getRight_name();
										m.put("oddsrealname", oddsrealname);
						    	}else{
						    		oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select right_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
							    	 m.put("oddsrealname", oddsrealname);
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select right_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
						    	 m.put("oddsrealname", oddsrealname);
							}
					    }
					    if("rqwin".equals(oddsname)||"rqflat".equals(oddsname)||"rqlose".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("rqsfp_"+m.get("mid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
						    		SoccerLeagueOdds readValue = mmmm.readValue(cached2, SoccerLeagueOdds.class);
						    		String letpoints = readValue.getLetpoints();
						    		String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}else{
						    		String letpoints = soccerLeagueOddsService.queryForObject(new Finder("select letpoints from soccer_league_odds where mid = :mid and type = 1 ").setParam("mid", m.get("mid").toString()), String.class);
							    	String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								String letpoints = soccerLeagueOddsService.queryForObject(new Finder("select letpoints from soccer_league_odds where mid = :mid and type = 1 ").setParam("mid", m.get("mid").toString()), String.class);
						    	String betname = m.get("betname").toString();
						    	m.put("betname",betname+"("+ letpoints+")");
							}
					    }
					}
				}
				for(SoccerSchemeMatch schemeMatch : matchDatas){
					
					String schemeid = schemeMatch.getSchemeid();
					String mid = schemeMatch.getMid();
					List<Map<String, Object>> mmm=new ArrayList<Map<String, Object>>();
					for (Map<String, Object> m : resultMap){
						if(schemeid.equals((String)m.get("schemeid"))&&mid.equals((String)m.get("mid"))){
							mmm.add(m);
						}
					}
					schemeMatch.setResultMap(mmm);
					schemeMatch.setNum(WeekOfDate.getWeekOfDate(schemeMatch.getEndtime())+schemeMatch.getNum());
				}
			}
			for(SoccerScheme scheme : datas){
				List<SoccerSchemeMatch> sss=new ArrayList<SoccerSchemeMatch>();
				if(matchDatas!=null){
					for(SoccerSchemeMatch schemeMatch : matchDatas){
						String schemeid = schemeMatch.getSchemeid();
						if(schemeid.equals(scheme.getSchemeid())){
							sss.add(schemeMatch);
						}
					}
				}
				scheme.setSchemecontent(sss);
			}
		}
	}



	private void basketballAll(List<SoccerAllbetting> datas) throws Exception {
		if(datas!=null){
			List<String> schemeids=new ArrayList<String>();
			schemeids.add("");
			for (SoccerAllbetting allBetting : datas) {
				if(3==allBetting.getType()){
					String schemeid = allBetting.getId();
					if(schemeid!=null){
						schemeids.add(allBetting.getId());
					}
				}
			}
			
			List<BasketballSchemeMatch> matchDatas= basketballSchemeMatchService.queryForList(new Finder("select a.schemeid,a.id,a.zid,a.dan,b.matchname,b.hometeam,b.awayteam,b.starttime,b.endtime,b.num,b.matchdate,c.score from basketball_scheme_match a LEFT JOIN basketball_league_arrange b on a.zid = b.zid left join basketball_league_result c on a.zid = c.zid where a.schemeid in (:schemeid)  order by a.id").setParam("schemeid", schemeids), BasketballSchemeMatch.class);
			if(matchDatas!=null){
				List<Map<String, Object>> resultMap = basketballSchemeMatchService.queryForList(new Finder("select a.oddsname,a.zid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.shortname,c.schemeid from basketball_order_content a LEFT JOIN basketball_league_playmethod_oddsname b on a.oddsname=b.oddsname LEFT JOIN basketball_order c on a.orderid = c.orderid where c.schemeid in (:schemeid)  group by a.oddsname,a.zid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.shortname,c.schemeid").setParam("schemeid", schemeids));
				if(resultMap!=null){
					for (Map<String, Object> m : resultMap){
						String oddsname  = m.get("oddsname").toString();
					    
						if("big".equals(oddsname)||"small".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("basketballOdds_"+m.get("zid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
						    		BasketballLeagueOdds readValue = mmmm.readValue(cached2, BasketballLeagueOdds.class);
						    		String dxf = readValue.getDxf().toString();
						    		String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ dxf+")");
						    	}else{
						    		String dxf = basketballLeagueOddsService.queryForObject(new Finder("select dxf from basketball_league_odds where zid = :zid ").setParam("zid", m.get("zid").toString()), String.class);
							    	String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ dxf+")");
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								String dxf = basketballLeagueOddsService.queryForObject(new Finder("select dxf from basketball_league_odds where zid = :zid ").setParam("zid", m.get("zid").toString()), String.class);
						    	String betname = m.get("betname").toString();
						    	m.put("betname",betname+"("+ dxf+")");
							}
					    }
						
					    if("rfzs".equals(oddsname)||"rfzf".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("basketballOdds_"+m.get("zid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
						    		BasketballLeagueOdds readValue = mmmm.readValue(cached2, BasketballLeagueOdds.class);
						    		String letpoints = readValue.getLetpoints().toString();
						    		String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}else{
						    		String letpoints = basketballLeagueOddsService.queryForObject(new Finder("select letpoints from basketball_league_odds where zid = :zid ").setParam("zid", m.get("zid").toString()), String.class);
							    	String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								String letpoints = basketballLeagueOddsService.queryForObject(new Finder("select letpoints from basketball_league_odds where zid = :zid ").setParam("zid", m.get("zid").toString()), String.class);
						    	String betname = m.get("betname").toString();
						    	m.put("betname",betname+"("+ letpoints+")");
							}
					    }
					}
				}
				for(BasketballSchemeMatch basketballMatch : matchDatas){
					String schemeid = basketballMatch.getSchemeid();
					String zid = basketballMatch.getZid();
					List<Map<String, Object>> mmm=new ArrayList<Map<String, Object>>();
					for (Map<String, Object> m : resultMap){
						if(schemeid.equals((String)m.get("schemeid"))&&zid.equals((String)m.get("zid"))){
							mmm.add(m);
						}
					}
					basketballMatch.setResultMap(mmm);
					basketballMatch.setNum(basketballWeekOfDate.getWeekOfDate(basketballMatch.getMatchdate())+basketballMatch.getNum());
				}
			}
			
			for(SoccerAllbetting allBetting : datas){
				List<BasketballSchemeMatch> sss=new ArrayList<BasketballSchemeMatch>();
				if(matchDatas!=null){
					for(BasketballSchemeMatch schemeMatch : matchDatas){
						String schemeid = schemeMatch.getSchemeid();
						if(schemeid.equals(allBetting.getId())){
							sss.add(schemeMatch);
						}
					}
				}
				allBetting.setBasketballschemecontent(sss);
			}
			
		}
	}



	private void soccerAll(List<SoccerAllbetting> datas) throws Exception {
		if(datas!=null){
			List<String> schemeids=new ArrayList<String>();
			schemeids.add("");
			for (SoccerAllbetting allBetting : datas) {
				if(1==allBetting.getType()){
					String schemeid = allBetting.getId();
					if(schemeid!=null){
						schemeids.add(allBetting.getId());
					}
				}
			}
			List<SoccerSchemeMatch> matchDatas= soccerSchemeMatchService.queryForList(new Finder("select a.schemeid,a.id,a.mid,a.dan,b.matchname,b.leftteamname,b.rightteamname,b.starttime,b.endtime,b.num,c.halfscore,c.allscore from soccer_scheme_match a LEFT JOIN soccer_league_arrange b on a.mid = b.mid left join soccer_league_result c on a.mid = c.mid where a.schemeid in (:schemeid)  order by a.id").setParam("schemeid", schemeids), SoccerSchemeMatch.class);
			if(matchDatas!=null){
				List<Map<String, Object>> resultMap = soccerSchemeMatchService.queryForList(new Finder("select a.oddsname,a.mid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.playmethodid,c.schemeid from soccer_league_order_content a LEFT JOIN soccer_league_playmethod_oddsname b on a.oddsname=b.oddsname LEFT JOIN soccer_league_order c on a.orderid = c.orderid where c.schemeid in (:schemeid)  group by a.oddsname,a.mid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.playmethodid,c.schemeid").setParam("schemeid", schemeids));
				if(resultMap!=null){
					for (Map<String, Object> m : resultMap){
						String oddsname  = m.get("oddsname").toString();
						String oddsrealname = "";
						
						if("left_odds".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("2x1_"+m.get("mid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
									SoccerLeague2choose1odds readValue = mmmm.readValue(cached2, SoccerLeague2choose1odds.class);
									oddsrealname =readValue.getLeft_name();
										m.put("oddsrealname", oddsrealname);
						    	}else{
						    		oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select left_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
							    	 m.put("oddsrealname", oddsrealname);
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select left_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
						    	 m.put("oddsrealname", oddsrealname);
							}
					    	
					    }else if("right_odds".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("2x1_"+m.get("mid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
									SoccerLeague2choose1odds readValue = mmmm.readValue(cached2, SoccerLeague2choose1odds.class);
									oddsrealname =readValue.getRight_name();
										m.put("oddsrealname", oddsrealname);
						    	}else{
						    		oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select right_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
							    	 m.put("oddsrealname", oddsrealname);
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select right_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
						    	 m.put("oddsrealname", oddsrealname);
							}
					    }
					    if("rqwin".equals(oddsname)||"rqflat".equals(oddsname)||"rqlose".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("rqsfp_"+m.get("mid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
						    		SoccerLeagueOdds readValue = mmmm.readValue(cached2, SoccerLeagueOdds.class);
						    		String letpoints = readValue.getLetpoints();
						    		String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}else{
						    		String letpoints = soccerLeagueOddsService.queryForObject(new Finder("select letpoints from soccer_league_odds where mid = :mid and type = 1 ").setParam("mid", m.get("mid").toString()), String.class);
							    	String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								String letpoints = soccerLeagueOddsService.queryForObject(new Finder("select letpoints from soccer_league_odds where mid = :mid and type = 1 ").setParam("mid", m.get("mid").toString()), String.class);
						    	String betname = m.get("betname").toString();
						    	m.put("betname",betname+"("+ letpoints+")");
							}
					    }
					}
				}
				for(SoccerSchemeMatch schemeMatch : matchDatas){
					String schemeid = schemeMatch.getSchemeid();
					String mid = schemeMatch.getMid();
					List<Map<String, Object>> mmm=new ArrayList<Map<String, Object>>();
					for (Map<String, Object> m : resultMap){
						if(schemeid.equals((String)m.get("schemeid"))&&mid.equals((String)m.get("mid"))){
							mmm.add(m);
						}
					}
					schemeMatch.setResultMap(mmm);
					schemeMatch.setNum(WeekOfDate.getWeekOfDate(schemeMatch.getEndtime())+schemeMatch.getNum());
				}
			}
			
			for(SoccerAllbetting allBetting : datas){
				List<SoccerSchemeMatch> sss=new ArrayList<SoccerSchemeMatch>();
				if(matchDatas!=null){
					for(SoccerSchemeMatch schemeMatch : matchDatas){
						String schemeid = schemeMatch.getSchemeid();
						if(schemeid.equals(allBetting.getId())){
							sss.add(schemeMatch);
						}
					}
				}
				allBetting.setSchemecontent(sss);
			}
		}
	}
	
	private void superlottoAll(List<SoccerAllbetting> datas) throws Exception {
		if(datas!=null){
			List<String> schemeids=new ArrayList<String>();
			schemeids.add("");
			for (SoccerAllbetting allBetting : datas) {
				if(5==allBetting.getType()){
					String schemeid = allBetting.getId();
					if(schemeid!=null){
						schemeids.add(allBetting.getId());
					}
				}
			}
			
			List<LotteryOrder> orderDatas=null;
			if(!schemeids.isEmpty()){
				orderDatas= lotteryOrderService.queryForList(new Finder("select a.*,b.name as playmethod from lottery_order a LEFT JOIN lottery_playmethod b on a.playtype = b.id where a.schemeid in (:schemeid) order by a.id").setParam("schemeid", schemeids), LotteryOrder.class);
			}
			for(SoccerAllbetting allBetting : datas){
				List<LotteryOrder> sss=new ArrayList<LotteryOrder>();
				if(orderDatas!=null){
					for(LotteryOrder schemeContent : orderDatas){
						String schemeid = schemeContent.getSchemeid();
						if(schemeid.equals(allBetting.getId())){
							sss.add(schemeContent);
						}
					}
				}
				allBetting.setLotteryschemecontent(sss);
			}
		}
	}
	
	@RequestMapping("/agreport/v2")
	public String agreportnew(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		if("1".equals(request.getParameter("k"))){
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", agentid));
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd = betAgentreportformJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double recharge=0.;
								Double withdraw=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("recharge");
								Object object12 = ddd.get("withdraw");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									recharge=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									withdraw=((BigDecimal)object12).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("recharge", recharge);
								map.put("withdraw", withdraw);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid));
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{

						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
				model.addAttribute("agentdatas", agentdatas);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betagentt.getAccount());
				model.addAttribute("agentnickname", betagentt.getNickname());
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				return "/lottery/betreportform/betreportformagreportv2";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}

				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id)").setParam("id", requestagentid));
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd = betAgentreportformJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge ,sum(withdraw) as withdraw from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double recharge=0.;
								Double withdraw=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("recharge");
								Object object12 = ddd.get("withdraw");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									recharge=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									withdraw=((BigDecimal)object12).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("recharge", recharge);
								map.put("withdraw", withdraw);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid));
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
				model.addAttribute("agentdatas", agentdatas);
				model.addAttribute("agentaccount", betaaa.getAccount());
				model.addAttribute("agentnickname", betaaa.getNickname());
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				model.addAttribute("agentid", requestagentid);
				return "/lottery/betreportform/betreportformagreportv2";
			}
		}else if("2".equals(request.getParameter("k"))){
			//投注额
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList111";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas= bjdcSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),BjdcScheme.class,page);
						
						corebjdc(datas);
						
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbjdcbettingList111";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 and a.state!=2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList111";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state!=2 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting111";
				}
			}else{
				return "errorpage/error";
			}
		}else if("3".equals(request.getParameter("k"))){
			//游戏输赢
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						gcsoccer(model, betReportform, agentid, returnObject,
								page, memberid2, starttime, endtime, gcname,
								calendar);
						return "/lottery/betreportform/betreportformsoccerbettingList222";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.settlementtime>=:starttime and a.settlementtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList222";
					}
				}else{
					page.setOrder("result");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.settlementtime>=:starttime and a.settlementtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting222";
				}
			}else{
				return "errorpage/error";
			}
		}else if("4".equals(request.getParameter("k"))){
			//未结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=0 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList333";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList333";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting333";
				}
			}else{
				return "errorpage/error";
			}
		}else if("5".equals(request.getParameter("k"))){
			//投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList444";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas= bjdcSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),BjdcScheme.class,page);
						
						corebjdc(datas);
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbjdcbettingList444";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a inner join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime  ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList444";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,sum(a.commission) as commission,sum(b.bettingmoney) as totallybettingmoney,sum(b.bettingscore-b.bettingmoney) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime  group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting444";
				
				}
			}else{
				return "errorpage/error";
			}
		
		}else if("6".equals(request.getParameter("k"))){
			//会员
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
				}else{
					BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
					if(betaaa!=null){
						if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
							
						}else{
							return "/errorpage/error";
						}
					}else{
						return "/errorpage/error";
					}

					// ==构造分页请求
					Page page = newPage(request,"b.bettingmoney","desc");
					// ==执行分页查询
					String starttime = request.getParameter("starttime");
					String endtime = request.getParameter("endtime");
					Date date1 =DateUtils.convertString2Date(endtime);
					Calendar calendar = new GregorianCalendar();
					if(date1!=null){
						calendar.setTime(date1); 
						calendar.add(Calendar.DATE,1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
					}
					if(StringUtils.isBlank(starttime)){
						starttime="0000-00-00";
					}
					if(StringUtils.isBlank(endtime)){
						endtime="9999-00-00";
					}
					List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,f.treatedbettingmoney,f.bettingscore,f.bettingwin,g.bettingtimecommission from bet_member a " +
							"left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 " +
							"left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 " +
							"left join (select memberid2,sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 group by memberid2)f on f.memberid2=a.id2 " +
							"left join (select memberid2,sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id) group by memberid2)g on g.memberid2=a.id2 "+
							" where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
					returnObject.setQueryBean(betReportform);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("agentaccount", betaaa.getAccount());
					model.addAttribute("agentnickname", betaaa.getNickname());
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", requestagentid);
					return "/lottery/betreportform/betreportformagmemberreport";
				}
		
		}else if("7".equals(request.getParameter("k"))){
			//未结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList5";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList5";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					//北单处理
					bjdc(datas);
					basketballAll(datas);
					superlottoAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList5";
				}
			}
		}else if("8".equals(request.getParameter("k"))){
			//投注额
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList6";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) and a.situation!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList6";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					superlottoAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList6";
				}
			}
		}else if("9".equals(request.getParameter("k"))){
			//已结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList7";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList7";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					superlottoAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList7";
				}
			}
		}else if("10".equals(request.getParameter("k"))){
			//代理投注退佣（按结算时间统计）
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id ) vxcv on vxcv.id=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid)  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id ) vxcv on vxcv.id=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid )  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList8";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2) vxcv on vxcv.schemeid=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid)  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2) vxcv on vxcv.schemeid=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList8";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission left join (select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2) vxcv on vxcv.id=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission left join (select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2) vxcv on vxcv.id=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList8";
				}
			}
		}else if("11".equals(request.getParameter("k"))){
			//游戏输赢(按结算时间统计)
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList9";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList9";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList9";
				}
			}
		}else if("12".equals(request.getParameter("k"))){
			//投注退佣
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList10";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
//						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (c.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid ) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList10";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type) and a.agentid=:agentid ").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList10";
				}
			}
		}else if("13".equals(request.getParameter("k"))){
			//已结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=1 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList555";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=1 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList555";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney, sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.state=1 and a.bettingtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting555";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
			}else{
				return "errorpage/error";
			}
		}else if("14".equals(request.getParameter("k"))){
			//会员投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.settlementtime>=:starttime and a.settlementtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and d.bettingtime>=:starttime and d.bettingtime<:endtime and d.situation=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						 
						soccer(datas);
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList666";
					}else{
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a left join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and e.bettingtime>=:starttime and e.bettingtime<:endtime and e.state=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList666";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,sum(a.commission) as commission,sum(b.bettingmoney) as totallybettingmoney,sum(b.bettingscore-b.bettingmoney) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and b.bettingtime>=:starttime and b.bettingtime<:endtime and b.state=1 group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting666";
				}
			}else{
				return "errorpage/error";
			}
		}else if("15".equals(request.getParameter("k"))){
			//转账
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			// ==构造分页请求
			Page page = newPage(request,"time","desc");
			// ==执行分页查询
			String starttime = request.getParameter("startTime");
			String endtime = request.getParameter("endTime");
			Date date1 =DateUtils.convertString2Date(endtime);
			Calendar calendar = new GregorianCalendar();
			if(date1!=null){
				calendar.setTime(date1); 
				calendar.add(Calendar.DATE,1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
			}
			if(StringUtils.isBlank(starttime)){
				starttime="0000-00-00";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="9999-00-00";
			}
			if("1".equals(request.getParameter("todayflag"))){
				Date dateeee=new Date();
				 starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				 endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date2 =DateUtils.convertString2Date(endtime);
				Calendar calendar1 = new GregorianCalendar();
				if(date2!=null){
					calendar1.setTime(date2); 
					calendar1.add(Calendar.DATE,1);
					Date date3=calendar1.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
			}
			List<BetTransferAccounts> datas = new ArrayList<>();
			
			if("1".equals(request.getParameter("directlyunder"))){
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid), BetTransferAccounts.class, page);
				model.addAttribute("directlyunder", 1);
			}else{
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid or agentparentids like :aid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid).setParam("aid", "%,"+requestagentid+",%"), BetTransferAccounts.class, page);
			}
			
			returnObject.setQueryBean(new BetBetting());
			returnObject.setPage(page);
			returnObject.setData(datas);
			if(!"0000-00-00".equals(starttime)){
				model.addAttribute("startTime", starttime);
			}
			if(!"9999-00-00".equals(endtime)){
				Date date2 =DateUtils.convertString2Date(endtime);
				calendar.setTime(date2); 
				calendar.add(Calendar.DATE,-1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
				model.addAttribute("endTime", endtime);
			}
			
			model.addAttribute("agentid", requestagentid);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformbetTransferAccountsList2";
		}else{
			//今日
			model.addAttribute("todayflag", 1);
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				//所在周开始日期
				Date dateeee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", agentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							
							Map<String, Object> ddd = betAgentreportformJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double recharge=0.;
								Double withdraw=0.;
								
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("recharge");
								Object object12 = ddd.get("withdraw");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									recharge=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									withdraw=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("recharge", recharge);
								map.put("withdraw", withdraw);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid));
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid),page);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betagentt.getAccount());	
				model.addAttribute("agentnickname", betagentt.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				return "/lottery/betreportform/betreportformagreportv2";
		
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
//				Calendar cal = Calendar.getInstance();
//				int d = 0;
//				if(cal.get(Calendar.DAY_OF_WEEK)==1){
//					d = -6;
//				}else{
//					d = 2-cal.get(Calendar.DAY_OF_WEEK);
//				}
//				cal.add(Calendar.DAY_OF_WEEK, d);
				//所在周开始日期
				Date dateee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateee);
//				cal.add(Calendar.DAY_OF_WEEK, 6);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", requestagentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							
							Map<String, Object> ddd = betAgentreportformJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge ,sum(withdraw) as withdraw from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double recharge=0.;
								Double withdraw=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("recharge");
								Object object12 = ddd.get("withdraw");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									recharge=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									withdraw=((BigDecimal)object12).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("recharge", recharge);
								map.put("withdraw", withdraw);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformJcService.queryForObject(new Finder("select agentid,agentparentids,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore,sum(recharge) as recharge,sum(withdraw) as withdraw from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid));
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
				
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
//				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betaaa.getAccount());
				model.addAttribute("agentnickname", betaaa.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				model.addAttribute("agentid", requestagentid);
				return "/lottery/betreportform/betreportformagreportv2";
			}
		}
	}
	
	@RequestMapping("/agreport/v3")//威尼斯使用
	public String agreportV3(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		if("2".equals(request.getParameter("k"))){
			//投注额
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList111";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas= bjdcSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),BjdcScheme.class,page);
						
						corebjdc(datas);
						
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbjdcbettingList111";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 and a.state!=2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList111";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state!=2 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting111";
				}
			}else{
				return "errorpage/error";
			}
		}else if("3".equals(request.getParameter("k"))){
			//游戏输赢
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						gcsoccer(model, betReportform, agentid, returnObject,
								page, memberid2, starttime, endtime, gcname,
								calendar);
						return "/lottery/betreportform/betreportformsoccerbettingList222";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.settlementtime>=:starttime and a.settlementtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList222";
					}
				}else{
					page.setOrder("result");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.settlementtime>=:starttime and a.settlementtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting222";
				}
			}else{
				return "errorpage/error";
			}
		}else if("4".equals(request.getParameter("k"))){
			//未结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=0 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList333";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList333";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting333";
				}
			}else{
				return "errorpage/error";
			}
		}else if("5".equals(request.getParameter("k"))){
			//投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					if("竞彩足球".equals(gcname)){
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformsoccerbettingList444";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas= bjdcSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),BjdcScheme.class,page);
						
						corebjdc(datas);
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbjdcbettingList444";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a inner join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime  ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbettingList444";
					}
				}else{
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,sum(a.commission) as commission,sum(b.bettingmoney) as totallybettingmoney,sum(b.bettingscore-b.bettingmoney) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and a.settlementtime>=:starttime and a.settlementtime<:endtime  group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting444";
				
				}
			}else{
				return "errorpage/error";
			}
		
		}else if("6".equals(request.getParameter("k"))){
			//会员
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
				}else{
					BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
					if(betaaa!=null){
						if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
							
						}else{
							return "/errorpage/error";
						}
					}else{
						return "/errorpage/error";
					}

					// ==构造分页请求
					Page page = newPage(request,"b.bettingmoney","desc");
					// ==执行分页查询
					String starttime = request.getParameter("starttime");
					String endtime = request.getParameter("endtime");
					Date date1 =DateUtils.convertString2Date(endtime);
					Calendar calendar = new GregorianCalendar();
					if(date1!=null){
						calendar.setTime(date1); 
						calendar.add(Calendar.DATE,1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
					}
					if(StringUtils.isBlank(starttime)){
						starttime="0000-00-00";
					}
					if(StringUtils.isBlank(endtime)){
						endtime="9999-00-00";
					}
					List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,f.treatedbettingmoney,f.bettingscore,f.bettingwin,g.bettingtimecommission from bet_member a " +
							"left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 " +
							"left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 " +
							"left join (select memberid2,sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 group by memberid2)f on f.memberid2=a.id2 " +
							"left join (select memberid2,sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id) group by memberid2)g on g.memberid2=a.id2 "+
							" where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
					returnObject.setQueryBean(betReportform);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("agentaccount", betaaa.getAccount());
					model.addAttribute("agentnickname", betaaa.getNickname());
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", requestagentid);
					return "/lottery/betreportform/betreportformagreport_wns";
				}
		
		}else if("7".equals(request.getParameter("k"))){
			//未结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList5";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList5";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					//北单处理
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList5";
				}
			}
		}else if("8".equals(request.getParameter("k"))){
			//投注额
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList6";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) and a.situation!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList6";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					try {
						soccerAll(datas);
						bjdc(datas);
						//篮球处理
						basketballAll(datas);
					} catch (Exception e) {
						// TODO: handle exception
					}
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList6";
				}
			}
		}else if("9".equals(request.getParameter("k"))){
			//已结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList7";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList7";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList7";
				}
			}
		}else if("10".equals(request.getParameter("k"))){
			//代理投注退佣（按结算时间统计）
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id ) vxcv on vxcv.id=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid)  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id ) vxcv on vxcv.id=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid )  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList8";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2) vxcv on vxcv.schemeid=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid)  ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission inner join (select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2) vxcv on vxcv.schemeid=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList8";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission left join (select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2) vxcv on vxcv.id=bet_commission.orderid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select bet_commission.commission,vxcv.* from bet_commission left join (select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2) vxcv on vxcv.id=bet_commission.orderid left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:agentid or bet_agent.parentids like :aid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList8";
				}
			}
		}else if("11".equals(request.getParameter("k"))){
			//游戏输赢(按结算时间统计)
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList9";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList9";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.settlementtime>=:starttime and a.settlementtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList9";
				}
			}
		}else if("12".equals(request.getParameter("k"))){
			//投注退佣
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList10";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
//						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (c.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid ) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList10";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type) and a.agentid=:agentid ").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList10";
				}
			}
		}else if("13".equals(request.getParameter("k"))){
			//已结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=1 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList555";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=1 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList555";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney, sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.state=1 and a.bettingtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting555";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
				return "errorpage/error";
			}
		}else if("14".equals(request.getParameter("k"))){
			//会员投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.settlementtime>=:starttime and a.settlementtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and d.bettingtime>=:starttime and d.bettingtime<:endtime and d.situation=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						 
						soccer(datas);
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList666";
					}else{
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a left join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and e.bettingtime>=:starttime and e.bettingtime<:endtime and e.state=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList666";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,sum(a.commission) as commission,sum(b.bettingmoney) as totallybettingmoney,sum(b.bettingscore-b.bettingmoney) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and b.bettingtime>=:starttime and b.bettingtime<:endtime and b.state=1 group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting666";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
				return "errorpage/error";
			}
		}else if("15".equals(request.getParameter("k"))){
			//转账
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			// ==构造分页请求
			Page page = newPage(request,"time","desc");
			// ==执行分页查询
			String starttime = request.getParameter("startTime");
			String endtime = request.getParameter("endTime");
			Date date1 =DateUtils.convertString2Date(endtime);
			Calendar calendar = new GregorianCalendar();
			if(date1!=null){
				calendar.setTime(date1); 
				calendar.add(Calendar.DATE,1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
			}
			if(StringUtils.isBlank(starttime)){
				starttime="0000-00-00";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="9999-00-00";
			}
			if("1".equals(request.getParameter("todayflag"))){
				Date dateeee=new Date();
				 starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				 endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date2 =DateUtils.convertString2Date(endtime);
				Calendar calendar1 = new GregorianCalendar();
				if(date2!=null){
					calendar1.setTime(date2); 
					calendar1.add(Calendar.DATE,1);
					Date date3=calendar1.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
			}
			List<BetTransferAccounts> datas = new ArrayList<>();
			
			if("1".equals(request.getParameter("directlyunder"))){
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid), BetTransferAccounts.class, page);
				model.addAttribute("directlyunder", 1);
			}else{
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid or agentparentids like :aid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid).setParam("aid", "%,"+requestagentid+",%"), BetTransferAccounts.class, page);
			}
			
			returnObject.setQueryBean(new BetBetting());
			returnObject.setPage(page);
			returnObject.setData(datas);
			if(!"0000-00-00".equals(starttime)){
				model.addAttribute("startTime", starttime);
			}
			if(!"9999-00-00".equals(endtime)){
				Date date2 =DateUtils.convertString2Date(endtime);
				calendar.setTime(date2); 
				calendar.add(Calendar.DATE,-1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
				model.addAttribute("endTime", endtime);
			}
			
			model.addAttribute("agentid", requestagentid);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformbetTransferAccountsList2";
		}else{//针对威尼斯代理
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			
			//登录的代理
			BetAgent agent = betAgentService.queryForObject(new Finder("select * from bet_agent where agentid=:agentid and active=1").setParam("agentid", agentid),BetAgent.class);
			//代理等级
			int level = AgentUtils.getSubCompanyLevel(agent.getParentids());
			BetAgent company = null;
			if (level == 1) {
				company = agent;
			} else if (level > 1) {
				String subCompanyId = AgentUtils.getSubCompanyId(agent.getParentids());
				company = betAgentService.queryForObject(new Finder("select * from bet_agent where agentid=:agentid and active=1").setParam("agentid", subCompanyId),BetAgent.class);
			} else {
				return "errorpage/error";
			}
			
			// ==构造分页请求
			Page page = newPage(request,"b.bettingmoney","desc");
			// ==执行分页查询
			
			//起止时间
			String starttime =null;
			String endtime = null;
			
			if(!"1".equals(request.getParameter("k"))){//今日
				model.addAttribute("todayflag", 1);
				Date dateeee=new Date();
				starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
			}else{
				starttime = request.getParameter("starttime");
				endtime = request.getParameter("endtime");
			}
			
			Date date1 =DateUtils.convertString2Date(endtime);
			Calendar calendar = new GregorianCalendar();
			if(date1!=null){
				calendar.setTime(date1); 
				calendar.add(Calendar.DATE,1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
			}
			if(StringUtils.isBlank(starttime)){
				starttime="0000-00-00";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="9999-00-00";
			}
			
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", agentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							BetAgent agent1 = betAgentService.queryForObject(new Finder("select * from bet_agent where agentid=:agentid").setParam("agentid", ageasdf),BetAgent.class);
							BetAgent agent0 = betAgentService.queryForObject(new Finder("select * from bet_agent where agentid=:agentid").setParam("agentid", agent1.getParentid()),BetAgent.class);
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore,lll.receivescore,mmm.memberty,nnn.income from " +
									"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
									"(select sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk,"+
									"(select sum(receivescore) as receivescore from bet_redenvelope_record where receivetime>=:starttime and receivetime<:endtime and (agentid=:id or agentparentids like :aid)) lll,"+
									"(select sum(memberty) as memberty from bet_betting where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) mmm,"+
									"(select sum(income) as income from bet_subordinaterebate_detail where subtime>=:starttime and subtime<:endtime and (agentid=:id or agentparentids like :aid)) nnn"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double receivescore=0.;
								Double memberty=0.;
								Double income=0.;
								Double agentbenefit=0.;
								Double companybenefit=0.;
								Double agentproportion = agent1.getCompanyproportion();
								Double companyproportion = agent0.getCompanyproportion();
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("receivescore");
								Object object12 = ddd.get("memberty");
								Object object13 = ddd.get("income");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									receivescore=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									memberty=((BigDecimal)object12).doubleValue();
								}
								if(object13!=null){
									income=((BigDecimal)object13).doubleValue();
								}
								Double win = bettingwin + memberty + receivescore + income + bettingtimecommission;
								agentbenefit=win*agentproportion/100;
								companybenefit=win*(companyproportion-agentproportion)/100;
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("receivescore", receivescore);
								map.put("memberty", memberty);
								map.put("income", income);
								map.put("agentbenefit", agentbenefit);
								map.put("companybenefit", companybenefit);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore,lll.receivescore,mmm.memberty,nnn.income from " +
						"(select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk,"+
						"(select sum(receivescore) as receivescore from bet_redenvelope_record where receivetime>=:starttime and receivetime<:endtime and (agentid=:id)) lll,"+
						"(select sum(memberty) as memberty from bet_betting where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) mmm,"+
						"(select sum(income) as income from bet_subordinaterebate_detail where state=1 and subtime>=:starttime and subtime<:endtime and (agentid=:id)) nnn"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid),page);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betagentt.getAccount());	
				model.addAttribute("agentnickname", betagentt.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				return "/lottery/betreportform/betreportformagreport_wns";
		
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", requestagentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							BetAgent agent1 = betAgentService.queryForObject(new Finder("select * from bet_agent where agentid=:agentid and active=1").setParam("agentid", ageasdf),BetAgent.class);
							BetAgent agent0 = betAgentService.queryForObject(new Finder("select * from bet_agent where agentid=:agentid and active=1").setParam("agentid", agent1.getParentid()),BetAgent.class);
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore,lll.receivescore,mmm.memberty,nnn.income from " +
									"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
									"(select sum(commission) as bettingtimecommission from bet_commission where  bettingtime>=:starttime and  bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission where  bettingtime>=:starttime and  bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk,"+
									"(select sum(receivescore) as receivescore from bet_redenvelope_record where receivetime>=:starttime and receivetime<:endtime and (agentid=:id or agentparentids like :aid)) lll,"+
									"(select sum(memberty) as memberty from bet_betting where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) mmm,"+
									"(select sum(income) as income from bet_subordinaterebate_detail where state=1 and subtime>=:starttime and subtime<:endtime and (agentid=:id or agentparentids like :aid)) nnn"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Double receivescore=0.;
								Double memberty=0.;
								Double income=0.;
								Double agentbenefit=0.;
								Double companybenefit=0.;
								Double agentproportion = agent1.getCompanyproportion();
								Double companyproportion = agent0.getCompanyproportion();
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								Object object11 = ddd.get("receivescore");
								Object object12 = ddd.get("memberty");
								Object object13 = ddd.get("income");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								if(object11!=null){
									receivescore=((BigDecimal)object11).doubleValue();
								}
								if(object12!=null){
									memberty=((BigDecimal)object12).doubleValue();
								}
								if(object13!=null){
									income=((BigDecimal)object13).doubleValue();
								}
								Double win = bettingwin + memberty + receivescore + income + bettingtimecommission;
								agentbenefit=win*agentproportion/100;
								companybenefit=win*(companyproportion-agentproportion)/100;
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
								map.put("receivescore", bettingtimecommission1);
								map.put("memberty", transferaccountsscore);
								map.put("income", income);
								map.put("agentbenefit", agentbenefit);
								map.put("companybenefit", companybenefit);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore,lll.receivescore,mmm.memberty,nnn.income from " +
						"(select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk,"+
						"(select sum(receivescore) as receivescore from bet_redenvelope_record where receivetime>=:starttime and receivetime<:endtime and (agentid=:id)) lll,"+
						"(select sum(memberty) as memberty from bet_betting where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) mmm,"+
						"(select sum(income) as income from bet_subordinaterebate_detail where state=1 and subtime>=:starttime and subtime<:endtime and (agentid=:id)) nnn"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				
				
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
//				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betaaa.getAccount());
				model.addAttribute("agentnickname", betaaa.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				model.addAttribute("agentid", requestagentid);
				return "/lottery/betreportform/betreportformagreport_wns";
			}
		}
	}
	
	private void gcsoccer(Model model, BetReportform betReportform,
			String agentid, ReturnDatas returnObject, Page page,
			String memberid2, String starttime, String endtime, String gcname,
			Calendar calendar) throws Exception, ParseException {
		List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.settlementtime>=:starttime and a.settlementtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
		soccer(datas);
		if(!"0000-00-00".equals(starttime)){
			model.addAttribute("startTime", starttime);
		}
		if(!"9999-00-00".equals(endtime)){
			Date date2 =DateUtils.convertString2Date(endtime);
			calendar.setTime(date2); 
			calendar.add(Calendar.DATE,-1);
			Date date3=calendar.getTime();
			endtime = DateUtils.convertDate2String(date3);
			model.addAttribute("endTime", endtime);
		}
		returnObject.setQueryBean(betReportform);
		returnObject.setPage(page);
		returnObject.setData(datas);
		model.addAttribute("gcname", gcname);
		model.addAttribute("memberid2", memberid2);
		model.addAttribute(GlobalStatic.returnDatas, returnObject);
	}



	private void bjdc(List<SoccerAllbetting> datas) throws Exception {
		//北京单场
		if(datas!=null){
			List<String> schemeids=new ArrayList<String>();
			schemeids.add("");
			for (SoccerAllbetting allBetting : datas) {
				if(4==allBetting.getType()){
					String schemeid = allBetting.getId();
					if(schemeid!=null){
						schemeids.add(allBetting.getId());
					}
				}
			}
			List<BjdcSchemeMatch> matchDatas= bjdcSchemeMatchService.queryForList(new Finder("select a.schemeid,a.id,a.fid,a.dan,b.matchname,b.hometeam,b.guestteam,b.starttime,b.endtime,b.num,c.halfscore,c.allscore from bjdc_scheme_match a LEFT JOIN bjdc_arrange b on a.fid = b.fid left join bjdc_result c on a.fid = c.fid where a.schemeid in (:schemeid)  order by a.id").setParam("schemeid", schemeids), BjdcSchemeMatch.class);
			if(matchDatas!=null){
				List<Map<String, Object>> resultMap = bjdcSchemeMatchService.queryForList(new Finder("select a.oddsname,a.fid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.playid,c.schemeid from bjdc_order_content a LEFT JOIN bjdc_playmethod_oddsname b on a.oddsname=b.oddsname LEFT JOIN bjdc_order c on a.orderid = c.orderid where c.schemeid in (:schemeid)  group by a.oddsname,a.fid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.playid,c.schemeid").setParam("schemeid", schemeids));
				if(resultMap!=null){
					for (Map<String, Object> m : resultMap){
						String oddsname  = m.get("oddsname").toString();
					    if("rqwin".equals(oddsname)||"rqflat".equals(oddsname)||"rqlose".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("bdsfp_"+m.get("fid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
						    		BjdcOdds readValue = mmmm.readValue(cached2, BjdcOdds.class);
						    		String letpoints = readValue.getLetpoints();
						    		String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}else{
						    		String letpoints = bjdcOddsService.queryForObject(new Finder("select letpoints from bjdc_odds where fid = :fid ").setParam("fid", m.get("fid").toString()), String.class);
							    	String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								String letpoints = bjdcOddsService.queryForObject(new Finder("select letpoints from bjdc_odds where fid = :fid ").setParam("fid", m.get("fid").toString()), String.class);
						    	String betname = m.get("betname").toString();
						    	m.put("betname",betname+"("+ letpoints+")");
							}
					    }
					}
				}
				for(BjdcSchemeMatch schemeMatch : matchDatas){
					String schemeid = schemeMatch.getSchemeid();
					String fid = schemeMatch.getFid();
					List<Map<String, Object>> mmm=new ArrayList<Map<String, Object>>();
					for (Map<String, Object> m : resultMap){
						Object object = m.get("schemeid");
						Object object2 = m.get("mid");
						if(schemeid.equals((String)m.get("schemeid"))&&fid.equals((String)m.get("fid"))){
							mmm.add(m);
						}
					}
					schemeMatch.setResultMap(mmm);
					schemeMatch.setNum(schemeMatch.getNum());
				}
			}
			
			for(SoccerAllbetting allBetting : datas){
				List<BjdcSchemeMatch> sss=new ArrayList<BjdcSchemeMatch>();
				if(matchDatas!=null){
					for(BjdcSchemeMatch schemeMatch : matchDatas){
						String schemeid = schemeMatch.getSchemeid();
						if(schemeid.equals(allBetting.getId())){
							sss.add(schemeMatch);
						}
					}
				}
				allBetting.setBjdcschemecontent(sss);
			}
		}
	}	
	
	
	
	@RequestMapping("/secagreport")
	public String secagreport(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		if("1".equals(request.getParameter("k"))){
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) and active=1 ").setParam("id", agentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(commission) as bettingtimecommission from bet_commission where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2  left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on e.memberid2=a.id2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid),page);
				
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betagentt.getAccount());
				model.addAttribute("agentnickname", betagentt.getNickname());
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				return "/lottery/betreportform/betreportformagreportsec";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}

				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) and active=1 ").setParam("id", requestagentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting  where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2  left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on e.memberid2=a.id2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
				
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
//				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betaaa.getAccount());
				model.addAttribute("agentnickname", betaaa.getNickname());
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				model.addAttribute("agentid", requestagentid);
				return "/lottery/betreportform/betreportformagreportsec";
			}
		}else if("2".equals(request.getParameter("k"))){
			//投注额
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList111sec";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 and a.state!=2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList111sec";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state!=2 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting111sec";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
				return "errorpage/error";
			}
		}else if("4".equals(request.getParameter("k"))){
			//未结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=0 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList333sec";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList333sec";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting333sec";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
				return "errorpage/error";
			}
		}else if("6".equals(request.getParameter("k"))){
			//会员
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
				}else{
					BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid  and active=1").setParam("agentid", requestagentid), BetAgent.class);
					if(betaaa!=null){
						if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
							
						}else{
							return "/errorpage/error";
						}
					}else{
						return "/errorpage/error";
					}

					// ==构造分页请求
					Page page = newPage(request,"b.bettingmoney","desc");
					// ==执行分页查询
					String starttime = request.getParameter("starttime");
					String endtime = request.getParameter("endtime");
					Date date1 =DateUtils.convertString2Date(endtime);
					Calendar calendar = new GregorianCalendar();
					if(date1!=null){
						calendar.setTime(date1); 
						calendar.add(Calendar.DATE,1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
					}
					if(StringUtils.isBlank(starttime)){
						starttime="0000-00-00";
					}
					if(StringUtils.isBlank(endtime)){
						endtime="9999-00-00";
					}
//					List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//					if(agentdatas!=null){
//						for (Map<String, Object> map : agentdatas) {
//							if(map.get("parentids")!=null){
//								String parentids = (String)map.get("parentids");
//								if(parentids.startsWith(",")){
//									parentids=parentids.substring(1);
//									String[] split = parentids.split(",");
//									map.put("level", "登"+split.length);
//								}
//							}
//						}
//					}
					List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,f.treatedbettingmoney,f.bettingscore,f.bettingwin,g.bettingtimecommission from bet_member a " +
							"left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 " +
							"left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 " +
//							"left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 " +
//							"left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on e.memberid2=a.id2 " +
							"left join (select memberid2,sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 group by memberid2)f on f.memberid2=a.id2 " +
							"left join (select a.memberid2,sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) group by a.memberid2)g on g.memberid2=a.id2 "+
							" where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
					returnObject.setQueryBean(betReportform);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("agentaccount", betaaa.getAccount());
					model.addAttribute("agentnickname", betaaa.getNickname());
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", requestagentid);
					return "/lottery/betreportform/betreportformagmemberreportsec";
				}
		
		}else if("7".equals(request.getParameter("k"))){
			//未结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid  and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList5sec";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList5sec";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					
					bjdc(datas);
					//篮球处理
					basketballAll(datas);
					
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList5sec";
				}
			}
		}else if("8".equals(request.getParameter("k"))){
			//投注额
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList6sec";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) and a.situation!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList6sec";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList6sec";
				}
			}
		}else if("9".equals(request.getParameter("k"))){
			//已结算
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList7sec";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList7sec";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					
					bjdc(datas);
					//篮球处理
					basketballAll(datas);
					
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList7sec";
				}
			}
		}else if("12".equals(request.getParameter("k"))){
			//投注退佣
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				return "/errorpage/error";
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/betbettingList10sec";
				}else if("1".equals(type)){
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
//						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (c.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid ) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid", agentid);
					return "/lottery/betmember/soccerbettingList10sec";
				}else{
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type) and a.agentid=:agentid ").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
						model.addAttribute("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					bjdc(datas);
					basketballAll(datas);
					
					returnObject1.setData(datas);
					returnObject1.setPage(page);
					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					model.addAttribute("type", type);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("agentid",agentid);
					return "/lottery/betmember/allsoccerbettingList10sec";
				}
			}
		}else if("13".equals(request.getParameter("k"))){
			//已结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=1 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList555sec";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=1 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList555sec";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney, sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.state=1 and a.bettingtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting555sec";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
				return "errorpage/error";
			}
		}else if("14".equals(request.getParameter("k"))){
			//会员投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.settlementtime>=:starttime and a.settlementtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and d.bettingtime>=:starttime and d.bettingtime<:endtime and d.situation=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						  
						soccer(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList666sec";
					}else{
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a left join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and e.bettingtime>=:starttime and e.bettingtime<:endtime and e.state=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
						returnObject.setData(datas);
						if(!"0000-00-00".equals(starttime)){
							model.addAttribute("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
							model.addAttribute("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList666sec";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,sum(a.commission) as commission,sum(b.bettingmoney) as totallybettingmoney,sum(b.bettingscore-b.bettingmoney) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and b.bettingtime>=:starttime and b.bettingtime<:endtime and b.state=1 group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
						model.addAttribute("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
					}
					model.addAttribute("memberid2", memberid2);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbetting666sec";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
				return "errorpage/error";
			}
		}else if("15".equals(request.getParameter("k"))){
			//转账
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			// ==构造分页请求
			Page page = newPage(request,"time","desc");
			// ==执行分页查询
			String starttime = request.getParameter("startTime");
			String endtime = request.getParameter("endTime");
			Date date1 =DateUtils.convertString2Date(endtime);
			Calendar calendar = new GregorianCalendar();
			if(date1!=null){
				calendar.setTime(date1); 
				calendar.add(Calendar.DATE,1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
			}
			if(StringUtils.isBlank(starttime)){
				starttime="0000-00-00";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="9999-00-00";
			}
			if("1".equals(request.getParameter("todayflag"))){
				Date dateeee=new Date();
				 starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				 endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date2 =DateUtils.convertString2Date(endtime);
				Calendar calendar1 = new GregorianCalendar();
				if(date2!=null){
					calendar1.setTime(date2); 
					calendar1.add(Calendar.DATE,1);
					Date date3=calendar1.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
			}
			List<BetTransferAccounts> datas = new ArrayList<>();
			
			if("1".equals(request.getParameter("directlyunder"))){
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid), BetTransferAccounts.class, page);
				model.addAttribute("directlyunder", 1);
			}else{
				datas = betTransferAccountsService.queryForList(new Finder("select * from bet_transfer_accounts where (agentid=:agentid or agentparentids like :aid ) and time>=:starttime and time<:endtime ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid).setParam("aid", "%,"+requestagentid+",%"), BetTransferAccounts.class, page);
			}
			
			returnObject.setQueryBean(new BetBetting());
			returnObject.setPage(page);
			returnObject.setData(datas);
			if(!"0000-00-00".equals(starttime)){
				model.addAttribute("startTime", starttime);
			}
			if(!"9999-00-00".equals(endtime)){
				Date date2 =DateUtils.convertString2Date(endtime);
				calendar.setTime(date2); 
				calendar.add(Calendar.DATE,-1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
				model.addAttribute("endTime", endtime);
			}
			
			model.addAttribute("agentid", requestagentid);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformbetTransferAccountsList2sec";
		}else{
			//今日
			model.addAttribute("todayflag", 1);
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
//				Calendar cal = Calendar.getInstance();
//				int d = 0;
//				if(cal.get(Calendar.DAY_OF_WEEK)==1){
//					d = -6;
//				}else{
//					d = 2-cal.get(Calendar.DAY_OF_WEEK);
//				}
//				cal.add(Calendar.DAY_OF_WEEK, d);
				//所在周开始日期
				Date dateeee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
//				cal.add(Calendar.DAY_OF_WEEK, 6);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", agentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid),page);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betagentt.getAccount());	
				model.addAttribute("agentnickname", betagentt.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				return "/lottery/betreportform/betreportformagreportsec";
		
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						return "/errorpage/error";
					}
				}else{
					return "/errorpage/error";
				}
				
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
//				Calendar cal = Calendar.getInstance();
//				int d = 0;
//				if(cal.get(Calendar.DAY_OF_WEEK)==1){
//					d = -6;
//				}else{
//					d = 2-cal.get(Calendar.DAY_OF_WEEK);
//				}
//				cal.add(Calendar.DAY_OF_WEEK, d);
				//所在周开始日期
				Date dateee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateee);
//				cal.add(Calendar.DAY_OF_WEEK, 6);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) and active=1 ").setParam("id", requestagentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,ggg.bettingtimecommission1,kkk.transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(commission) as bettingtimecommission from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) fff,"+
									"(select sum(commission) as bettingtimecommission1 from bet_commission  where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,aaa.bettingmoney,bbb.untreatedbettingmoney,eee.treatedbettingmoney,eee.bettingscore,eee.bettingwin,fff.bettingtimecommission,kkk.transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				
				
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
				model.addAttribute("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
//				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
				model.addAttribute("agentaccount", betaaa.getAccount());
				model.addAttribute("agentnickname", betaaa.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
					model.addAttribute("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
					model.addAttribute("endTime", endtime);
				}
				model.addAttribute("agentid", requestagentid);
				return "/lottery/betreportform/betreportformagreportsec";
			}
		}
	}
	

	
	
	
	
	
	
	
	
	
	
	
/*
 * 代理报表手机接口	
 */
	@RequestMapping("/agreport/json")
	@ResponseBody
	public ReturnDatas agreportjson(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		if("wns".equals(request.getParameter("plat"))){//针对威尼斯手机代理
			//今日
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String mem = request.getParameter("mem");
			//登录的代理
			BetAgent agent = betAgentService.queryForObject(new Finder("select * from bet_agent where agentid=:agentid and active=1").setParam("agentid", agentid),BetAgent.class);
			//代理等级
			int level = AgentUtils.getSubCompanyLevel(agent.getParentids());
			BetAgent company = null;
			if (level == 1) {
				company = agent;
			} else if (level > 1) {
				String subCompanyId = AgentUtils.getSubCompanyId(agent.getParentids());
				company = betAgentService.queryForObject(new Finder("select * from bet_agent where agentid=:agentid and active=1").setParam("agentid", subCompanyId),BetAgent.class);
			} else {
				returnObject.setMessage(ReturnDatas.ERROR);
				return returnObject;
			}
			
			// ==构造分页请求
			Page page = newPage(request,"bettingmoney","desc");
			// ==执行分页查询

			//起止时间
			String starttime =null;
			String endtime = null;

			if(!"1".equals(request.getParameter("k"))){//今日
				model.addAttribute("todayflag", 1);
				Date dateeee=new Date();
				starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
			}else{
				starttime = request.getParameter("starttime");
				endtime = request.getParameter("endtime");
			}

			Date date1 =DateUtils.convertString2Date(endtime);
			Calendar calendar = new GregorianCalendar();
			if(date1!=null){
				calendar.setTime(date1);
				calendar.add(Calendar.DATE,1);
				Date date3=calendar.getTime();
				endtime = DateUtils.convertDate2String(date3);
			}
			if(StringUtils.isBlank(starttime)){
				starttime="0000-00-00";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="9999-00-00";
			}
			if("mem".equals(mem)){//查看会员统计
				String detail = request.getParameter("detail");
				Map<String,Object> map = new HashMap<String,Object>();
				if("detail".equals(detail)){
					String memberid = request.getParameter("memberid");
					if(StringUtils.isNotEmpty(memberid)){
						BetMember member = betMemberService.queryForObject(new Finder("select id2,account,nickname,realname,score from bet_member where agentid=:agentid or agentparentids like :agentpids").setParam("agentid", agentid).setParam("agentpids", "%,"+agentid+",%"),BetMember.class);
						if(member == null){
							returnObject.setStatus(ReturnDatas.ERROR);
							returnObject.setMessage("无效用户");
						}
						map.put("id2", member.getId2());
						map.put("account", member.getAccount());
						map.put("nickname", member.getNickname());
						map.put("realname", member.getRealname());
					}else{
//						Page page1 = newPage(request,"b.bettingmoney","desc");
						List<BetMember> number = betMemberService.queryForList(new Finder("select id2,account,nickname,realname from bet_member where agentid=:agentid or agentparentids like :agentpids").setParam("agentid", agentid).setParam("agentpids", "%,"+agentid+",%"),BetMember.class);
//						List<SoccerAllbetting> allbetting = betMemberService.queryForList(new Finder("select memberid2 as memberid2,sum(bettingmoney) as bettingmoney,sum(IF(state=1,bettingscore-bettingmoney,0)) as bettingscore from soccer_allbetting where state=1 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:agentid or agentparentids like :agentpids) group by memberid2")
//							.setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid).setParam("agentpids", "%,"+agentid+",%"),SoccerAllbetting.class,page);
						List<SoccerAllbetting> allbetting = betMemberService.queryForList(new Finder(
								"select a.nickname as membernickname,a.id2 as memberid2,IFNULL(b.bettingmoney,0) as bettingmoney,IFNULL(b.bettingscore,0) as bettingscore from " +
								"(select memberid2 as memberid2,sum(bettingmoney) as bettingmoney,sum(IF(state=1,bettingscore-bettingmoney,0)) as bettingscore from soccer_allbetting where state=1 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:agentid or agentparentids like :agentpids) group by memberid2)b " +
								"right join bet_member a on a.id2=b.memberid2 where (a.agentid=:agentid or a.agentparentids like :agentpids)")
							.setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid).setParam("agentpids", "%,"+agentid+",%"),SoccerAllbetting.class,page);
//						List<Map<String,Object>> dto = new ArrayList<Map<String,Object>>();
//						Map<Integer,SoccerAllbetting> dto1 = new HashMap<Integer, SoccerAllbetting>();
//						for (SoccerAllbetting soccerAllbetting : allbetting) {
////							dto1.put(soccerAllbetting.getMemberid2(), soccerAllbetting);
//							
//						}
//						for (BetMember member : number) {
//							if(!dto1.isEmpty()){
//								SoccerAllbetting allbet = dto1.get(member.getId());
//								Map<String,Object> dto2 = new HashMap<String, Object>();
//								dto2.put("nickname", member.getNickname());
//								dto2.put("memberid2", member.getId2());
//								if(allbet == null){
//									dto2.put("bettingmoney", 0);
//									dto2.put("bettingscore", 0);
//								}else{
//									dto2.put("bettingmoney", allbet.getBettingmoney() == null ? 0 : allbet.getBettingmoney());
//									dto2.put("bettingscore", allbet.getBettingscore() == null ? 0 : allbet.getBettingscore());
//								}
//								dto.add(dto2);
//							}
//						}
						map.put("betdata", allbetting);
						returnObject.setPage(page);
					}
				}else{
					Integer number = betMemberService.queryForObject(new Finder("select count(id2) from bet_member where agentid=:agentid or agentparentids like :agentpids").setParam("agentid", agentid).setParam("agentpids", "%,"+agentid+",%"),Integer.class);
					//有效，包括未结算
					SoccerAllbetting allbetting = betMemberService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(bettingscore-bettingmoney) as bettingscore from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:agentid or agentparentids like :agentpids)")
						.setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid).setParam("agentpids", "%,"+agentid+",%"),SoccerAllbetting.class);
					//结算状态下
					SoccerAllbetting bettingwin = betMemberService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(bettingscore-bettingmoney) as bettingscore from soccer_allbetting where state=1 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:agentid or agentparentids like :agentpids)")
						.setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid).setParam("agentpids", "%,"+agentid+",%"),SoccerAllbetting.class);
					map.put("number", number == null ? 0 : number);
					map.put("bettingmoney", allbetting.getBettingmoney() == null ? 0 : allbetting.getBettingmoney());
					map.put("bettingwin", bettingwin.getBettingscore() == null ? 0 : bettingwin.getBettingscore());
				}
				returnObject.setData(map);
				return returnObject;
			}else{
				List<Map<String,Object>> agentdatas = new ArrayList<Map<String,Object>>();
				Map<String,Object> map = new HashMap<String,Object>();
				Map<String, Object> ddd=betAgentService.queryForObject(
						new Finder(
								"select IFNULL(aaa.bettingmoney,0) as bettingmoney,IFNULL(bbb.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(eee.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(eee.bettingscore,0) as bettingscore,IFNULL(eee.bettingwin,0) as bettingwin,IFNULL(fff.bettingtimecommission,0) as bettingtimecommission,IFNULL(ggg.bettingtimecommission1,0) as bettingtimecommission1,IFNULL(kkk.transferaccountsscore,0) as transferaccountsscore,IFNULL(lll.receivescore,0) as receivescore,IFNULL(mmm.memberty,0) as memberty,IFNULL(nnn.income,0) as income from " +
								"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
								"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
								"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
								"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_agent hh on a.agentid=hh.agentid where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.parentids like :aid)) fff,"+
								"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg,"+
								"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk,"+
								"(select sum(receivescore) as receivescore from bet_redenvelope_record where receivetime>=:starttime and receivetime<:endtime and (agentid=:id or agentparentids like :aid)) lll,"+
								"(select sum(memberty) as memberty from bet_betting where bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) mmm,"+
								"(select sum(income) as income from bet_subordinaterebate_detail where subtime>=:starttime and subtime<:endtime and (agentid=:id or agentparentids like :aid)) nnn"
								).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid).setParam("aid", "%,"+agentid+",%"));
				if(ddd!=null){
					Double bettingmoney=0.;
					Double untreatedbettingmoney=0.;
//					Double gamewin=0.;
//					Double commission=0.;
					Double treatedbettingmoney=0.;
					Double bettingscore=0.;
					Double bettingwin=0.;
					Double bettingtimecommission=0.;
					Double bettingtimecommission1=0.;
					Double transferaccountsscore=0.;
					Double receivescore=0.;
					Double memberty=0.;
					Double income=0.;
					Double agentbenefit=0.;
					Double companybenefit=0.;
					Object object = ddd.get("bettingmoney");
					Object object2 = ddd.get("untreatedbettingmoney");
//					Object object3 = ddd.get("gamewin");
//					Object object4 = ddd.get("commission");
					Object object5 = ddd.get("treatedbettingmoney");
					Object object6 = ddd.get("bettingscore");
					Object object7 = ddd.get("bettingwin");
					Object object8 = ddd.get("bettingtimecommission");
					Object object9 = ddd.get("bettingtimecommission1");
					Object object10 = ddd.get("transferaccountsscore");
					Object object11 = ddd.get("receivescore");
					Object object12 = ddd.get("memberty");
					Object object13 = ddd.get("income");
					if(object!=null){
						bettingmoney=((BigDecimal)object).doubleValue();
					}
					if(object2!=null){
						untreatedbettingmoney=((BigDecimal)object2).doubleValue();
					}
//					if(object3!=null){
//						gamewin=((BigDecimal)object3).doubleValue();
//					}
//					if(object4!=null){
//						commission=((BigDecimal)object4).doubleValue();
//					}
					if(object5!=null){
						treatedbettingmoney=((BigDecimal)object5).doubleValue();
					}
					if(object6!=null){
						bettingscore=((BigDecimal)object6).doubleValue();
					}
					if(object7!=null){
						bettingwin=((BigDecimal)object7).doubleValue();
					}
					if(object8!=null){
						bettingtimecommission=((BigDecimal)object8).doubleValue();
					}
					if(object9!=null){
						bettingtimecommission1=((BigDecimal)object9).doubleValue();
					}
					if(object10!=null){
						transferaccountsscore=((BigDecimal)object10).doubleValue();
					}
					if(object11!=null){
						receivescore=((BigDecimal)object11).doubleValue();
					}
					if(object12!=null){
						memberty=((BigDecimal)object12).doubleValue();
					}
					if(object13!=null){
						income=((BigDecimal)object13).doubleValue();
					}
					map.put("bettingmoney", bettingmoney);
					map.put("untreatedbettingmoney", untreatedbettingmoney);
//					map.put("gamewin", gamewin);
//					map.put("commission", commission);
					map.put("treatedbettingmoney", treatedbettingmoney);
					map.put("bettingscore", bettingscore);
					map.put("bettingwin", bettingwin);
					map.put("bettingtimecommission", bettingtimecommission);
					map.put("bettingtimecommission1", bettingtimecommission1);
					map.put("transferaccountsscore", transferaccountsscore);
					map.put("receivescore", receivescore);
					map.put("memberty", memberty);
					map.put("income", income);
					map.put("agentbenefit", agentbenefit);
					map.put("companybenefit", companybenefit);
				}
				agentdatas.add(map);
				Map<String,Object> mpppp=new HashMap<String,Object>();
//				model.addAttribute("agentdatas", agentdatas);
				mpppp.put("agentdatas", agentdatas);
				mpppp.put("agentaccount", agent.getAccount());
				mpppp.put("agentnickname", agent.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
//					model.addAttribute("startTime", starttime);
					mpppp.put("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
//					model.addAttribute("endTime", endtime);
					mpppp.put("endTime", endtime);
				}
//				return "/lottery/betreportform/betreportformagreport";
				returnObject.setData(mpppp);
				return returnObject;
		
			}
		}
		if("1".equals(request.getParameter("k"))){
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) and active=1 ").setParam("id", agentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							
							Map<String, Object> ddd = betAgentreportformJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							/*
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select IFNULL(aaa.bettingmoney,0) as bettingmoney,IFNULL(bbb.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(eee.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(eee.bettingscore,0) as bettingscore,IFNULL(eee.bettingwin,0) as bettingwin,IFNULL(fff.bettingtimecommission,0) as bettingtimecommission,IFNULL(ggg.bettingtimecommission1,0) as bettingtimecommission1,0,IFNULL(kkk.transferaccountsscore,0) as transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_agent hh on a.agentid=hh.agentid where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.parentids like :aid)) fff,"+
									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
									*/
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid));
				/*
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,IFNULL(aaa.bettingmoney,0) as bettingmoney,IFNULL(bbb.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(eee.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(eee.bettingscore,0) as bettingscore,IFNULL(eee.bettingwin,0) as bettingwin,IFNULL(fff.bettingtimecommission,0) as bettingtimecommission,IFNULL(kkk.transferaccountsscore,0) as transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				*/
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
//				model.addAttribute("agentdatas", agentdatas);
				Map mpppp=new HashMap<String, Object>();
				mpppp.put("agentdatas", agentdatas);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", agentid), BetAgent.class);
//				model.addAttribute("agentaccount", betagentt.getAccount());
//				model.addAttribute("agentnickname", betagentt.getNickname());
				mpppp.put("agentaccount", betagentt.getAccount());
				mpppp.put("agentnickname", betagentt.getNickname());
//				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				
				if(!"0000-00-00".equals(starttime)){
//					model.addAttribute("startTime", starttime);
					mpppp.put("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
//					model.addAttribute("endTime", endtime);
					mpppp.put("endTime", endtime);
				}
				returnObject.setData(mpppp);
				return returnObject;
//				return "/lottery/betreportform/betreportformagreport";
			}else{
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
//						return "/errorpage/error";
						returnObject.setMessage(ReturnDatas.ERROR);
						returnObject.setMessage("不能查看上级代理报表");
						return returnObject;
					}
				}else{
//					return "/errorpage/error";
					returnObject.setMessage(ReturnDatas.ERROR);
					returnObject.setMessage("无此代理");
					return returnObject;
				}

				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) and active=1 ").setParam("id", requestagentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							
							Map<String, Object> ddd = betAgentreportformJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							/*
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select IFNULL(aaa.bettingmoney,0) as bettingmoney,IFNULL(bbb.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(eee.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(eee.bettingscore,0) as bettingscore,IFNULL(eee.bettingwin,0) as bettingwin,IFNULL(fff.bettingtimecommission,0) as bettingtimecommission,IFNULL(ggg.bettingtimecommission1,0) as bettingtimecommission1,IFNULL(kkk.transferaccountsscore,0) as transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting  where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_agent hh on a.agentid=hh.agentid where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.parentids like :aid)) fff,"+
									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
									*/
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid));
				/*
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,IFNULL(aaa.bettingmoney,0) as bettingmoney,IFNULL(bbb.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(eee.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(eee.bettingscore,0) as bettingscore,IFNULL(eee.bettingwin,0) as bettingwin,IFNULL(fff.bettingtimecommission,0) as bettingtimecommission,IFNULL(kkk.transferaccountsscore,0) as transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
						*/
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
//				model.addAttribute("agentdatas", agentdatas);
//				model.addAttribute("agentaccount", betaaa.getAccount());
//				model.addAttribute("agentnickname", betaaa.getNickname());
				Map mpppp=new HashMap<String,Object>();
				mpppp.put("agentdatas", agentdatas);
				mpppp.put("agentaccount", betaaa.getAccount());
				mpppp.put("agentnickname", betaaa.getNickname());
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
//					model.addAttribute("startTime", starttime);
					mpppp.put("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
//					model.addAttribute("endTime", endtime);
					mpppp.put("endTime", endtime);
				}
//				model.addAttribute("agentid", requestagentid);
				mpppp.put("agentid", requestagentid);
//				return "/lottery/betreportform/betreportformagreport";
				returnObject.setData(mpppp);
				return returnObject;
			}
		}else if("2".equals(request.getParameter("k"))){
			//会员投注额
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						
						
						Map<String,Object> mpppp=new HashMap<>();
						if(!"0000-00-00".equals(starttime)){
//							model.addAttribute("startTime", starttime);
							mpppp.put("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
//							model.addAttribute("endTime", endtime);
							mpppp.put("endTime", endtime);
						}
//						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
						
//						returnObject.setData(datas);
//						model.addAttribute("bettingtime", date);
//						model.addAttribute("gcname", gcname);
						mpppp.put("datas", datas);
						mpppp.put("gcname", gcname);
						mpppp.put("memberid2", memberid2);
						returnObject.setData(mpppp);
						return returnObject;
//						model.addAttribute("memberid2", memberid2);
//						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
//						return "/lottery/betreportform/betreportformsoccerbettingList111";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.gcname=:gcname and b.id2=:memberid2 and a.state!=2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						Map<String,Object> mpppp = new HashMap<>();
//						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
//						returnObject.setData(datas);
						mpppp.put("datas", datas);
						
						if(!"0000-00-00".equals(starttime)){
//							model.addAttribute("startTime", starttime);
							mpppp.put("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
//							model.addAttribute("endTime", endtime);
							mpppp.put("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
//						model.addAttribute("gcname", gcname);
//						model.addAttribute("memberid2", memberid2);
//						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList111";
						
						mpppp.put("gcname", gcname);
						mpppp.put("memberid2", memberid2);
						returnObject.setData(mpppp);
						return returnObject;
						
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state!=2 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					Map<String,Object> mpppp = new HashMap<>();
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					mpppp.put("datas", datas);
					
					
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("memberid2", memberid2);
					mpppp.put("memberid2", memberid2);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					returnObject.setData(mpppp);
					return returnObject;
					
//					return "/lottery/betreportform/betreportformgameclassbetting111";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
//				return "errorpage/error";
				returnObject.setStatus(ReturnDatas.ERROR);
				returnObject.setMessage("用户ID不能为空");
				return returnObject;
			}
		}else if("3".equals(request.getParameter("k"))){
			//会员游戏输赢（按结算时间统计）
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			return returnObject;
		}else if("4".equals(request.getParameter("k"))){
			//会员未结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=0 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						Map<String,Object> mpppp=new HashMap<>();
						if(!"0000-00-00".equals(starttime)){
//							model.addAttribute("startTime", starttime);
							mpppp.put("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
//							model.addAttribute("endTime", endtime);
							mpppp.put("endTime", endtime);
						}
//						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
//						returnObject.setData(datas);
						mpppp.put("datas", datas);
//						model.addAttribute("bettingtime", date);
//						model.addAttribute("gcname", gcname);
//						model.addAttribute("memberid2", memberid2);
						mpppp.put("gcname", gcname);
						mpppp.put("memberid2", memberid2);
						returnObject.setData(mpppp);
						return returnObject;
//						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
//						return "/lottery/betreportform/betreportformsoccerbettingList333";
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
//						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
//						returnObject.setData(datas);
						Map<String,Object> mpppp=new HashMap<>();
						mpppp.put("datas", datas);
						if(!"0000-00-00".equals(starttime)){
//							model.addAttribute("startTime", starttime);
							mpppp.put("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
//							model.addAttribute("endTime", endtime);
							mpppp.put("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
//						model.addAttribute("gcname", gcname);
//						model.addAttribute("memberid2", memberid2);
						mpppp.put("gcname", gcname);
						mpppp.put("memberid2", memberid2);
//						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						returnObject.setData(mpppp);
						return returnObject;
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList333";
					}
				
				}else{
					
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
//					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					Map<String,Object> mpppp=new HashMap<>();
					mpppp.put("data",datas);
//					returnObject.setData(datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("memberid2", memberid2);
					mpppp.put("memberid2", memberid2);
					returnObject.setData(mpppp);
					return returnObject;
//					model.addAttribute(GlobalStatic.returnDatas, returnObject);
//					return "/lottery/betreportform/betreportformgameclassbetting333";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
				
				
				
				
				
			}else{
//				return "errorpage/error";
				returnObject.setStatus(ReturnDatas.ERROR);
				returnObject.setMessage("无此会员");
				return returnObject;
			}
		}else if("5".equals(request.getParameter("k"))){
			//投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
//			
			return returnObject;
		
		}else if("6".equals(request.getParameter("k"))){
			//会员
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
//				return "/errorpage/error";
				returnObject.setStatus(ReturnDatas.ERROR);
				returnObject.setMessage("未传代理id");
				return  returnObject;
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						returnObject.setStatus(ReturnDatas.ERROR);
						returnObject.setMessage("不能查看上级代理会员");
						return  returnObject;
					}
				}else{
					returnObject.setStatus(ReturnDatas.ERROR);
					returnObject.setMessage("无此代理");
					return  returnObject;
				}

				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				//System.out.println("1-----------------starttime===="+starttime+" endTime====="+endtime+" requestagentid===="+requestagentid);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//					List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//					if(agentdatas!=null){
//						for (Map<String, Object> map : agentdatas) {
//							if(map.get("parentids")!=null){
//								String parentids = (String)map.get("parentids");
//								if(parentids.startsWith(",")){
//									parentids=parentids.substring(1);
//									String[] split = parentids.split(",");
//									map.put("level", "登"+split.length);
//								}
//							}
//						}
//					}
				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,IFNULL(b.bettingmoney,0) as bettingmoney,IFNULL(c.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(d.gamewin,0) as gamewin,IFNULL(e.commission,0) as commission,IFNULL(f.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(f.bettingscore,0) as bettingscore,IFNULL(f.bettingwin,0) as bettingwin,IFNULL(g.bettingtimecommission,0) as bettingtimecommission from bet_member a " +
						"left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 " +
						"left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 " +
						"left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 " +
						"left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on e.memberid2=a.id2 " +
						"left join (select memberid2,sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 group by memberid2)f on f.memberid2=a.id2 " +
						"left join (select a.memberid2,sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) group by a.memberid2)g on g.memberid2=a.id2 "+
						" where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
//					returnObject.setQueryBean(betReportform);
				returnObject.setPage(page);
//					returnObject.setData(datas);
				Map<String,Object> mpppp=new HashMap<>();
				mpppp.put("datas", datas);
//					BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
//					model.addAttribute("agentaccount", betaaa.getAccount());
//					model.addAttribute("agentnickname", betaaa.getNickname());
//					model.addAttribute(GlobalStatic.returnDatas, returnObject);
				mpppp.put("agentaccount", betaaa.getAccount());
				mpppp.put("agentnickname", betaaa.getNickname());
				if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
					mpppp.put("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
					mpppp.put("endTime", endtime);
				}
//					model.addAttribute("agentid", requestagentid);
				mpppp.put("agentid", requestagentid);
				returnObject.setData(mpppp);
				//System.out.println("2-----------------starttime===="+starttime+" endTime====="+endtime+" requestagentid===="+requestagentid);
				//System.out.println("mpppp===="+mpppp);
				return returnObject;
//					return "/lottery/betreportform/betreportformagmemberreport";
			}
		
		}else if("7".equals(request.getParameter("k"))){
			//代理未结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
//				return "/errorpage/error";
				returnObject.setStatus(ReturnDatas.ERROR);
				returnObject.setMessage("未传代理id");
				return  returnObject;
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						returnObject.setStatus(ReturnDatas.ERROR);
						returnObject.setMessage("不可查看上级代理信息");
						return  returnObject;
					}
				}else{
					returnObject.setStatus(ReturnDatas.ERROR);
					returnObject.setMessage("无此代理");
					return  returnObject;
				}
				
				agentid = requestagentid;
				ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					List<BetBetting> betbettinglist=null;
					Map<String,Object> mpppp=new HashMap<>();
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					mpppp.put("datas", betbettinglist);
//					returnObject1.setData(betbettinglist);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid", agentid);
					mpppp.put("agentid", agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/betbettingList5";
				}else if("1".equals(type)){
					Map<String,Object> mpppp=new HashMap<>();
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					
					
//					returnObject1.setData(datas);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
					mpppp.put("datas", datas);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid", agentid);
					mpppp.put("agentid", agentid);
//					retun "/lottery/betmember/soccerbettingList5";
					returnObject1.setData(mpppp);
					return returnObject1;
				}else{
					Map<String,Object> mpppp=new HashMap<>();
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=0 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					
					bjdc(datas);
					//篮球处理
					basketballAll(datas);
					
					
//					returnObject1.setData(datas);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					mpppp.put("datas", datas);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid",agentid);
					mpppp.put("agentid",agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/allsoccerbettingList5";
				}
			}
		}else if("8".equals(request.getParameter("k"))){
			//代理投注额
			ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				returnObject1.setStatus(ReturnDatas.ERROR);
				returnObject1.setMessage("未传代理ID");
				return  returnObject1;
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						returnObject1.setStatus(ReturnDatas.ERROR);
						returnObject1.setMessage("无法查看上级代理信息");
						return  returnObject1;
					}
				}else{
					returnObject1.setStatus(ReturnDatas.ERROR);
					returnObject1.setMessage("无此代理");
					return  returnObject1;
				}
				
				agentid = requestagentid;
				
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					Map<String,Object> mpppp=new HashMap<>();
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
//					returnObject1.setData(betbettinglist);
					mpppp.put("datas", betbettinglist);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid", agentid);
					mpppp.put("agentid", agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/betbettingList6";
				}else if("1".equals(type)){
					Map<String,Object> mpppp=new HashMap<>();
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) and a.situation!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.situation!=2 ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
//					returnObject1.setData(datas);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					mpppp.put("datas", datas);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid", agentid);
					mpppp.put("agentid", agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/soccerbettingList6";
				}else{
					Map<String,Object> mpppp=new HashMap<>();
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
//					returnObject1.setData(datas);
					mpppp.put("datas", datas);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid",agentid);
					mpppp.put("agentid",agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/allsoccerbettingList6";
				}
			}
		}else if("9".equals(request.getParameter("k"))){
			//代理已结算
			ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				returnObject1.setStatus(ReturnDatas.ERROR);
				returnObject1.setMessage("未传代理id");
				return  returnObject1;
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid  and active=1").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						returnObject1.setStatus(ReturnDatas.ERROR);
						returnObject1.setMessage("无法查看上级代理信息");
						return  returnObject1;
					}
				}else{
					returnObject1.setStatus(ReturnDatas.ERROR);
					returnObject1.setMessage("无此代理");
					return  returnObject1;
				}
				
				agentid = requestagentid;
				
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					Map<String,Object> mpppp=new HashMap<>();
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
//					returnObject1.setData(betbettinglist);
					mpppp.put("datas", betbettinglist);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid", agentid);
					mpppp.put("agentid", agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/betbettingList7";
				}else if("1".equals(type)){
					Map<String,Object> mpppp=new HashMap<>();
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
//					returnObject1.setData(datas);
					mpppp.put("datas", datas);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid", agentid);
					mpppp.put("agentid", agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/soccerbettingList7";
				}else{
					Map<String,Object> mpppp=new HashMap<>();
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("starttime",starttime ).setParam("type", type).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname  from soccer_allbetting a left join bet_member b on a.memberid2 = b.id2 where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
//					returnObject1.setData(datas);
					mpppp.put("datas", datas);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid",agentid);
					mpppp.put("agentid", agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/allsoccerbettingList7";
				}
			}
		}else if("10".equals(request.getParameter("k"))){
			//代理投注退佣（按结算时间统计）
			ReturnDatas returnobject=ReturnDatas.getSuccessReturnDatas();
			return returnobject;
		}else if("11".equals(request.getParameter("k"))){
			//游戏输赢(按结算时间统计)
			ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
			return returnObject1;
		}else if("12".equals(request.getParameter("k"))){
			//投注退佣
			ReturnDatas returnObject1 = ReturnDatas.getSuccessReturnDatas();
			String directlyunder = request.getParameter("directlyunder");
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
//				return "/errorpage/error";
				returnObject1.setStatus(ReturnDatas.ERROR);
				returnObject1.setMessage("未传代理id");
				return returnObject1;
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
						returnObject1.setStatus(ReturnDatas.ERROR);
						returnObject1.setMessage("不可查看上级代理信息");
						return returnObject1;
					}
				}else{
					returnObject1.setStatus(ReturnDatas.ERROR);
					returnObject1.setMessage("无此代理");
					return returnObject1;
				}
				
				agentid = requestagentid;
				
				Page page = newPage(request);
				page.setOrder("bettingtime");
				page.setSort("desc");
				String type = request.getParameter("type");
				String starttime = request.getParameter("startTime");
				String endtime = request.getParameter("endTime");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				
				
				if(type==null){
					type = "100";
				}
				if("0".equals(type)){
					Map<String,Object> mpppp=new HashMap<>();
					List<BetBetting> betbettinglist=null;
					if("1".equals(directlyunder)){
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),BetBetting.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
//						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2 from bet_betting a left join bet_gameplay b on a.gameplayid=b.id where a.state=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
						betbettinglist = betBettingService.queryForList(new Finder("select a.*,b.name2,bet_commission.commission from bet_commission left join bet_betting a on bet_commission.orderid=a.id left join bet_gameplay b on a.gameplayid=b.id where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),BetBetting.class,page);
					}
					
//					returnObject1.setData(betbettinglist);
					mpppp.put("datas",betbettinglist );
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid", agentid);
					mpppp.put("agentid", agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/betbettingList10";
				}else if("1".equals(type)){
					Map<String,Object> mpppp=new HashMap<>();
					List<SoccerScheme> datas=null;
					if("1".equals(directlyunder)){
//						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.situation=1 and a.bettingtime>=:starttime and a.bettingtime<:endtime and (c.agentid=:agentid ) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid ) and a.agentid=:agentid ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerScheme.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_scheme a on a.schemeid=bet_commission.orderid LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerScheme.class,page);
					}
					
					soccer(datas);
					
					
//					returnObject1.setData(datas);
					mpppp.put("datas", datas);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid", agentid);
					mpppp.put("agentid", agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/soccerbettingList10";
				}else{
					Map<String,Object> mpppp=new HashMap<>();
					List<SoccerAllbetting> datas =null;
					if("1".equals(directlyunder)){
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type) and a.agentid=:agentid ").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid),SoccerAllbetting.class,page);
//						model.addAttribute("directlyunder", 1);
						mpppp.put("directlyunder", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select a.*,b.nickname as membernickname,bet_commission.commission from bet_commission left join soccer_allbetting a on a.id=bet_commission.orderid left join bet_member b on a.memberid2 = b.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and (bet_commission.agentid=:agentid) and (:type=100 or a.type=:type)").setParam("type", type).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("aid", "%"+agentid+"%").setParam("agentid", agentid),SoccerAllbetting.class,page);
					}
					 
					soccerAll(datas);
					
					bjdc(datas);
					//篮球处理
					basketballAll(datas);
					
//					returnObject1.setData(datas);
					mpppp.put("datas", datas);
					returnObject1.setPage(page);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//					model.addAttribute("type", type);
					mpppp.put("type", type);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("agentid",agentid);
					mpppp.put("agentid",agentid);
					returnObject1.setData(mpppp);
					return returnObject1;
//					return "/lottery/betmember/allsoccerbettingList10";
				}
			}
		}else if("13".equals(request.getParameter("k"))){
			//会员已结算
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
						Map<String,Object> mpppp=new HashMap<>();
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.bettingtime>=:starttime and a.bettingtime<:endtime and a.situation=1 and a.memberid2=:memberid2 and c.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						
						soccer(datas);
						
						
						if(!"0000-00-00".equals(starttime)){
//							model.addAttribute("startTime", starttime);
							mpppp.put("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
//							model.addAttribute("endTime", endtime);
							mpppp.put("endTime", endtime);
						}
//						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
//						returnObject.setData(datas);
						mpppp.put("datas", datas);
//						model.addAttribute("bettingtime", date);
//						model.addAttribute("gcname", gcname);
						mpppp.put("gcname", gcname);
//						model.addAttribute("memberid2", memberid2);
						mpppp.put("memberid2", memberid2);
//						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						returnObject.setData(mpppp);
						return returnObject;
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
//						return "/lottery/betreportform/betreportformsoccerbettingList555";
					}else{
						Map<String,Object> mpppp=new HashMap<>();
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=1 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
//						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
//						returnObject.setData(datas);
						mpppp.put("datas", datas);
						if(!"0000-00-00".equals(starttime)){
//							model.addAttribute("startTime", starttime);
							mpppp.put("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
//							model.addAttribute("endTime", endtime);
							mpppp.put("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
//						model.addAttribute("gcname", gcname);
						mpppp.put("gcname", gcname);
//						model.addAttribute("memberid2", memberid2);
						mpppp.put("memberid2", memberid2);
						returnObject.setData(mpppp);
						return returnObject;
//						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList555";
					}
				
				}else{
					Map<String,Object> mpppp=new HashMap<>();
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, IFNULL(sum(a.bettingmoney),0) as totallybettingmoney, IFNULL(sum(a.bettingscore-a.bettingmoney),0) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.bettingtime>=:starttime and a.state=1 and a.bettingtime<:endtime group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
//					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
//					returnObject.setData(datas);
					mpppp.put("datas", datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("memberid2", memberid2);
					mpppp.put("memberid2", memberid2);
					returnObject.setData(mpppp);
					return returnObject;
//					model.addAttribute(GlobalStatic.returnDatas, returnObject);
//					return "/lottery/betreportform/betreportformgameclassbetting555";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
			}else{
				returnObject.setStatus(ReturnDatas.ERROR);
				returnObject.setMessage("用户id不能为空");
				return returnObject;
			}
		}else if("14".equals(request.getParameter("k"))){
			//会员投注佣金
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page=newPage(request);
			String memberid2 = request.getParameter("id2");
			if(memberid2!=null&&StringUtils.isNoneBlank(memberid2)){
				String starttime = request.getParameter("starttime");
				String endtime = request.getParameter("endtime");
				String gcname = request.getParameter("gcname");
				agentid=betMemberService.queryForObject(new Finder("select agentid from bet_member where id2=:id2 and status=1 ").setParam("id2", memberid2), String.class);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");

					if("竞彩足球".equals(gcname)){
						Map<String,Object> mpppp=new HashMap<>();
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where a.settlementtime>=:starttime and a.settlementtime<:endtime and a.memberid2=:memberid2 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.commission,d.* from bet_commission a inner join (select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 ) d on a.orderid=d.schemeid where a.memberid2=:memberid2 and a.agentid=:agentid and d.bettingtime>=:starttime and d.bettingtime<:endtime and d.situation=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime),SoccerScheme.class,page);
						  
						soccer(datas);
						
						
						if(!"0000-00-00".equals(starttime)){
//							model.addAttribute("startTime", starttime);
							mpppp.put("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
//							model.addAttribute("endTime", endtime);
							mpppp.put("endTime", endtime);
						}
//						returnObject.setQueryBean(betReportform);
						returnObject.setPage(page);
//						returnObject.setData(datas);
						mpppp.put("datas", datas);
//						model.addAttribute("bettingtime", date);
//						model.addAttribute("gcname", gcname);
						mpppp.put("gcname", gcname);
//						model.addAttribute("memberid2", memberid2);
						mpppp.put("memberid2", memberid2);
//						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						returnObject.setData(mpppp);
						return returnObject;
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
//						return "/lottery/betreportform/betreportformsoccerbettingList666";
					}else{
						Map<String,Object> mpppp=new HashMap<>();
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 and a.gcname=:gcname and b.id2=:memberid2 ) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.memberid2,a.commission,e.* from bet_commission a left join (select c.*,d.name2 from (select * from bet_betting where gcname=:gcname ) c left join bet_gameplay d on c.gameplayid =d.id ) e on a.orderid=e.id where a.memberid2=:memberid2 and a.agentid=:agentid and e.bettingtime>=:starttime and e.bettingtime<:endtime and e.state=1 ").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("starttime",starttime ).setParam("endtime", endtime),page,BetBetting.class,new BetBetting());
						
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
//						returnObject.setQueryBean(new BetBetting());
						returnObject.setPage(page);
//						returnObject.setData(datas);
						mpppp.put("datas", datas);
						if(!"0000-00-00".equals(starttime)){
//							model.addAttribute("startTime", starttime);
							mpppp.put("startTime", starttime);
						}
						if(!"9999-00-00".equals(endtime)){
							Date date2 =DateUtils.convertString2Date(endtime);
							calendar.setTime(date2); 
							calendar.add(Calendar.DATE,-1);
							Date date3=calendar.getTime();
							endtime = DateUtils.convertDate2String(date3);
//							model.addAttribute("endTime", endtime);
							mpppp.put("endTime", endtime);
						}
//						model.addAttribute("bettingtime", date);
//						model.addAttribute("gcname", gcname);
//						model.addAttribute("memberid2", memberid2);
						mpppp.put("gcname", gcname);
						mpppp.put("memberid2", memberid2);
//						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						returnObject.setData(mpppp);
						return returnObject;
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList666";
					}
				
				}else{
					Map <String,Object> mpppp=new HashMap<>();
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.id2=:id2 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.bettingtime>=:starttime and a.bettingtime<:endtime and a.state=0 group by gcname ").setParam("aid", "%"+agentid+"%").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select b.gcname,IFNULL(sum(a.commission),0) as commission,IFNULL(sum(b.bettingmoney),0) as totallybettingmoney,IFNULL(sum(b.bettingscore-b.bettingmoney),0) as result from bet_commission a left join soccer_allbetting b on a.orderid=b.id where a.memberid2=:id2 and a.agentid=:agentid and b.bettingtime>=:starttime and b.bettingtime<:endtime and b.state=1 group by b.gcname   ").setParam("agentid", agentid).setParam("id2", memberid2).setParam("starttime",starttime ).setParam("endtime", endtime), page);
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
//					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
//					returnObject.setData(datas);
					mpppp.put("datas", datas);
//					model.addAttribute("bettingtime", date);
					if(!"0000-00-00".equals(starttime)){
//						model.addAttribute("startTime", starttime);
						mpppp.put("startTime", starttime);
					}
					if(!"9999-00-00".equals(endtime)){
						Date date2 =DateUtils.convertString2Date(endtime);
						calendar.setTime(date2); 
						calendar.add(Calendar.DATE,-1);
						Date date3=calendar.getTime();
						endtime = DateUtils.convertDate2String(date3);
//						model.addAttribute("endTime", endtime);
						mpppp.put("endTime", endtime);
					}
//					model.addAttribute("memberid2", memberid2);
					mpppp.put("memberid2", memberid2);
//					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					returnObject.setData(mpppp);
					return returnObject;
//					return "/lottery/betreportform/betreportformgameclassbetting666";
//					return "/lottery/betreportform/betreportformbettingList";
				
				}
			}else{
				returnObject.setStatus(ReturnDatas.ERROR);
				returnObject.setMessage("用户id不能为空");
				return returnObject;
			}
		
		}else if("15".equals(request.getParameter("k"))){
			//足球订单详情
			ReturnDatas returnObject1=ReturnDatas.getSuccessReturnDatas();
			Map<String,Object> mpppp=new HashMap<>();
			SoccerScheme datas=null;
			String schemeid23 = request.getParameter("schemeid");
			
			datas= soccerSchemeService.queryForObject(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2 = c.id2 where a.schemeid=:schemeid and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("schemeid", schemeid23).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid),SoccerScheme.class);
			
			
			if(datas!=null){
				String schemeids=datas.getSchemeid();
//				for (SoccerScheme soccerScheme2 : datas) {
//					String schemeid = soccerScheme2.getSchemeid();
//					if(schemeid!=null){
//						if("".equals(schemeids)){
//							schemeids += "'"+soccerScheme2.getSchemeid()+"'";
//						}else{
//							schemeids += ","+"'"+soccerScheme2.getSchemeid()+"'";
//						}
//					}
//				}
				List<SoccerSchemeMatch> matchDatas= soccerSchemeMatchService.queryForList(new Finder("select a.schemeid,a.id,a.mid,a.dan,b.matchname,b.leftteamname,b.rightteamname,b.starttime,b.endtime,b.num,c.halfscore,c.allscore from soccer_scheme_match a LEFT JOIN soccer_league_arrange b on a.mid = b.mid left join soccer_league_result c on a.mid = c.mid where a.schemeid=:schemeid  order by a.id").setParam("schemeid", schemeids), SoccerSchemeMatch.class);
				if(matchDatas!=null){
					List<Map<String, Object>> resultMap = soccerSchemeMatchService.queryForList(new Finder("select a.oddsname,a.mid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.playmethodid,c.schemeid from soccer_league_order_content a LEFT JOIN soccer_league_playmethod_oddsname b on a.oddsname=b.oddsname LEFT JOIN soccer_league_order c on a.orderid = c.orderid where c.schemeid=:schemeid group by c.schemeid, a.mid,a.oddsname").setParam("schemeid", schemeids));
					if(resultMap!=null){
						for (Map<String, Object> m : resultMap){
							String oddsname  = m.get("oddsname").toString();
							String oddsrealname = "";
							
							if("left_odds".equals(oddsname)){
						    	try{
						    		String cached2 = (String)cached.getCached(("2x1_"+m.get("mid").toString()).getBytes());
							    	if(cached2!=null){
							    		ObjectMapper mmmm=new ObjectMapper();
										SoccerLeague2choose1odds readValue = mmmm.readValue(cached2, SoccerLeague2choose1odds.class);
										oddsrealname =readValue.getLeft_name();
											m.put("oddsrealname", oddsrealname);
							    	}else{
							    		oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select left_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
								    	 m.put("oddsrealname", oddsrealname);
							    	}
						    	}catch (Exception e) {
									e.printStackTrace();
									oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select left_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
							    	 m.put("oddsrealname", oddsrealname);
								}
						    	
						    }else if("right_odds".equals(oddsname)){
						    	try{
						    		String cached2 = (String)cached.getCached(("2x1_"+m.get("mid").toString()).getBytes());
							    	if(cached2!=null){
							    		ObjectMapper mmmm=new ObjectMapper();
										SoccerLeague2choose1odds readValue = mmmm.readValue(cached2, SoccerLeague2choose1odds.class);
										oddsrealname =readValue.getRight_name();
											m.put("oddsrealname", oddsrealname);
							    	}else{
							    		oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select right_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
								    	 m.put("oddsrealname", oddsrealname);
							    	}
						    	}catch (Exception e) {
									e.printStackTrace();
									oddsrealname =soccerLeague2choose1oddsService.queryForObject(new Finder("select right_name from soccer_league_2choose1odds where mid=:mid").setParam("mid",m.get("mid").toString()),String.class);
							    	 m.put("oddsrealname", oddsrealname);
								}
						    }
						    if("rqwin".equals(oddsname)||"rqflat".equals(oddsname)||"rqlose".equals(oddsname)){
						    	try{
						    		String cached2 = (String)cached.getCached(("rqsfp_"+m.get("mid").toString()).getBytes());
							    	if(cached2!=null){
							    		ObjectMapper mmmm=new ObjectMapper();
							    		SoccerLeagueOdds readValue = mmmm.readValue(cached2, SoccerLeagueOdds.class);
							    		String letpoints = readValue.getLetpoints();
							    		String betname = m.get("betname").toString();
								    	m.put("betname",betname+"("+ letpoints+")");
							    	}else{
							    		String letpoints = soccerLeagueOddsService.queryForObject(new Finder("select letpoints from soccer_league_odds where mid = :mid and type = 1 ").setParam("mid", m.get("mid").toString()), String.class);
								    	String betname = m.get("betname").toString();
								    	m.put("betname",betname+"("+ letpoints+")");
							    	}
						    	}catch (Exception e) {
									e.printStackTrace();
									String letpoints = soccerLeagueOddsService.queryForObject(new Finder("select letpoints from soccer_league_odds where mid = :mid and type = 1 ").setParam("mid", m.get("mid").toString()), String.class);
							    	String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
								}
						    }
						}
					}
					for(SoccerSchemeMatch schemeMatch : matchDatas){
						String schemeid = schemeMatch.getSchemeid();
						String mid = schemeMatch.getMid();
						List<Map<String, Object>> mmm=new ArrayList<Map<String, Object>>();
						for (Map<String, Object> m : resultMap){
							Object object = m.get("schemeid");
							Object object2 = m.get("mid");
							if(schemeid.equals((String)m.get("schemeid"))&&mid.equals((String)m.get("mid"))){
								mmm.add(m);
							}
						}
						schemeMatch.setResultMap(mmm);
						schemeMatch.setNum(WeekOfDate.getWeekOfDate(schemeMatch.getEndtime())+schemeMatch.getNum());
					}
				}
				
//				for(SoccerScheme scheme : datas){
				List<SoccerSchemeMatch> sss=new ArrayList<SoccerSchemeMatch>();
				if(matchDatas!=null){
					for(SoccerSchemeMatch schemeMatch : matchDatas){
						String schemeid = schemeMatch.getSchemeid();
						if(schemeid.equals(datas.getSchemeid())){
							sss.add(schemeMatch);
						}
					}
				}
				datas.setSchemecontent(sss);
//				}
			}else{
				returnObject1.setStatus(ReturnDatas.ERROR);
				returnObject1.setMessage("无此方案");
				return returnObject1;
			}
//			returnObject1.setData(datas);
//			returnObject1.setPage(page);
//			model.addAttribute(GlobalStatic.returnDatas, returnObject1);
//			model.addAttribute("type", type);
//			mpppp.put("type", type);
			mpppp.put("datas", datas);
//			if(!"0000-00-00".equals(starttime)){
////				model.addAttribute("startTime", starttime);
//				mpppp.put("startTime", starttime);
//			}
//			if(!"9999-00-00".equals(endtime)){
//				Date date2 =DateUtils.convertString2Date(endtime);
//				calendar.setTime(date2); 
//				calendar.add(Calendar.DATE,-1);
//				Date date3=calendar.getTime();
//				endtime = DateUtils.convertDate2String(date3);
////				model.addAttribute("endTime", endtime);
//				mpppp.put("endTime", endtime);
//			}
//			model.addAttribute("agentid", agentid);
			mpppp.put("schemeid", schemeid23);
			returnObject1.setData(mpppp);
			return returnObject1;
//			return "/lottery/betmember/soccerbettingList6";
		
		}else{
			//今日
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			String requestagentid = request.getParameter("agentid");
			if(StringUtils.isBlank(requestagentid)){
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
//				Calendar cal = Calendar.getInstance();
//				int d = 0;
//				if(cal.get(Calendar.DAY_OF_WEEK)==1){
//					d = -6;
//				}else{
//					d = 2-cal.get(Calendar.DAY_OF_WEEK);
//				}
//				cal.add(Calendar.DAY_OF_WEEK, d);
				//所在周开始日期
				Date dateeee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
//				cal.add(Calendar.DAY_OF_WEEK, 6);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateeee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", agentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							
							Map<String, Object> ddd = betAgentreportformJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							/*
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select IFNULL(aaa.bettingmoney,0) as bettingmoney,IFNULL(bbb.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(eee.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(eee.bettingscore,0) as bettingscore,IFNULL(eee.bettingwin,0) as bettingwin,IFNULL(fff.bettingtimecommission,0) as bettingtimecommission,IFNULL(ggg.bettingtimecommission1,0) as bettingtimecommission1,IFNULL(kkk.transferaccountsscore,0) as transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_agent hh on a.agentid=hh.agentid where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.parentids like :aid)) fff,"+
									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
									*/
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformJcService.queryForObject(new Finder("select agentid,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0 group by agentid,agentnickname").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", agentid));
				/*
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,IFNULL(aaa.bettingmoney,0) as bettingmoney,IFNULL(bbb.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(eee.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(eee.bettingscore,0) as bettingscore,IFNULL(eee.bettingwin,0) as bettingwin,IFNULL(fff.bettingtimecommission,0) as bettingtimecommission,IFNULL(kkk.transferaccountsscore,0) as transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid));
						*/
				if(sadfasd!=null){
					sadfasd.put("level", "直属");
					sadfasd.put("fgdfgdfgdf", 1);
					if(agentdatas!=null){
						agentdatas.add(sadfasd);
					}else{
						agentdatas=new ArrayList<Map<String, Object>>();
						agentdatas.add(sadfasd);
					}
				}
				Map mpppp=new HashMap<String,Object>();
//				model.addAttribute("agentdatas", agentdatas);
				mpppp.put("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", agentid),page);
				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid  and active=1").setParam("agentid", agentid), BetAgent.class);
//				model.addAttribute("agentaccount", betagentt.getAccount());	
//				model.addAttribute("agentnickname", betagentt.getNickname());
				mpppp.put("agentaccount", betagentt.getAccount());
				mpppp.put("agentnickname", betagentt.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
//					model.addAttribute("startTime", starttime);
					mpppp.put("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
//					model.addAttribute("endTime", endtime);
					mpppp.put("endTime", endtime);
				}
//				return "/lottery/betreportform/betreportformagreport";
				returnObject.setData(mpppp);
				return returnObject;
		
			}else{
				BetAgent betaaa = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", requestagentid), BetAgent.class);
				if(betaaa!=null){
					if(betaaa.getAgentid().equals(agentid)||betaaa.getParentids().contains(agentid)){
						
					}else{
//						return "/errorpage/error";
						returnObject.setMessage(ReturnDatas.ERROR);
						returnObject.setMessage("不能查看上级代理报表");
						return returnObject;
					}
				}else{
//					return "/errorpage/error";
					returnObject.setMessage(ReturnDatas.ERROR);
					returnObject.setMessage("无此代理");
					return returnObject;
				}
				
				// ==构造分页请求
				Page page = newPage(request,"b.bettingmoney","desc");
				// ==执行分页查询
//				Calendar cal = Calendar.getInstance();
//				int d = 0;
//				if(cal.get(Calendar.DAY_OF_WEEK)==1){
//					d = -6;
//				}else{
//					d = 2-cal.get(Calendar.DAY_OF_WEEK);
//				}
//				cal.add(Calendar.DAY_OF_WEEK, d);
				//所在周开始日期
				Date dateee=new Date();
				String starttime =new SimpleDateFormat("yyyy-MM-dd").format(dateee);
//				cal.add(Calendar.DAY_OF_WEEK, 6);
				//所在周结束日期
				String endtime = new SimpleDateFormat("yyyy-MM-dd").format(dateee);
				Date date1 =DateUtils.convertString2Date(endtime);
				Calendar calendar = new GregorianCalendar();
				if(date1!=null){
					calendar.setTime(date1); 
					calendar.add(Calendar.DATE,1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
				}
				if(StringUtils.isBlank(starttime)){
					starttime="0000-00-00";
				}
				if(StringUtils.isBlank(endtime)){
					endtime="9999-00-00";
				}
				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname from bet_agent a where (a.parentid=:id) ").setParam("id", requestagentid));
				
				if(agentdatas!=null){
					for (Map<String, Object> map : agentdatas) {
						if(map.get("agentid")!=null){
							String ageasdf = (String)map.get("agentid");
							
							Map<String, Object> ddd = betAgentreportformJcService.queryForObject(new Finder("select sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(bettingtimecommission1) as bettingtimecommission1,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 1").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", ageasdf));
							/*
							Map<String, Object> ddd=betAgentService.queryForObject(new Finder("select IFNULL(aaa.bettingmoney,0) as bettingmoney,IFNULL(bbb.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(eee.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(eee.bettingscore,0) as bettingscore,IFNULL(eee.bettingwin,0) as bettingwin,IFNULL(fff.bettingtimecommission,0) as bettingtimecommission,IFNULL(ggg.bettingtimecommission1,0) as bettingtimecommission1,IFNULL(kkk.transferaccountsscore,0) as transferaccountsscore from (select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id or agentparentids like :aid)) aaa," +
									"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id or agentparentids like :aid)) bbb," +
//									"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id or ff.agentparentids like :aid)) ccc," +
//									"(select sum(bet_commission.commission) as commission from bet_commission left join bet_agent on bet_agent.agentid=bet_commission.agentid where bet_commission.settlementtime>=:starttime and bet_commission.settlementtime<:endtime and (bet_agent.agentid=:id or bet_agent.parentids like :aid)) ddd," +
									"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id or agentparentids like :aid)) eee,"+
//									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member hh on b.memberid2=hh.id2 where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.agentparentids like :aid)) fff,"+
//									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg"
									"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_agent hh on a.agentid=hh.agentid where b.bettingtime>=:starttime and b.bettingtime<:endtime and (hh.agentid=:id or hh.parentids like :aid)) fff,"+
									"(select sum(a.commission) as bettingtimecommission1 from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id)) ggg,"+
									"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id or agentparentids like :aid)) kkk"
									).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", ageasdf).setParam("aid", "%,"+ageasdf+",%"));
									*/
							if(ddd!=null){
								Double bettingmoney=0.;
								Double untreatedbettingmoney=0.;
//								Double gamewin=0.;
//								Double commission=0.;
								Double treatedbettingmoney=0.;
								Double bettingscore=0.;
								Double bettingwin=0.;
								Double bettingtimecommission=0.;
								Double bettingtimecommission1=0.;
								Double transferaccountsscore=0.;
								Object object = ddd.get("bettingmoney");
								Object object2 = ddd.get("untreatedbettingmoney");
//								Object object3 = ddd.get("gamewin");
//								Object object4 = ddd.get("commission");
								Object object5 = ddd.get("treatedbettingmoney");
								Object object6 = ddd.get("bettingscore");
								Object object7 = ddd.get("bettingwin");
								Object object8 = ddd.get("bettingtimecommission");
								Object object9 = ddd.get("bettingtimecommission1");
								Object object10 = ddd.get("transferaccountsscore");
								if(object!=null){
									bettingmoney=((BigDecimal)object).doubleValue();
								}
								if(object2!=null){
									untreatedbettingmoney=((BigDecimal)object2).doubleValue();
								}
//								if(object3!=null){
//									gamewin=((BigDecimal)object3).doubleValue();
//								}
//								if(object4!=null){
//									commission=((BigDecimal)object4).doubleValue();
//								}
								if(object5!=null){
									treatedbettingmoney=((BigDecimal)object5).doubleValue();
								}
								if(object6!=null){
									bettingscore=((BigDecimal)object6).doubleValue();
								}
								if(object7!=null){
									bettingwin=((BigDecimal)object7).doubleValue();
								}
								if(object8!=null){
									bettingtimecommission=((BigDecimal)object8).doubleValue();
								}
								if(object9!=null){
									bettingtimecommission1=((BigDecimal)object9).doubleValue();
								}
								if(object10!=null){
									transferaccountsscore=((BigDecimal)object10).doubleValue();
								}
								map.put("bettingmoney", bettingmoney);
								map.put("untreatedbettingmoney", untreatedbettingmoney);
//								map.put("gamewin", gamewin);
//								map.put("commission", commission);
								map.put("treatedbettingmoney", treatedbettingmoney);
								map.put("bettingscore", bettingscore);
								map.put("bettingwin", bettingwin);
								map.put("bettingtimecommission", bettingtimecommission);
								map.put("bettingtimecommission1", bettingtimecommission1);
								map.put("transferaccountsscore", transferaccountsscore);
							}
							String parentids = (String)map.get("parentids");
							if(parentids.startsWith(",")){
								parentids=parentids.substring(1);
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}else{
								String[] split = parentids.split(",");
								map.put("level", "登"+split.length);
							}
						}
					}
				}
				
				Map<String, Object> sadfasd = betAgentreportformJcService.queryForObject(new Finder("select agentid,agentparentids,agentnickname,sum(bettingmoney) as bettingmoney,sum(untreatedbettingmoney) as untreatedbettingmoney,sum(treatedbettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingwin) as bettingwin,sum(bettingtimecommission) as bettingtimecommission,sum(transferaccountsscore) as transferaccountsscore from bet_agentreportform_jc where date>=:starttime and date<:endtime and agentid = :agentid and isagent = 0").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("agentid", requestagentid));
				/*
				Map<String, Object> sadfasd = betAgentService.queryForObject(new Finder("select a.agentid,a.parentids,a.nickname,IFNULL(aaa.bettingmoney,0) as bettingmoney,IFNULL(bbb.untreatedbettingmoney,0) as untreatedbettingmoney,IFNULL(eee.treatedbettingmoney,0) as treatedbettingmoney,IFNULL(eee.bettingscore,0) as bettingscore,IFNULL(eee.bettingwin,0) as bettingwin,IFNULL(fff.bettingtimecommission,0) as bettingtimecommission,IFNULL(kkk.transferaccountsscore,0) as transferaccountsscore from (select * from bet_agent where (agentid=:id)) a," +
						"(select sum(bettingmoney) as bettingmoney from soccer_allbetting where state!=2 and bettingtime>=:starttime and bettingtime<:endtime and (agentid=:id )) aaa," +
						"(select sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 and (agentid=:id )) bbb," +
//						"(select sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 and (ff.agentid=:id )) ccc," +
//						"(select sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime and agentid=:id) ddd," +
						"(select sum(bettingmoney) as treatedbettingmoney,sum(bettingscore) as bettingscore,sum(bettingscore-bettingmoney) as bettingwin from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=1 and (agentid=:id )) eee,"+
						"(select sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id where b.bettingtime>=:starttime and b.bettingtime<:endtime and (a.agentid=:id) and b.agentid=:id ) fff,"+
						"(select sum(transferaccountsscore) as transferaccountsscore from bet_transfer_accounts where time>=:starttime and time<:endtime and (agentid=:id))kkk"
						).setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
						*/
				sadfasd.put("level", "直属");
				sadfasd.put("fgdfgdfgdf", 1);
				if(agentdatas!=null){
					agentdatas.add(sadfasd);
				}else{
					agentdatas=new ArrayList<Map<String, Object>>();
					agentdatas.add(sadfasd);
				}
				
				
//				List<Map<String, Object>> agentdatas=betAgentService.queryForList(new Finder("select a.agentid,a.parentids,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_agent a left join (select bb.agentid,sum(aa.bettingmoney) as bettingmoney from soccer_allbetting aa left join bet_member bb on aa.memberid2=bb.id2 where aa.bettingtime>=:starttime and aa.bettingtime<:endtime group by bb.agentid) b on a.agentid=b.agentid left join (select dd.agentid,sum(cc.bettingmoney) as untreatedbettingmoney from soccer_allbetting cc left join bet_member dd on cc.memberid2=dd.id2 where cc.bettingtime>=:starttime and cc.bettingtime<:endtime and cc.state=0 group by dd.agentid)c on c.agentid=a.agentid left join (select ff.agentid,sum(ee.bettingscore-ee.bettingmoney) as gamewin from soccer_allbetting ee left join bet_member ff on ee.memberid2=ff.id2 where ee.settlementtime>=:starttime and ee.settlementtime<:endtime and ee.state=1 group by ff.agentid) d on d.agentid=a.agentid left join (select agentid,sum(commission) as commission from bet_commission where settlementtime>=:starttime and settlementtime<:endtime group by agentid) e on a.agentid=e.agentid where (a.parentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid));
//				if(agentdatas!=null){
//					for (Map<String, Object> map : agentdatas) {
//						if(map.get("parentids")!=null){
//							String parentids = (String)map.get("parentids");
//							if(parentids.startsWith(",")){
//								parentids=parentids.substring(1);
//								String[] split = parentids.split(",");
//								map.put("level", "登"+split.length);
//							}
//						}
//					}
//				}
//				model.addAttribute("agentdatas", agentdatas);
				Map mpppp=new HashMap<String,Object>();
				mpppp.put("agentdatas", agentdatas);
//				List<Map<String, Object>> datas = betMemberService.queryForList(new Finder("select a.id2,a.nickname,b.bettingmoney,c.untreatedbettingmoney,d.gamewin,e.commission from bet_member a left join (select memberid2,sum(bettingmoney) as bettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime group by memberid2) b on a.id2=b.memberid2 left join (select memberid2,sum(bettingmoney) as untreatedbettingmoney from soccer_allbetting where bettingtime>=:starttime and bettingtime<:endtime and state=0 group by memberid2)c on c.memberid2=a.id2 left join (select memberid2,sum(bettingscore-bettingmoney) as gamewin from soccer_allbetting where settlementtime>=:starttime and settlementtime<:endtime and state=1 group by memberid2) d on d.memberid2=a.id2 left join (select memberid2,sum(commission) as commission from bet_commission where agentid=:id and settlementtime>=:starttime and settlementtime<:endtime group by memberid2) e on a.id2=e.memberid2 where (a.agentid=:id) ").setParam("starttime",starttime ).setParam("endtime", endtime).setParam("id", requestagentid),page);
//				BetAgent betagentt = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid ").setParam("agentid", agentid), BetAgent.class);
//				model.addAttribute("agentaccount", betaaa.getAccount());
//				model.addAttribute("agentnickname", betaaa.getNickname());
				mpppp.put("agentaccount", betaaa.getAccount());
				mpppp.put("agentnickname", betaaa.getNickname());
//				returnObject.setQueryBean(betReportform);
//				returnObject.setPage(page);
//				returnObject.setData(datas);
				
//				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				if(!"0000-00-00".equals(starttime)){
//					model.addAttribute("startTime", starttime);
					mpppp.put("startTime", starttime);
				}
				if(!"9999-00-00".equals(endtime)){
					Date date2 =DateUtils.convertString2Date(endtime);
					calendar.setTime(date2); 
					calendar.add(Calendar.DATE,-1);
					Date date3=calendar.getTime();
					endtime = DateUtils.convertDate2String(date3);
//					model.addAttribute("endTime", endtime);
				}
//				model.addAttribute("agentid", requestagentid);
				returnObject.setData(mpppp);
				return returnObject;
//				return "/lottery/betreportform/betreportformagreport";
			}
		}
	}	
	
	
	
	
	
	
	
	
	
	
	
	@RequestMapping("/winorfaillist")
	public String winorfaillist(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		if("1".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			String starttime = request.getParameter("starttime");
			String endtime = request.getParameter("endtime");
			if(StringUtils.isBlank(starttime)){
				starttime="0000-01-01";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="3000-01-01";
			}
			java.sql.Date startDate = java.sql.Date.valueOf(starttime);
			java.sql.Date endDate = java.sql.Date.valueOf(endtime);
			List<BetReportform> datas = null;
			Double gamewin = 0d;
			Double welfare = 0d;
			if(starttime=="0000-01-01" && endtime=="3000-01-01"){
				gamewin = betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid =:agentid ").setParam("agentid", agentid), Double.class);
				welfare = betReportformService.queryForObject(new Finder("select SUM(bettingmoney) from bet_agentreportform where agentid =:agentid ").setParam("agentid", agentid), Double.class);
			}else{
				if(!starttime.equals(endtime)){
					gamewin = betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid =:agentid and (date between :starttime and :endtime) ").setParam("agentid", agentid).setParam("starttime", starttime).setParam("endtime", endtime), Double.class);
					welfare = betReportformService.queryForObject(new Finder("select SUM(bettingmoney) from bet_agentreportform where agentid =:agentid and (date between :starttime and :endtime) ").setParam("agentid", agentid).setParam("starttime", starttime).setParam("endtime", endtime), Double.class);
				}else{
					gamewin = betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid =:agentid and date=:date").setParam("agentid", agentid).setParam("date", starttime), Double.class);
					welfare = betReportformService.queryForObject(new Finder("select SUM(bettingmoney) from bet_agentreportform where agentid=:agentid and date=:date ").setParam("agentid", agentid).setParam("date", starttime), Double.class);
					//welfare = betReportformService.queryForObject(new Finder("select sum(signin)+SUM(relief)+SUM(daywinorfailrebate)+SUM(firstrecharge)+SUM(rank)+SUM(redpackage)+SUM(subordinaterebate) from bet_agentreportform where agentid is null and date=:date ").setParam("date", starttime), Double.class);
				}
			}
			if(gamewin==null){
				gamewin=0.;
			}
			if(welfare==null){
				welfare=0.;
			}
			if(starttime=="0000-01-01" && endtime=="3000-01-01"){
				datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid ").setParam("agentid", agentid),page,BetReportform.class,betReportform);
				
				
					//用户留存
					Double sumScore = betMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
					if(sumScore==null){
						sumScore=0.;
					}
					//昨天的日期
					Calendar cal = Calendar.getInstance();
					
					String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
					//前天的日期
					Calendar cal1 = Calendar.getInstance();
					cal1.add(Calendar.DATE, -1);
					String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
					//游戏输赢
//					Double sumGameWin = betBettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and substring(a.settlementtime,1,10)=:date ").setParam("date", yesterday), Double.class);
					Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
					if(sumGameWin==null){
						sumGameWin=0.;
					}
					
					//投注额
//					Double sumBettingMoney = betBettingService.queryForObject(new Finder("select sum(a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("date", yesterday), Double.class);
					Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
					if(sumBettingMoney==null){
						sumBettingMoney=0.;
					}
					
					
						gamewin+=sumGameWin;
						welfare+=sumBettingMoney;
					BetReportform betReportform1 = new BetReportform();
					betReportform1.setDate(new Date());
//					betReportform1.setRegisternum(registNum);
//					betReportform1.setRegistersend(registersend);
//					betReportform1.setRecharge(sumBetGoldMoney);
//					betReportform1.setWithdrawcash(sumBetWithdrawcashMoney);
					//betReportform1.setCardrecycle(sumBetRechargecard);
					betReportform1.setCardrecycle(0d);
//					betReportform1.setSignin(sumBetScorerecordMoney.intValue());
//					betReportform1.setRelief(sumReliefScore);
//					betReportform1.setDaywinorfailrebate(sumDaywinorfailRebate);
//					betReportform1.setWeekwinorfailrebate(sumWeekwinorfailrebate);
//					betReportform1.setDaywinorfailrebate(0d);
//					betReportform1.setFirstrecharge(firstrebate);
//					betReportform1.setRank(sumRankRebate);
//					betReportform1.setRedpackage(sumRedRecord);
//					betReportform1.setSubordinaterebate(sumSubordinaterebate);
					betReportform1.setWinorloss(sumGameWin);
					betReportform1.setScore(sumScore);
					betReportform1.setBettingmoney(sumBettingMoney);
//					betReportform1.setTy(betsumty);
//					betReportform1.setResult(result);
//					betReportform1.setAllwelfare(allwelfare);
//					betReportform1.setPayrebate(payrebate);
//					betReportform1.setTodayrechargerebate(todayrebate);
//					betReportform1.setTransferaccount(sumtransferaccount);
					betReportform1.setAgentid(null);
					betReportform1.setAgentparentid(null);
					betReportform1.setAgentparentids(null);
//					betReportform.setMks(mks);
//	    			betReportform.setGks(gks);
					betReportform1.setId(Integer.MAX_VALUE);
					
				if(page.getPageIndex()==1){
					if(datas==null){
						datas=new ArrayList<BetReportform>();
					}
					datas.add(0, betReportform1);
				}
				model.addAttribute("addtotalcount", 1);
				
				
			}else{
				datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid and  date>=:starttime and date<=:endtime ").setParam("agentid", agentid).setParam("starttime",startDate).setParam("endtime", endDate),page,BetReportform.class,betReportform);
//				if("-1".equals(request.getParameter("show"))){
//					model.addAttribute("show", -1);
//				}else{
//					model.addAttribute("show", 2);
//				}
				
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				Date parse = new SimpleDateFormat("yyyy-MM-dd").parse(starttime);
				Date parse2 = new SimpleDateFormat("yyyy-MM-dd").parse(endtime);
				String early = DateFormatUtils.format(date, "yyyy-MM-dd 00:00:00");
				date = sdf.parse(early);
				if((date.equals(parse) || date.after(parse)) && date.equals(parse2) || date.before(parse2)){
					
						//用户留存
						Double sumScore = betMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
						if(sumScore==null){
							sumScore=0.;
						}
						//昨天的日期
						Calendar cal = Calendar.getInstance();
						
						String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
						//前天的日期
						Calendar cal1 = Calendar.getInstance();
						cal1.add(Calendar.DATE, -1);
						String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
						//游戏输赢
						Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//						Double sumGameWin = betBettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and substring(a.settlementtime,1,10)=:date ").setParam("date", yesterday), Double.class);
						if(sumGameWin==null){
							sumGameWin=0.;
						}
						//投注额
//						Double sumBettingMoney = betBettingService.queryForObject(new Finder("select sum(a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("date", yesterday), Double.class);
						Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
						if(sumBettingMoney==null){
							sumBettingMoney=0.;
						}
						gamewin+=sumGameWin;
						welfare+=sumBettingMoney;
						BetReportform betReportform1 = new BetReportform();
						betReportform1.setDate(cal.getTime());
//						betReportform1.setRegisternum(registNum);
//						betReportform1.setRegistersend(registersend);
//						betReportform1.setRecharge(sumBetGoldMoney);
//						betReportform1.setWithdrawcash(sumBetWithdrawcashMoney);
						//betReportform1.setCardrecycle(sumBetRechargecard);
						betReportform1.setCardrecycle(0d);
//						betReportform1.setSignin(sumBetScorerecordMoney.intValue());
//						betReportform1.setRelief(sumReliefScore);
//						betReportform1.setDaywinorfailrebate(sumDaywinorfailRebate);
//						betReportform1.setWeekwinorfailrebate(sumWeekwinorfailrebate);
//						betReportform1.setDaywinorfailrebate(0d);
//						betReportform1.setFirstrecharge(firstrebate);
//						betReportform1.setRank(sumRankRebate);
//						betReportform1.setRedpackage(sumRedRecord);
//						betReportform1.setSubordinaterebate(sumSubordinaterebate);
						betReportform1.setWinorloss(sumGameWin);
						betReportform1.setScore(sumScore);
						betReportform1.setBettingmoney(sumBettingMoney);
//						betReportform1.setTy(betsumty);
//						betReportform1.setResult(result);
//						betReportform1.setAllwelfare(allwelfare);
//						betReportform1.setPayrebate(payrebate);
//						betReportform1.setTodayrechargerebate(todayrebate);
//						betReportform1.setTransferaccount(sumtransferaccount);
						betReportform1.setAgentid(null);
						betReportform1.setAgentparentid(null);
						betReportform1.setAgentparentids(null);
						betReportform1.setId(Integer.MAX_VALUE);
//						betReportform.setMks(mks);
//		    			betReportform.setGks(gks);
					if(page.getPageIndex()==1){
						if(datas==null){
							datas=new ArrayList<BetReportform>();
						}
						datas.add(0, betReportform1);
					}
					model.addAttribute("addtotalcount", 1);
				}
				
			}
//			if(datas!=null){
//				for (BetReportform betReportform2 : datas) {
//					Double transferaccount = betReportform2.getTransferaccount();
//					Double allwelfare = betReportform2.getAllwelfare();
//					Double recharge = betReportform2.getRecharge();
//					Double withdrawcash = betReportform2.getWithdrawcash();
//					Double redpackage = betReportform2.getRedpackage();
//					Double ty = betReportform2.getTy();
//					Double winorloss = betReportform2.getWinorloss();
//					Double result = betReportform2.getResult();
//					if(transferaccount==null){
//						transferaccount=0.;
//					}
//					if(allwelfare==null){
//						allwelfare=0.;
//					}
//					if(recharge==null){
//						recharge=0.;
//					}
//					if(withdrawcash==null){
//						withdrawcash=0.;
//					}
//					if(redpackage==null){
//						redpackage=0.;
//					}
//					if(ty==null){
//						ty=0.;
//					}
//					if(winorloss==null){
//						winorloss=0.;
//					}
//					if(result==null){
//						result=0.;
//					}
////					betReportform2.setDayscore(transferaccount+allwelfare+recharge-withdrawcash+redpackage+ty+winorloss+result);
//					
//					betReportform2.setDayscore(transferaccount+allwelfare+recharge*1000-withdrawcash*1000+redpackage+ty+winorloss+result);
//					
//				}
//			}
			returnObject.setQueryBean(betReportform);
			returnObject.setPage(page);
			returnObject.setData(datas);
			
			model.addAttribute("gamewin", gamewin);
			model.addAttribute("bettingmoney", welfare);
			model.addAttribute("xs", 1);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			
			Calendar cal = Calendar.getInstance();
			cal.setTime(endDate);
			cal.add(Calendar.DATE, 1);
			Date eeeeee=cal.getTime();
			try {
				
				List<Map<String, Object>> untreatedbettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=0 group by  DATE_FORMAT(a.bettingtime,:formate) having  bettingtime>=:starttime and bettingtime<:endtime ").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(untreatedbettinglist!=null){
					for (Map<String, Object> map : untreatedbettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setUntreatedbettingmoney(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			//按投注时间统计已结算投注额、游戏输赢
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney,SUM(a.bettingscore) as bettingscore,SUM(a.bettingscore-a.bettingmoney) as bettingwin FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 group by  DATE_FORMAT(a.bettingtime,:formate) having  bettingtime>=:starttime and bettingtime<:endtime  ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						double bettingscore1 = ((BigDecimal)map.get("bettingscore")).doubleValue();
						double bettingwin1 = ((BigDecimal)map.get("bettingwin")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setBettingtimebettingmoney(bettingmoney1);
									b.setBettingtimebettingscore(bettingscore1);
									b.setBettingtimebettingwin(bettingwin1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			
			if(starttime=="0000-01-01"){
				starttime=null;
			}
			if(endtime=="3000-01-01"){
				endtime=null;
			}
			
			model.addAttribute("startDate", starttime);
			model.addAttribute("endDate", endtime);
			return "/lottery/betreportform/betreportformwinorlossList";
		}else if("2".equals(request.getParameter("k"))){
			//未结算

			String gcname = request.getParameter("gcname");
			String memberid2 = request.getParameter("memberid2");
			if(StringUtils.isNoneEmpty(gcname)){
				gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request,"bettingtime","desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
				if(StringUtils.isNoneEmpty(memberid2)){
					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=0 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
						
						soccer(datas);
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingListuntreated";
					}else if("北京单场".equals(gcname)){
						gcbjdc(model, agentid, gcname, memberid2, returnObject,	page, date, betBetting);
						return "/lottery/betreportform/betreportformbjdcbettingListuntreated";
					}else if("竞彩篮球".equals(gcname)){
						
						List<BasketballScheme> datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
						
						basketball(datas);
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbasketballschemeListuntreated";
						
						
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingListuntreated";
					}
				}else{
					page.setSort("desc");
					page.setOrder("bettingmoney");
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=0 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute("gcname", gcname);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
//					return "/lottery/betreportform/betreportformgameclassbettingList";
					return "/lottery/betreportform/betreportformmemberbettingListuntreated";
				}
			}else{
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("totallybettingmoney");
				page.setPageSize(50);
				page.setSort("desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
				List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.state=0 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//				if(datas!=null){
//					for (BetBetting betBetting2 : datas) {
//						betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//					}
//				}
				
				returnObject.setQueryBean(betBetting);
				returnObject.setPage(page);
				returnObject.setData(datas);
				model.addAttribute("bettingtime", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				return "/lottery/betreportform/betreportformgameclassbettingListuntreated";
//				return "/lottery/betreportform/betreportformbettingList";
			}
			
		
		}else if("3".equals(request.getParameter("k"))){

			//已结算

			String gcname = request.getParameter("gcname");
			String memberid2 = request.getParameter("memberid2");
			if(StringUtils.isNoneEmpty(gcname)){
				gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request,"bettingtime","desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
				if(StringUtils.isNoneEmpty(memberid2)){
					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=1 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
						
						soccer(datas);
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingListtreated";
					}else if("北京单场".equals(gcname)){
						gcbjdc(model, agentid, gcname, memberid2, returnObject,	page, date, betBetting);
						return "/lottery/betreportform/betreportformbjdcbettingListtreated";
					}else if("竞彩篮球".equals(gcname)){
						
						List<BasketballScheme> datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
						
						basketball(datas);
						
						
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbasketballschemeListtreated";
						
						
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingListtreated";
					}
				}else{
					page.setSort("desc");
					page.setOrder("bettingmoney");
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,sum(a.bettingscore) as bettingscore,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=1 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute("gcname", gcname);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
//					return "/lottery/betreportform/betreportformgameclassbettingList";
					return "/lottery/betreportform/betreportformmemberbettingListtreated";
				}
			}else{
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("totallybettingmoney");
				page.setPageSize(50);
				page.setSort("desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
				List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.state=1 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//				if(datas!=null){
//					for (BetBetting betBetting2 : datas) {
//						betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//					}
//				}
				
				returnObject.setQueryBean(betBetting);
				returnObject.setPage(page);
				returnObject.setData(datas);
				model.addAttribute("bettingtime", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				return "/lottery/betreportform/betreportformgameclassbettingListtreated";
//				return "/lottery/betreportform/betreportformbettingList";
			}
		}else{

			//本周
			Date date =  new Date();
//			Double gamewin= betReportformService.queryForObject(new Finder("select SUM(winorloss) from bet_agentreportform where YEARWEEK(date_format(date,:ppp),1) = YEARWEEK(:date,1) and agentid=:agentid  ").setParam("agentid", agentid).setParam("ppp", "%Y-%m-%d").setParam("date", date), Double.class);
//			if(gamewin==null){
//				gamewin=0.;
//			}
			
//			Double welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where YEARWEEK(date_format(date,:ppp)) = YEARWEEK(:date) ").setParam("ppp", "%Y-%m-%d").setParam("date", date), Double.class);
//			if(welfare==null){
//				welfare=0.;
//			}
//			
//			
//			
//			
			
			Double bettingmoney= betReportformService.queryForObject(new Finder("select SUM(bettingmoney) from bet_agentreportform where YEARWEEK(date_format(date,:ppp),1) = YEARWEEK(:date,1) and agentid=:agentid  ").setParam("agentid", agentid).setParam("ppp", "%Y-%m-%d").setParam("date", date), Double.class);
			if(bettingmoney==null){
				bettingmoney=0.;
			}
			
			SimpleDateFormat sdfdate = new SimpleDateFormat("yyyy-MM-dd");
			Calendar cal11 = Calendar.getInstance();
			cal11.add(Calendar.DATE, -1);
			Calendar cal = Calendar.getInstance();
			cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONDAY), cal.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
			cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
			Date startDate = cal.getTime();
			model.addAttribute("startDate", sdfdate.format(startDate));
			Calendar currentDate = new GregorianCalendar();   
			currentDate.setFirstDayOfWeek(Calendar.MONDAY);  
			currentDate.set(Calendar.HOUR_OF_DAY, 23);  
			currentDate.set(Calendar.MINUTE, 59);  
			currentDate.set(Calendar.SECOND, 59);  
			currentDate.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);  
			model.addAttribute("endDate", sdfdate.format(currentDate.getTime()));
			
			

			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			page.setPageSize(50);
			// ==执行分页查询
			List<BetReportform> datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid and YEARWEEK(date_format(date,:ppp),1) = YEARWEEK(:date,1)   ").setParam("agentid", agentid).setParam("ppp", "%Y-%m-%d").setParam("date", date),page,BetReportform.class,betReportform);
			
			//用户留存
			Double sumScore = betMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
			if(sumScore==null){
				sumScore=0.;
			}
			//昨天的日期
			Calendar cal111 = Calendar.getInstance();
			
			String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal111.getTime());
			//前天的日期
			Calendar cal1 = Calendar.getInstance();
			cal1.add(Calendar.DATE, -1);
			String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
			//游戏输赢
			Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
			if(sumGameWin==null){
				sumGameWin=0.;
			}
			//投注额
			Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
			if(sumBettingMoney==null){
				sumBettingMoney=0.;
			}
//			gamewin+=sumGameWin;
			bettingmoney+=sumBettingMoney;
			BetReportform betReportform1 = new BetReportform();
			betReportform1.setDate(new Date());
//			betReportform1.setRegisternum(registNum);
//			betReportform1.setRegistersend(registersend);
//			betReportform1.setRecharge(sumBetGoldMoney);
//			betReportform1.setWithdrawcash(sumBetWithdrawcashMoney);
			//betReportform1.setCardrecycle(sumBetRechargecard);
			betReportform1.setCardrecycle(0d);
//			betReportform1.setSignin(sumBetScorerecordMoney.intValue());
//			betReportform1.setRelief(sumReliefScore);
//			betReportform1.setDaywinorfailrebate(sumDaywinorfailRebate);
//			betReportform1.setWeekwinorfailrebate(sumWeekwinorfailrebate);
//			betReportform1.setDaywinorfailrebate(0d);
//			betReportform1.setFirstrecharge(firstrebate);
//			betReportform1.setRank(sumRankRebate);
//			betReportform1.setRedpackage(sumRedRecord);
//			betReportform1.setSubordinaterebate(sumSubordinaterebate);
			betReportform1.setWinorloss(sumGameWin);
			betReportform1.setScore(sumScore);
			betReportform1.setBettingmoney(sumBettingMoney);
//			betReportform1.setTy(betsumty);
//			betReportform1.setResult(result);
//			betReportform1.setAllwelfare(allwelfare);
//			betReportform1.setPayrebate(payrebate);
//			betReportform1.setTodayrechargerebate(todayrebate);
//			betReportform1.setTransferaccount(sumtransferaccount);
//			betReportform1.setAgentid(null);
			betReportform1.setAgentparentid(null);
			betReportform1.setAgentparentids(null);
			betReportform1.setId(Integer.MAX_VALUE);
//			betReportform.setMks(mks);
//			betReportform.setGks(gks);
			if(datas==null){
				datas=new ArrayList<BetReportform>();
			}
			datas.add(0, betReportform1);

			
			
//			model.addAttribute("gamewin", gamewin);
			model.addAttribute("bettingmoney", bettingmoney);
			
			
			
			
			
			
//			if(datas!=null){
//				for (BetReportform betReportform2 : datas) {
//					Double transferaccount = betReportform2.getTransferaccount();
//					Double allwelfarex = betReportform2.getAllwelfare();
//					Double recharge = betReportform2.getRecharge();
//					Double withdrawcash = betReportform2.getWithdrawcash();
//					Double redpackage = betReportform2.getRedpackage();
//					Double ty = betReportform2.getTy();
//					Double winorloss = betReportform2.getWinorloss();
//					Double resultx = betReportform2.getResult();
//					if(transferaccount==null){
//						transferaccount=0.;
//					}
//					if(allwelfarex==null){
//						allwelfarex=0.;
//					}
//					if(recharge==null){
//						recharge=0.;
//					}
//					if(withdrawcash==null){
//						withdrawcash=0.;
//					}
//					if(redpackage==null){
//						redpackage=0.;
//					}
//					if(ty==null){
//						ty=0.;
//					}
//					if(winorloss==null){
//						winorloss=0.;
//					}
//					if(resultx==null){
//						resultx=0.;
//					}
////					betReportform2.setDayscore(transferaccount+allwelfare+recharge-withdrawcash+redpackage+ty+winorloss+result);
//					
//					betReportform2.setDayscore(transferaccount+allwelfarex+recharge*1000-withdrawcash*1000+redpackage+ty+winorloss+resultx);
//				}
//			}
			
			model.addAttribute("addtotalcount", 1);
			try {
				List<Map<String, Object>> untreatedbettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state=0 group by  DATE_FORMAT(a.bettingtime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", date).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(untreatedbettinglist!=null){
					for (Map<String, Object> map : untreatedbettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setUntreatedbettingmoney(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//按投注时间统计已结算投注额、游戏输赢
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney,SUM(a.bettingscore) as bettingscore,SUM(a.bettingscore-a.bettingmoney) as bettingwin FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state=1 group by  DATE_FORMAT(a.bettingtime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", date).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						double bettingscore1 = ((BigDecimal)map.get("bettingscore")).doubleValue();
						double bettingwin1 = ((BigDecimal)map.get("bettingwin")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setBettingtimebettingmoney(bettingmoney1);
									b.setBettingtimebettingscore(bettingscore1);
									b.setBettingtimebettingwin(bettingwin1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			returnObject.setQueryBean(betReportform);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformwinorlossList";
		}
	}



	private void gcbjdc(Model model, String agentid, String gcname,
			String memberid2, ReturnDatas returnObject, Page page, String date,
			BetBetting betBetting) throws Exception {
		List<BjdcScheme> datas= bjdcSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=0 and c.isinternal=0 and (c.agentid=:agentid or c.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),BjdcScheme.class,page);
		corebjdc(datas);
		
		returnObject.setQueryBean(betBetting);
		returnObject.setPage(page);
		returnObject.setData(datas);
		model.addAttribute("bettingtime", date);
		model.addAttribute("gcname", gcname);
		model.addAttribute("memberid2", memberid2);
		model.addAttribute(GlobalStatic.returnDatas, returnObject);
	}
	
	
	/**
	 * 列表数据,调用listjson方法,保证和app端数据统一
	 * 
	 * @param request
	 * @param model
	 * @param betReportform
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/seclist")
	public String seclist(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		BetAgent betagent = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", agentid), BetAgent.class);
		if("1".equals(request.getParameter("k"))){
			//上月 &搜索
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			String starttime = request.getParameter("starttime");
			String endtime = request.getParameter("endtime");
			if(StringUtils.isBlank(starttime)){
				starttime="0000-01-01";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="3000-01-01";
			}
			java.sql.Date startDate = java.sql.Date.valueOf(starttime);
			java.sql.Date endDate = java.sql.Date.valueOf(endtime);
			List<BetReportform> datas = null;
			if(starttime=="0000-01-01" && endtime=="3000-01-01"){
				datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid  ").setParam("agentid", agentid),page,BetReportform.class,betReportform);
				model.addAttribute("show", 2);
				
				if(page.getPageIndex()==1){
					//用户留存
	    			Double sumScore = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
	    			if(sumScore==null){
	    				sumScore=0.;
	    			}
	    			//不出票库存
	    			Double sumScoree = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and isissue=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
	    			if(sumScoree==null){
	    				sumScoree=0.;
	    			}
	    			//出票用户游戏分库存
	    			Double sumgamescore = betRankMemberService.queryForObject(new Finder("select sum(gamescore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
	    			if(sumgamescore==null){
	    				sumgamescore=0.;
	    			}
	    			//出票用户银行分库存
	    			Double sumbankscore = betRankMemberService.queryForObject(new Finder("select sum(bankscore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
	    			if(sumbankscore==null){
	    				sumbankscore=0.;
	    			}
	    			//昨天的日期
	    			Calendar cal = Calendar.getInstance();
	    			String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	    			//前天的日期
	    			Calendar cal1 = Calendar.getInstance();
	    			cal1.add(Calendar.DATE, -1);
	    			String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
	    			//注册人数
	    			Integer registNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and substring(signdate,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
	    			if(registNum==null) {
	    				registNum=0;
	    			}
	    			//充值统计
	    			Double sumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND (b.agentid=:agentid or b.agentparentids like :aid) AND a.state=2 and substring(a.rechargetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumBetGoldMoney==null){
	    				sumBetGoldMoney=0.;
	    			}
	    			//提现统计
	    			Double sumBetWithdrawcashMoney = betWithdrawcashService.queryForObject(new Finder("select sum(a.money) from bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=2 and substring(a.audittime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumBetWithdrawcashMoney==null){
	    				sumBetWithdrawcashMoney=0.;
	    			}
	    			//卡充
//	    			//卡收
//	    			List<BetRechargecard> betRechargecardList = betRechargecardService.queryForList(new Finder("select a.money from bet_rechargecard a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.state=2 and substring(a.rechargetime,1,10)=:date order by a.id asc ").setParam("date", yesterday), BetRechargecard.class);
//	    			double sumBetRechargecard = 0d;//卡收总额
//	    			if(!betRechargecardList.isEmpty()){
//	    				for (BetRechargecard betRechargecard : betRechargecardList) {
//	    					sumBetRechargecard+=betRechargecard.getMoney();
//	    				}
//	    			}
//	    			sumBetRechargecard = Math.round(sumBetRechargecard*100)*0.01d;
//	    			//签到 金额
//	    			Integer sumBetScorerecordMoney = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=3 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Integer.class);
	    			Double sumBetScorerecordMoney =betSigninRewardService.queryForObject(new Finder("select sum(reward) from bet_signin_reward a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumBetScorerecordMoney==null){
	    				sumBetScorerecordMoney = 0.;
	    			}
	    			
	    			//总救济金
	    			Integer sumReliefScore = betReliefRecordService.queryForObject(new Finder("select sum(a.reliefscore) from bet_relief_record a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.date,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
	    			if(sumReliefScore==null){
	    				sumReliefScore=0;
	    			}
	    			//当日输赢返利
	    			Double sumDaywinorfailRebate = betDaywinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_daywinorfailrebate a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumDaywinorfailRebate==null){
	    				sumDaywinorfailRebate=0.;
	    			}
	    			//总排行返利
//	    			Double sumRankRebate = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=9 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Double.class);
	    			Double sumRankRebate = betRankMemberService.queryForObject(new Finder("select sum(award) from bet_rank_member a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and  a.state =1 and substring(a.receivetime,1,10)=:date  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumRankRebate==null){
	    				sumRankRebate=0.;
	    			}
	    			//红包
	    			Double sumRedRecord =  betRedenvelopeRecordService.queryForObject(new Finder("select sum(a.receivescore) from bet_redenvelope_record a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumRedRecord==null){
	    				sumRedRecord=0.;
	    			}
	    			//下线(推广返利)
	    			Double sumSubordinaterebate = betSubordinaterebateDetailService.queryForObject(new Finder("select sum(a.income) from bet_subordinaterebate_detail a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumSubordinaterebate==null){
	    				sumSubordinaterebate=0.;
	    			}
	    			//首冲返利
	    			Double firstrebate = betFirstrechargerebateService.queryForObject(new Finder("select sum(rebate) from bet_firstrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(firstrebate==null){
	    				firstrebate=0.;
	    			}
	    			//游戏输赢
//	    			Double sumGameWin = betBettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and substring(a.settlementtime,1,10)=:date ").setParam("date", yesterday), Double.class);
	    			Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumGameWin==null){
	    				sumGameWin=0.;
	    			}
	    			//投注额
//	    			Double sumBettingMoney = betBettingService.queryForObject(new Finder("select sum(a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("date", yesterday), Double.class);
	    			Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumBettingMoney==null){
	    				sumBettingMoney=0.;
	    			}
	    			//退佣
	    			Double betsumty = betBettingService.queryForObject(new Finder("select sum(memberty) from bet_betting where membertystate=1 and (agentid=:agentid or agentparentids like :aid) and substring(membertytime,1,10)=:membertytime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("membertytime", yesterday), Double.class);
	    			if(betsumty == null){
	    				betsumty =0.;
	    			}
	    			//单笔充值返利
	    			Double payrebate = betSinglerechargeService.queryForObject(new Finder("select sum(a.rebate) from bet_singlerecharge a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(payrebate == null){
	    				payrebate = 0.;
	    			}
	    			//当日充值返
	    			Double todayrebate = betTodayrechargerebateService.queryForObject(new Finder("select sum(a.reward) from bet_todayrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday),Double.class);
	    			if(todayrebate == null){
	    				todayrebate = 0.;
	    			}
	    			//注册送
	    			Double registersend = betRegisterRewardService.queryForObject(new Finder("select sum(a.reward) from bet_register_reward a  left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(registersend == null){
	    				registersend = 0.;
	    			}
	    			//昨日留存
	    			Double result = betReportformService.queryForObject(new Finder("select score from bet_agentreportform where agentid=:agentid and date=:date limit 1 ").setParam("agentid", agentid).setParam("date", before_yesterday), Double.class);
	    			if(result == null){
	    				result = 0.;
	    			}
	    			//周返利
	    			Double sumWeekwinorfailrebate = betWeekwinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_weekwinorfailrebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and a.state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumWeekwinorfailrebate==null){
	    				sumWeekwinorfailrebate=0.;
	    			}
	    			//转账
	    			Double sumtransferaccount = betTransferAccountsService.queryForObject(new Finder("select sum(a.transferaccountsscore) from bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumtransferaccount==null){
	    				sumtransferaccount=0.;
	    			}
	    			//代理提现
	    			Double sumagentwithdrawcash = betAgentwithdrawService.queryForObject(new Finder("select sum(money) from bet_agentwithdraw where  (agentid=:agentid or agentparentids like :aid) and substring(audittime,1,10)=:date and state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumagentwithdrawcash==null){
	    				sumagentwithdrawcash=0.;
	    			}
	    			//总福利
	    			Double allwelfare = sumDaywinorfailRebate+sumWeekwinorfailrebate+sumRankRebate+sumReliefScore+sumBetScorerecordMoney+todayrebate+firstrebate+sumSubordinaterebate+registersend+payrebate;
	    			//用户。游戏扣税
//	    			Double gks = betBettingService.queryForObject(new Finder("select sum(gks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(gks==null){
//	    				gks=0.;
//	    			}
//	    			Double mks = betBettingService.queryForObject(new Finder("select sum(mks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(mks==null){
//	    				mks=0.;
//	    			}
	    			
	    			
	    			BetReportform betReportform1 = new BetReportform();
	    			betReportform1.setDate(cal.getTime());
	    			betReportform1.setRegisternum(registNum);
	    			betReportform1.setRegistersend(registersend);
	    			betReportform1.setRecharge(sumBetGoldMoney);
	    			betReportform1.setWithdrawcash(sumBetWithdrawcashMoney);
	    			//betReportform.setCardrecycle(sumBetRechargecard);
	    			betReportform1.setCardrecycle(0d);
	    			betReportform1.setSignin(sumBetScorerecordMoney.intValue());
	    			betReportform1.setRelief(sumReliefScore);
	    			betReportform1.setDaywinorfailrebate(sumDaywinorfailRebate);
	    			betReportform1.setWeekwinorfailrebate(sumWeekwinorfailrebate);
//	    			betReportform.setDaywinorfailrebate(0d);
	    			betReportform1.setFirstrecharge(firstrebate);
	    			betReportform1.setRank(sumRankRebate);
	    			betReportform1.setRedpackage(sumRedRecord);
	    			betReportform1.setSubordinaterebate(sumSubordinaterebate);
	    			betReportform1.setWinorloss(sumGameWin);
	    			betReportform1.setScore(sumScore);
	    			betReportform1.setBettingmoney(sumBettingMoney);
	    			betReportform1.setTy(betsumty);
	    			betReportform1.setResult(result);
	    			betReportform1.setAllwelfare(allwelfare);
	    			betReportform1.setPayrebate(payrebate);
	    			betReportform1.setTodayrechargerebate(todayrebate);
	    			betReportform1.setTransferaccount(sumtransferaccount);
	    			betReportform1.setAgentid(agentid);
//	    			betReportform1.setScoree(sumScoree);
	    			betReportform1.setAgentwithdrawcash(sumagentwithdrawcash);
	    			betReportform1.setNoissuescore(sumScoree);
	    			betReportform1.setGamescore(sumgamescore);
	    			betReportform1.setBankscore(sumbankscore);
//	    			betReportform1.setAgentparentid(betAgent.getParentid());
//	    			betReportform1.setAgentparentids(betAgent.getParentids());
//	    			betReportform1.setMks(mks);
//	    			betReportform1.setGks(gks);
	    			
					
					betReportform1.setId(Integer.MAX_VALUE);
					if(datas==null){
						datas=new ArrayList<BetReportform>();
					}
					datas.add(0, betReportform1);
				}
				model.addAttribute("addtotalcount", 1);
				
				
			}else{
				datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid and  date>=:starttime and date<=:endtime ").setParam("agentid", agentid).setParam("starttime",startDate).setParam("endtime", endDate),page,BetReportform.class,betReportform);
				if("-1".equals(request.getParameter("show"))){
					model.addAttribute("show", -1);
				}else{
					model.addAttribute("show", 2);
				}
				
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				Date parse = new SimpleDateFormat("yyyy-MM-dd").parse(starttime);
				Date parse2 = new SimpleDateFormat("yyyy-MM-dd").parse(endtime);
				String early = DateFormatUtils.format(date, "yyyy-MM-dd 00:00:00");
				date = sdf.parse(early);
				if((date.equals(parse) || date.after(parse)) && date.equals(parse2) || date.before(parse2)){
					if(page.getPageIndex()==1){
						//用户留存
		    			Double sumScore = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		    			if(sumScore==null){
		    				sumScore=0.;
		    			}
		    			//不出票库存
		    			Double sumScoree = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and isissue=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		    			if(sumScoree==null){
		    				sumScoree=0.;
		    			}
		    			//出票用户游戏分库存
		    			Double sumgamescore = betRankMemberService.queryForObject(new Finder("select sum(gamescore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		    			if(sumgamescore==null){
		    				sumgamescore=0.;
		    			}
		    			//出票用户银行分库存
		    			Double sumbankscore = betRankMemberService.queryForObject(new Finder("select sum(bankscore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		    			if(sumbankscore==null){
		    				sumbankscore=0.;
		    			}
		    			//昨天的日期
		    			Calendar cal = Calendar.getInstance();
		    			String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
		    			//前天的日期
		    			Calendar cal1 = Calendar.getInstance();
		    			cal1.add(Calendar.DATE, -1);
		    			String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
		    			//注册人数
		    			Integer registNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and substring(signdate,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
		    			if(registNum==null) {
		    				registNum=0;
		    			}
		    			//充值统计
		    			Double sumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND (b.agentid=:agentid or b.agentparentids like :aid) AND a.state=2 and substring(a.rechargetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumBetGoldMoney==null){
		    				sumBetGoldMoney=0.;
		    			}
		    			//提现统计
		    			Double sumBetWithdrawcashMoney = betWithdrawcashService.queryForObject(new Finder("select sum(a.money) from bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=2 and substring(a.audittime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumBetWithdrawcashMoney==null){
		    				sumBetWithdrawcashMoney=0.;
		    			}
		    			//卡充
//		    			//卡收
//		    			List<BetRechargecard> betRechargecardList = betRechargecardService.queryForList(new Finder("select a.money from bet_rechargecard a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.state=2 and substring(a.rechargetime,1,10)=:date order by a.id asc ").setParam("date", yesterday), BetRechargecard.class);
//		    			double sumBetRechargecard = 0d;//卡收总额
//		    			if(!betRechargecardList.isEmpty()){
//		    				for (BetRechargecard betRechargecard : betRechargecardList) {
//		    					sumBetRechargecard+=betRechargecard.getMoney();
//		    				}
//		    			}
//		    			sumBetRechargecard = Math.round(sumBetRechargecard*100)*0.01d;
//		    			//签到 金额
//		    			Integer sumBetScorerecordMoney = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=3 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Integer.class);
		    			Double sumBetScorerecordMoney =betSigninRewardService.queryForObject(new Finder("select sum(reward) from bet_signin_reward a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumBetScorerecordMoney==null){
		    				sumBetScorerecordMoney = 0.;
		    			}
		    			
		    			//总救济金
		    			Integer sumReliefScore = betReliefRecordService.queryForObject(new Finder("select sum(a.reliefscore) from bet_relief_record a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.date,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
		    			if(sumReliefScore==null){
		    				sumReliefScore=0;
		    			}
		    			//当日输赢返利
		    			Double sumDaywinorfailRebate = betDaywinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_daywinorfailrebate a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumDaywinorfailRebate==null){
		    				sumDaywinorfailRebate=0.;
		    			}
		    			//总排行返利
//		    			Double sumRankRebate = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=9 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Double.class);
		    			Double sumRankRebate = betRankMemberService.queryForObject(new Finder("select sum(award) from bet_rank_member a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and  a.state =1 and substring(a.receivetime,1,10)=:date  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumRankRebate==null){
		    				sumRankRebate=0.;
		    			}
		    			//红包
		    			Double sumRedRecord =  betRedenvelopeRecordService.queryForObject(new Finder("select sum(a.receivescore) from bet_redenvelope_record a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumRedRecord==null){
		    				sumRedRecord=0.;
		    			}
		    			//下线(推广返利)
		    			Double sumSubordinaterebate = betSubordinaterebateDetailService.queryForObject(new Finder("select sum(a.income) from bet_subordinaterebate_detail a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumSubordinaterebate==null){
		    				sumSubordinaterebate=0.;
		    			}
		    			//首冲返利
		    			Double firstrebate = betFirstrechargerebateService.queryForObject(new Finder("select sum(rebate) from bet_firstrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(firstrebate==null){
		    				firstrebate=0.;
		    			}
		    			//游戏输赢
//		    			Double sumGameWin = betBettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and substring(a.settlementtime,1,10)=:date ").setParam("date", yesterday), Double.class);
		    			Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumGameWin==null){
		    				sumGameWin=0.;
		    			}
		    			//投注额
//		    			Double sumBettingMoney = betBettingService.queryForObject(new Finder("select sum(a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("date", yesterday), Double.class);
		    			Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumBettingMoney==null){
		    				sumBettingMoney=0.;
		    			}
		    			//退佣
		    			Double betsumty = betBettingService.queryForObject(new Finder("select sum(memberty) from bet_betting where membertystate=1 and (agentid=:agentid or agentparentids like :aid) and substring(membertytime,1,10)=:membertytime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("membertytime", yesterday), Double.class);
		    			if(betsumty == null){
		    				betsumty =0.;
		    			}
		    			//单笔充值返利
		    			Double payrebate = betSinglerechargeService.queryForObject(new Finder("select sum(a.rebate) from bet_singlerecharge a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(payrebate == null){
		    				payrebate = 0.;
		    			}
		    			//当日充值返
		    			Double todayrebate = betTodayrechargerebateService.queryForObject(new Finder("select sum(a.reward) from bet_todayrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday),Double.class);
		    			if(todayrebate == null){
		    				todayrebate = 0.;
		    			}
		    			//注册送
		    			Double registersend = betRegisterRewardService.queryForObject(new Finder("select sum(a.reward) from bet_register_reward a  left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("agentid", agentid).setParam("aid", "%,"+agentid+",%").setParam("date", yesterday), Double.class);
		    			if(registersend == null){
		    				registersend = 0.;
		    			}
		    			//昨日留存
		    			Double result = betReportformService.queryForObject(new Finder("select score from bet_agentreportform where agentid=:agentid and date=:date limit 1 ").setParam("agentid", agentid).setParam("date", before_yesterday), Double.class);
		    			if(result == null){
		    				result = 0.;
		    			}
		    			//周返利
		    			Double sumWeekwinorfailrebate = betWeekwinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_weekwinorfailrebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and a.state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumWeekwinorfailrebate==null){
		    				sumWeekwinorfailrebate=0.;
		    			}
		    			//转账
		    			Double sumtransferaccount = betTransferAccountsService.queryForObject(new Finder("select sum(a.transferaccountsscore) from bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumtransferaccount==null){
		    				sumtransferaccount=0.;
		    			}
		    			//代理提现
		    			Double sumagentwithdrawcash = betAgentwithdrawService.queryForObject(new Finder("select sum(money) from bet_agentwithdraw where  (agentid=:agentid or agentparentids like :aid) and substring(audittime,1,10)=:date and state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumagentwithdrawcash==null){
		    				sumagentwithdrawcash=0.;
		    			}
		    			//总福利
		    			Double allwelfare = sumDaywinorfailRebate+sumWeekwinorfailrebate+sumRankRebate+sumReliefScore+sumBetScorerecordMoney+todayrebate+firstrebate+sumSubordinaterebate+registersend+payrebate;
		    			//用户。游戏扣税
//		    			Double gks = betBettingService.queryForObject(new Finder("select sum(gks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(gks==null){
//		    				gks=0.;
//		    			}
//		    			Double mks = betBettingService.queryForObject(new Finder("select sum(mks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(mks==null){
//		    				mks=0.;
//		    			}
		    			
		    			
		    			BetReportform betReportform1 = new BetReportform();
		    			betReportform1.setDate(cal.getTime());
		    			betReportform1.setRegisternum(registNum);
		    			betReportform1.setRegistersend(registersend);
		    			betReportform1.setRecharge(sumBetGoldMoney);
		    			betReportform1.setWithdrawcash(sumBetWithdrawcashMoney);
		    			//betReportform.setCardrecycle(sumBetRechargecard);
		    			betReportform1.setCardrecycle(0d);
		    			betReportform1.setSignin(sumBetScorerecordMoney.intValue());
		    			betReportform1.setRelief(sumReliefScore);
		    			betReportform1.setDaywinorfailrebate(sumDaywinorfailRebate);
		    			betReportform1.setWeekwinorfailrebate(sumWeekwinorfailrebate);
//		    			betReportform.setDaywinorfailrebate(0d);
		    			betReportform1.setFirstrecharge(firstrebate);
		    			betReportform1.setRank(sumRankRebate);
		    			betReportform1.setRedpackage(sumRedRecord);
		    			betReportform1.setSubordinaterebate(sumSubordinaterebate);
		    			betReportform1.setWinorloss(sumGameWin);
		    			betReportform1.setScore(sumScore);
		    			betReportform1.setBettingmoney(sumBettingMoney);
		    			betReportform1.setTy(betsumty);
		    			betReportform1.setResult(result);
		    			betReportform1.setAllwelfare(allwelfare);
		    			betReportform1.setPayrebate(payrebate);
		    			betReportform1.setTodayrechargerebate(todayrebate);
		    			betReportform1.setTransferaccount(sumtransferaccount);
		    			betReportform1.setAgentwithdrawcash(sumagentwithdrawcash);
		    			betReportform1.setAgentid(agentid);
//		    			betReportform1.setScoree(sumScoree);
		    			betReportform1.setNoissuescore(sumScoree);
		    			betReportform1.setGamescore(sumgamescore);
		    			betReportform1.setBankscore(sumbankscore);
//		    			betReportform1.setAgentparentid(betAgent.getParentid());
//		    			betReportform1.setAgentparentids(betAgent.getParentids());
//		    			betReportform1.setMks(mks);
//		    			betReportform1.setGks(gks);
		    			
						
						betReportform1.setId(Integer.MAX_VALUE);
						if(datas==null){
							datas=new ArrayList<BetReportform>();
						}
						datas.add(0, betReportform1);
					}
					model.addAttribute("addtotalcount", 1);
				}
				
			}
			if(datas!=null){
				for (BetReportform betReportform2 : datas) {
					Double transferaccount = betReportform2.getTransferaccount();
					Double allwelfare = betReportform2.getAllwelfare();
					Double recharge = betReportform2.getRecharge();
					Double withdrawcash = betReportform2.getWithdrawcash();
					Double redpackage = betReportform2.getRedpackage();
					Double ty = betReportform2.getTy();
					Double winorloss = betReportform2.getWinorloss();
					Double result = betReportform2.getResult();
					if(transferaccount==null){
						transferaccount=0.;
					}
					if(allwelfare==null){
						allwelfare=0.;
					}
					if(recharge==null){
						recharge=0.;
					}
					if(withdrawcash==null){
						withdrawcash=0.;
					}
					if(redpackage==null){
						redpackage=0.;
					}
					if(ty==null){
						ty=0.;
					}
					if(winorloss==null){
						winorloss=0.;
					}
					if(result==null){
						result=0.;
					}
//					betReportform2.setDayscore(transferaccount+allwelfare+recharge-withdrawcash+redpackage+ty+winorloss+result);
					
					betReportform2.setDayscore(transferaccount+allwelfare+recharge*1000-withdrawcash*1000+redpackage+ty+winorloss+result);
					
				}
			}
			Calendar cal = Calendar.getInstance();
			cal.setTime(endDate);
			cal.add(Calendar.DATE, 1);
			Date eeeeee=cal.getTime();
			try {
				List<Map<String, Object>> untreatedbettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a  where  (a.agentid=:agentid or a.agentparentids like :aid) and a.state=0 group by  DATE_FORMAT(a.bettingtime,:formate) having  bettingtime>=:starttime and bettingtime<:endtime ").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(untreatedbettinglist!=null){
					for (Map<String, Object> map : untreatedbettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setUntreatedbettingmoney(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//按投注时间统计已结算投注额、游戏输赢
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney,SUM(a.bettingscore) as bettingscore,SUM(a.bettingscore-a.bettingmoney) as bettingwin FROM soccer_allbetting a where  (a.agentid=:agentid or a.agentparentids like :aid) and a.state=1 group by  DATE_FORMAT(a.bettingtime,:formate) having  bettingtime>=:starttime and bettingtime<:endtime  ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						double bettingscore1 = ((BigDecimal)map.get("bettingscore")).doubleValue();
						double bettingwin1 = ((BigDecimal)map.get("bettingwin")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setBettingtimebettingmoney(bettingmoney1);
									b.setBettingtimebettingscore(bettingscore1);
									b.setBettingtimebettingwin(bettingwin1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			//投注佣金
			try {
				
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("select DATE_FORMAT(b.bettingtime,:formate) as bettingtime,sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_agent hh on a.agentid=hh.agentid where (hh.agentid=:id or hh.parentids like :aid) group by  DATE_FORMAT(b.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("id", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingtimecommission = ((BigDecimal)map.get("bettingtimecommission")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setBettingtimecommission(bettingtimecommission);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户转账
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.time,:formate) as bettingtime,SUM(a.transferaccountsscore) as bettingmoney FROM bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.time,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuetransferscore(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户充值
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.rechargetime,:formate) as bettingtime,SUM(a.money) as bettingmoney FROM bet_gold a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.isissue=0 and a.state=2 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.rechargetime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebetgold(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户提现
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.audittime,:formate) as bettingtime,SUM(a.money) as bettingmoney FROM bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.isissue=0 and a.state=2 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.audittime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebetwithdrawcash(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户投注额
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 group by  DATE_FORMAT(a.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebettingtimetotalbettingmoney(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户未结算
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state=0 group by DATE_FORMAT(a.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebettingtimeunsettlebettingmoney(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			//不出票用户投注佣金
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("select DATE_FORMAT(b.bettingtime,:formate) as bettingtime,sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member mm on a.memberid2=mm.id2 left join bet_agent hh on a.agentid=hh.agentid where (hh.agentid=:id or hh.parentids like :aid) and mm.isissue=0 group by  DATE_FORMAT(b.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("id", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingtimecommission = ((BigDecimal)map.get("bettingtimecommission")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebettingtimecommission(bettingtimecommission);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			//不出票用户已结算
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney,SUM(a.bettingscore) as bettingscore,SUM(a.bettingscore-a.bettingmoney) as bettingwin FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state=1 group by  DATE_FORMAT(a.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						double bettingscore1 = ((BigDecimal)map.get("bettingscore")).doubleValue();
						double bettingwin1 = ((BigDecimal)map.get("bettingwin")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebettingtimebettingmoney(bettingmoney1);
									b.setNoissuebettingtimebettingscore(bettingscore1);
									b.setNoissuebettingtimebettingwin(bettingwin1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			returnObject.setQueryBean(betReportform);
			returnObject.setPage(page);
			returnObject.setData(datas);
			Double gamewin = 0d;
			Double welfare = 0d;
			if(starttime=="0000-01-01" && endtime=="3000-01-01"){
				gamewin = betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid =:agentid ").setParam("agentid", agentid), Double.class);
				welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where agentid =:agentid ").setParam("agentid", agentid), Double.class);
			}else{
				if(!starttime.equals(endtime)){
					gamewin = betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid =:agentid and (date between :starttime and :endtime) ").setParam("agentid", agentid).setParam("starttime", starttime).setParam("endtime", endtime), Double.class);
					welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where agentid =:agentid and (date between :starttime and :endtime) ").setParam("agentid", agentid).setParam("starttime", starttime).setParam("endtime", endtime), Double.class);
				}else{
					gamewin = betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid =:agentid and date=:date").setParam("agentid", agentid).setParam("date", starttime), Double.class);
					welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where agentid =:agentid and date=:date ").setParam("agentid", agentid).setParam("date", starttime), Double.class);
					//welfare = betReportformService.queryForObject(new Finder("select sum(signin)+SUM(relief)+SUM(daywinorfailrebate)+SUM(firstrecharge)+SUM(rank)+SUM(redpackage)+SUM(subordinaterebate) from bet_agentreportform where agentid is null and date=:date ").setParam("date", starttime), Double.class);
				}
			}
			if(gamewin==null){
				gamewin=0.;
			}
			if(welfare==null){
				welfare=0.;
			}
			model.addAttribute("gamewin", gamewin);
			model.addAttribute("welfare", welfare);
			model.addAttribute("xs", 1);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			if(starttime=="0000-01-01"){
				starttime=null;
			}
			if(endtime=="3000-01-01"){
				endtime=null;
			}
			model.addAttribute("startDate", starttime);
			model.addAttribute("endDate", endtime);
			return listurlsec;
		}else if("2".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			String starttime = request.getParameter("starttime");
			String endtime = request.getParameter("endtime");
			if(StringUtils.isBlank(starttime)){
				starttime="0000-01-01";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="3000-01-01";
			}
			java.sql.Date startDate = java.sql.Date.valueOf(starttime);
			java.sql.Date endDate=java.sql.Date.valueOf(endtime);
			List<BetReportform> datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid=:agentid and date>=:starttime and date<=:endtime ").setParam("agentid", agentid).setParam("starttime",startDate).setParam("endtime", endDate),page,BetReportform.class,betReportform);
			returnObject.setQueryBean(betReportform);
			returnObject.setPage(page);
			returnObject.setData(datas);
			if(starttime=="0000-01-01"){
				startDate=null;
			}
			if(endtime=="3000-01-01"){
				endDate=null;
			}
			Double allresult = 0d;
			allresult= betReportformService.queryForObject(new Finder("select sum(result) from bet_agentreportform where  agentid=:agentid and date>=:starttime and date<=:endtime").setParam("agentid", agentid).setParam("starttime",startDate).setParam("endtime", endDate), Double.class);
			model.addAttribute("allresult", allresult);
			model.addAttribute("startDate", startDate);
			model.addAttribute("endDate", endDate);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return listurlsec;
		}else if("3".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			String date = request.getParameter("date");
			BetMember betMember = new BetMember();
			List<BetMember> datas=betMemberService.findListDataByFinder(new Finder("select * from bet_member where (agentid=:agentid or agentparentids like :aid) and isinternal=0 and substring(signdate,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetMember.class,betMember );
			returnObject.setQueryBean(betMember);
			returnObject.setPage(page);
			returnObject.setData(datas);
			
			model.addAttribute("signdate", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformregisterListsec";
		}else if("4".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			List<Map<String, Object>> idandbanktypelist = betPaymentInterfaceService.queryForList(new Finder("select banktype,id from bet_payment_interface  "));
			String date = request.getParameter("date");
			BetGold betGold = new BetGold();
			List<BetGold> datas=new ArrayList<>();
			if("1".equals(request.getParameter("virtualmember"))){
				datas=betGoldService.findListDataByFinder(new Finder("select  a.*,b.id2 as memberid2  from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.rechargetime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetGold.class,betGold);
				model.addAttribute("virtualmember", 1);
			}else{
				datas=betGoldService.findListDataByFinder(new Finder("select  a.*,b.id2 as memberid2  from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.rechargetime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetGold.class,betGold);
			}
			if(datas!=null){
				for (BetGold betGold2 : datas) {
//					BetMember betMember = betMemberService.findBetMemberById(betGold2.getMemberid());
//					betGold2.setMemberid2(betMember.getId2());
					if(idandbanktypelist!=null){
						for (Map<String, Object> map : idandbanktypelist) {
							if(map.get("id").equals(betGold2.getSource())){
								betGold2.setSource((String)map.get("banktype"));
								break;
							}else{
								betGold2.setSource(null);
							}
						}
					}
				}
			}
			
			returnObject.setQueryBean(betGold);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("rechargetime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformrechargeListsec";
		}else if("5".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetWithdrawcash betWithdrawcash = new BetWithdrawcash();
			List<BetWithdrawcash> datas=new ArrayList<BetWithdrawcash>();
			if("1".equals(request.getParameter("virtualmember"))){
				datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_withdrawcash a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.audittime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetWithdrawcash.class,betWithdrawcash);
				model.addAttribute("virtualmember", 1);
			}else{
				datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_withdrawcash a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.audittime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetWithdrawcash.class,betWithdrawcash);
			}
			returnObject.setQueryBean(betWithdrawcash);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("audittime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformwithdrawcashListsec";
		}else if("7".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetRedenvelopeRecord betRedenvelopeRecord = new BetRedenvelopeRecord();
			List<BetRedenvelopeRecord> datas=betRedenvelopeRecordService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.redenvelopecode,a.receivescore,a.receivetime,a.source,a.state,a.redenvelopeid,a.agentid,a.agentparentid,a.agentparentids from bet_redenvelope_record a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetRedenvelopeRecord.class,betRedenvelopeRecord);
			returnObject.setQueryBean(betRedenvelopeRecord);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("receivetime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformredenveloperecordListsec";
		}else  if("8".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetSubordinaterebateDetail betSubordinaterebateDetail = new BetSubordinaterebateDetail();
			List<BetSubordinaterebateDetail> datas=betSubordinaterebateDetailService.findListDataByFinder(new Finder("select  a.id,a.memberid2,a.nickname,a.recommendnum,a.sb,a.subordinatebet,a.sc,a.subordinaterecharge,a.sl,a.subordinatelose,a.income,a.subtime,a.receivetime,a.receiveip,a.state,a.agentid,a.agentparentid,a.agentparentids from bet_subordinaterebate_detail a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.subtime=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetSubordinaterebateDetail.class,betSubordinaterebateDetail);
//			for (BetSubordinaterebateDetail betSubordinaterebateDetail2 : datas) {
//				BetMember member = betMemberService.findBetMemberById(betSubordinaterebateDetail2.getSubordinateid());
//				betSubordinaterebateDetail2.setMemberid2(betSubordinaterebateDetail2.getMemberid2());
//				betSubordinaterebateDetail2.setSubordinateid2(betSubordinaterebateDetail2.getMemberid2());
//			}
			returnObject.setQueryBean(betSubordinaterebateDetail);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("subtime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformsubordinaterebateListsec";
		}else if("9".equals(request.getParameter("k"))){
			String gcname = request.getParameter("gcname");
			String memberid2 = request.getParameter("memberid2");
			if(StringUtils.isNoneEmpty(gcname)){
				gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request,"bettingtime","desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
				if(StringUtils.isNoneEmpty(memberid2)){
					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas=new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
						}
						
						
						soccer(datas);
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingListsec";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas =new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
						}
						corebjdc(datas);
						return "/lottery/betreportform/betreportformbjdcbettingListsec";
					}else if("竞彩篮球".equals(gcname)){
						List<BasketballScheme> datas =new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
						}
						
						
						basketball(datas);
						
						
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbasketballschemeListsec";
						
						
					}else{
						List<BetBetting> datas=new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							model.addAttribute("virtualmember", 1);
						}else{
							datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						}
						
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingListsec";
					}
				}else{
					page.setSort("desc");
					page.setOrder("bettingmoney");
					List<Map<String, Object>> datas =new ArrayList<>();
					if("1".equals(request.getParameter("virtualmember"))){
						datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,b.nickname,b.agentid,sum(a.bettingmoney) as bettingmoney from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state!=2 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
						model.addAttribute("virtualmember", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,b.nickname,b.agentid,sum(a.bettingmoney) as bettingmoney from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state!=2 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute("gcname", gcname);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
//					return "/lottery/betreportform/betreportformgameclassbettingList";
					return "/lottery/betreportform/betreportformmemberbettingListsec";
				}
			}else{
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("totallybettingmoney");
				page.setPageSize(50);
				page.setSort("desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
				List<Map<String, Object>> datas =new ArrayList<>();
				if("1".equals(request.getParameter("virtualmember"))){
					datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state!=2 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
					model.addAttribute("virtualmember", 1);
				}else{
					datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state!=2 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
				}
				
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//				if(datas!=null){
//					for (BetBetting betBetting2 : datas) {
//						betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//					}
//				}
				
				returnObject.setQueryBean(betBetting);
				returnObject.setPage(page);
				returnObject.setData(datas);
				model.addAttribute("bettingtime", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				return "/lottery/betreportform/betreportformgameclassbettingListsec";
//				return "/lottery/betreportform/betreportformbettingList";
			}
			
		}else if("10".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
//			if(page.getOrder()=="id"){
//				page.setOrder("a.id");
//			}
			page.setOrder("a."+page.getOrder());
			String date = request.getParameter("date");
			BetRankMember betRankMember = new BetRankMember();
			List<BetRankMember> datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.memberid,b.id2,a.nickname,a.score,a.gamemoney,a.bankmoney,a.freezingscore from bet_rank_member a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.date=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetRankMember.class,betRankMember);
			returnObject.setQueryBean(betRankMember);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("date", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformmemberListsec";
		}else if("11".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			if(page.getOrder()=="id"){
				page.setOrder("a.id");
			}
			String date = request.getParameter("date");
			BetBetting betBetting = new BetBetting();
			List<BetBetting> datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.bettingtime,a.gcname,a.name1,sum(a.bettingmoney) AS bettingmoney from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date GROUP BY a.name1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetBetting.class,betBetting);
			returnObject.setQueryBean(betBetting);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("bettingtime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformbettingmoneyListsec";
		}else if("12".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetDaywinorfailrebate betdaywinorfailrebate = new BetDaywinorfailrebate();
			List<BetDaywinorfailrebate> datas=betDaywinorfailrebateService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.nickname,a.dayscore,a.daybettingmoney,a.rebate,a.receivetime,a.receiveip,a.gamescore,a.bankscore,a.state,a.date,a.agentid,a.agentparentid,a.agentparentids from bet_daywinorfailrebate a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetDaywinorfailrebate.class,betdaywinorfailrebate);
			returnObject.setQueryBean(betdaywinorfailrebate);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("receivetime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformdaywinorfailListsec";
		}else if("13".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetReliefRecord betReliefRecord = new BetReliefRecord();
			List<BetReliefRecord> datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.id,a.memberid,a.memberid2,a.reliefscore,a.date,a.agentid,a.agentparentid,a.agentparentids from bet_relief_record a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.date,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetReliefRecord.class,betReliefRecord);
			returnObject.setQueryBean(betReliefRecord);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("date", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformreliefListsec";
		}else if("14".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetScorerecord betScorerecord = new BetScorerecord();
			List<BetScorerecord> datas=betScorerecordService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.time,a.content,a.originalscore,a.changescore,a.balance,a.state,a.remark,a.type,a.agentid,a.agentparentid,a.agentparentids from bet_scorerecord a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.time,1,10)=:date and type=:state ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date).setParam("state", 9),page,BetScorerecord.class,betScorerecord);
			returnObject.setQueryBean(betScorerecord);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("state", 9);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformrankListsec";
		}else if("15".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetScorerecord betScorerecord = new BetScorerecord();
			List<BetScorerecord> datas=betScorerecordService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.time,a.content,a.originalscore,a.changescore,a.balance,a.state,a.remark,a.type,a.agentid,a.agentparentid,a.agentparentids from bet_scorerecord a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.time,1,10)=:date and type=:state ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date).setParam("state", 3),page,BetScorerecord.class,betScorerecord);
			returnObject.setQueryBean(betScorerecord);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("state", 3);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformsigninListsec";
		}else if("16".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetFirstrechargerebate betFirstrechargerebate = new BetFirstrechargerebate();
			List<BetFirstrechargerebate> datas=betFirstrechargerebateService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.nickname,a.recharge,a.bettingmoney,a.rebate,a.receivetime,a.receiveip,a.gamescore,a.bankscore,a.state,a.date,a.agentid,a.agentparentid,a.agentparentids from bet_firstrechargerebate a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetFirstrechargerebate.class,betFirstrechargerebate);
			returnObject.setQueryBean(betFirstrechargerebate);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("receivetime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformfirstrechargeListsec";
		}else if("17".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetRechargecard betRechargecard = new BetRechargecard();
			List<BetRechargecard> datas=betRechargecardService.findListDataByFinder(new Finder("select a.id,a.password,a.money,a.state,a.ip,a.time,a.memberid2,a.operator,a.validity,a.rechargetime,a.agentid,a.agentparentid,a.agentparentids,a.exchangeid2 from bet_rechargecard a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetRechargecard.class,betRechargecard);
			returnObject.setQueryBean(betRechargecard);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformrechargecardListsec";
		}else if("18".equals(request.getParameter("k"))){
			String starttime = request.getParameter("starttime");
			String endtime = request.getParameter("endtime");
			if(StringUtils.isBlank(starttime)){
				starttime="0000-01-01";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="3000-01-01";
			}
			Date date =  new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
			//
			Double gamewin= betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid=:agentid and substr(date,1,7)=:date ").setParam("agentid", agentid).setParam("date", sdf.format(date)), Double.class);
			model.addAttribute("gamewin", gamewin);
			Double welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where agentid=:agentid and substr(date,1,7)=:date ").setParam("agentid", agentid).setParam("date", sdf.format(date)), Double.class);
			model.addAttribute("welfare", welfare);
			
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			List<BetReportform> datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid and date between :starttime and :endtime ").setParam("agentid", agentid).setParam("starttime",starttime).setParam("endtime",endtime),page,BetReportform.class,betReportform);
				returnObject.setQueryBean(betReportform);
			returnObject.setPage(page);
			returnObject.setData(datas);
			
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			if(starttime=="0000-01-01"){
				starttime=null;
			}
			if(endtime=="3000-01-01"){
				endtime=null;
			}
			model.addAttribute("startDate", starttime);
			model.addAttribute("endDate", endtime);
			model.addAttribute("p", "1");
			return listurlsec;
		}else if("19".equals(request.getParameter("k"))){
			//退佣
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			List<BetBetting> datas = betBettingService.queryForList(new Finder("select a.bettingmoney,a.memberty,a.membertytime,b.id2 as memberid2 from bet_betting a left join bet_member b on a.memberid=b.id  where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.membertystate=1 and substring(a.membertytime,1,10)=:date order by b.id2").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), BetBetting.class);
			returnObject.setQueryBean(new BetBetting());
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformtymemberListsec";
		}else if("20".equals(request.getParameter("k"))){
			//总福利
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			List<BetReportform> data =new ArrayList<BetReportform>();
//			BetReportform data = null;
			if(new SimpleDateFormat("yyyy-MM-dd").format(new Date()).equals(date)){
				Double registersend = betRegisterRewardService.queryForObject(new Finder("select sum(reward) from bet_register_reward where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(registersend == null){
					registersend = 0.;
				}
				Double signinreward = betSigninRewardService.queryForObject(new Finder("select sum(reward) from bet_signin_reward where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid)  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(signinreward==null){
					signinreward=0.;
				}
				Double firstrebate = betFirstrechargerebateService.queryForObject(new Finder("select sum(rebate) from bet_firstrechargerebate where date=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(firstrebate==null){
					firstrebate=0.;
				}
				Double sumSubordinaterebate = betSubordinaterebateDetailService.queryForObject(new Finder("select sum(a.income) from bet_subordinaterebate_detail a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.subtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(sumSubordinaterebate==null){
					sumSubordinaterebate=0.;
				}
				Double payrebate = betSinglerechargeService.queryForObject(new Finder("select sum(rebate) from bet_singlerecharge where state=1 and substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(payrebate == null){
					payrebate = 0.;
				}
				Double todayrebate = betTodayrechargerebateService.queryForObject(new Finder("select sum(reward) from bet_todayrechargerebate where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("agentid", agentid).setParam("aid", "%,"+agentid+",%").setParam("date", date),Double.class);
				if(todayrebate == null){
					todayrebate = 0.;
				}
				Double relief = betReliefRecordService.queryForObject(new Finder("select sum(reliefscore) from bet_relief_record where substring(date,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(relief==null){
					relief=0.;
				}
				Double rankmember = betRankMemberService.queryForObject(new Finder("select sum(award) from bet_rank_member where state=1 and substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date),Double.class);
				if(rankmember==null){
					rankmember=0.;
				}
				Double weekwinorfail = betWeekwinorfailrebateService.queryForObject(new Finder("select sum(rebate) from bet_weekwinorfailrebate where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(weekwinorfail==null){
					weekwinorfail=0.;
				}
				Double daywinorfail = betDaywinorfailrebateService.queryForObject(new Finder("select sum(rebate) from bet_daywinorfailrebate  where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(daywinorfail==null){
					daywinorfail=0.;
				}
				BetReportform reportform = new BetReportform();
				reportform.setRegistersend(registersend);
				reportform.setFirstrecharge(firstrebate);
				reportform.setSubordinaterebate(sumSubordinaterebate);
				reportform.setPayrebate(payrebate);
				reportform.setTodayrechargerebate(todayrebate);
//				reportform.setAllwelfare(registersend+firstrebate+sumSubordinaterebate+payrebate+todayrebate);
				reportform.setSignin(signinreward.intValue());
				reportform.setRelief(relief.intValue());
				reportform.setRank(rankmember);
				reportform.setWeekwinorfailrebate(weekwinorfail);
				reportform.setDaywinorfailrebate(daywinorfail);
				data.add(reportform);
			}else{
				data = betReportformService.queryForList(new Finder("select * from bet_agentreportform where date=:date and agentid=:agentid  ").setParam("agentid", agentid).setParam("date", date), BetReportform.class);
			}
				returnObject.setData(data);
				model.addAttribute("time", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
			
//			List<BetReportform> datas = betReportformService.queryForList(new Finder("select * from bet_agentreportform where date=:date ").setParam("date", date), BetReportform.class);
//			returnObject.setQueryBean(new BetReportform());
//			returnObject.setPage(page);
//			returnObject.setData(datas);
//			model.addAttribute("time", date);
//			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformallwelfareListsec";
		}else if("21".equals(request.getParameter("k"))){
			//注册 送
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetRegisterReward betRegisterReward = new BetRegisterReward();
			List<BetRegisterReward> datas=betRegisterRewardService.findListDataByFinder(new Finder("select a.* from bet_register_reward a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetRegisterReward.class,betRegisterReward);
			returnObject.setQueryBean(betRegisterReward);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformRegisterSendListsec";
		}else if("22".equals(request.getParameter("k"))){
			//单笔充值返利
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetSinglerecharge betSinglerecharge = new BetSinglerecharge();
			List<BetSinglerecharge> datas=betSinglerechargeService.findListDataByFinder(new Finder("select a.* from bet_singlerecharge a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetSinglerecharge.class,betSinglerecharge);
			returnObject.setQueryBean(betSinglerecharge);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformSinglereChargeListsec";
		}else if("23".equals(request.getParameter("k"))){
			//当日充值返利
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetTodayrechargerebate betTodayrechargerebate = new BetTodayrechargerebate();
			List<BetTodayrechargerebate> datas=betTodayrechargerebateService.findListDataByFinder(new Finder("select a.* from bet_todayrechargerebate a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetTodayrechargerebate.class,betTodayrechargerebate);
			returnObject.setQueryBean(betTodayrechargerebate);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformTodayrechargereListsec";
		}else if("24".equals(request.getParameter("k"))){
			//周输赢返利
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetWeekwinorfailrebate betWeekwinorfailrebate = new BetWeekwinorfailrebate();
			List<BetWeekwinorfailrebate> datas=betWeekwinorfailrebateService.findListDataByFinder(new Finder("select a.* from bet_weekwinorfailrebate a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetWeekwinorfailrebate.class,betWeekwinorfailrebate);
			returnObject.setQueryBean(betWeekwinorfailrebate);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformWeekwinorfailrebateListsec";
		}else if("25".equals(request.getParameter("k"))){
			//转账分
			
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetTransferAccounts betTransferAccounts = new BetTransferAccounts();
			List<BetTransferAccounts> datas=new ArrayList<>();
			if("1".equals(request.getParameter("virtualmember"))){
				datas=betTransferAccountsService.findListDataByFinder(new Finder("select a.* from bet_transfer_accounts a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetTransferAccounts.class,betTransferAccounts);
				model.addAttribute("virtualmember", 1);
			}else{
				datas=betTransferAccountsService.findListDataByFinder(new Finder("select a.* from bet_transfer_accounts a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetTransferAccounts.class,betTransferAccounts);
			}
			
			returnObject.setQueryBean(betTransferAccounts);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("date", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformbetTransferAccountsListsec";
		}else if("26".equals(request.getParameter("k"))){
			
//			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
//			Page page = newPage(request,"dayscore","desc");
//			if(!page.getOrder().contains("a.")){
//				page.setOrder("a."+page.getOrder());
//			}
////			page.setOrder("a.dayscore");
////			page.setSort("desc");
//			String date = request.getParameter("date");
//			BetRankMember betRankMember = new BetRankMember();
//			List<BetRankMember> datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.memberid,b.id2,a.nickname,a.bettingmoney,a.dayscore,a.score,a.gamemoney,a.bankmoney,a.freezingscore from bet_rank_member a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and a.bettingmoney!=0 and a.date=:date ").setParam("date",date),page,BetRankMember.class,betRankMember);
//			returnObject.setQueryBean(betRankMember);
//			returnObject.setPage(page);
//			returnObject.setData(datas);
//			model.addAttribute("date", date);
//			model.addAttribute(GlobalStatic.returnDatas, returnObject);
//			return "/lottery/betreportform/betreportformmemberListxx";
			
			
			
			

			String gcname = request.getParameter("gcname");
			String memberid2 = request.getParameter("memberid2");
			if(StringUtils.isNoneEmpty(gcname)){
				gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request,"bettingtime","desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
				if(StringUtils.isNoneEmpty(memberid2)){
					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where (c.agentid=:agentid or c.agentparentids like :aid) and substr(a.settlementtime,1,10)=:date and a.memberid2=:memberid2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
						
						soccer(datas);
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingListxxsec";
					}else if("北京单场".equals(gcname)){
						gcbjdc(model, agentid, gcname, memberid2, returnObject, page, date, betBetting);
						return "/lottery/betreportform/betreportformbjdcbettingListxxsec";
					}else if("竞彩篮球".equals(gcname)){
						
						List<BasketballScheme> datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  (c.agentid=:agentid or c.agentparentids like :aid) and a.memberid2 = :memberid2  and substr(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
						
						basketball(datas);
						
						
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbasketballschemeListsettlesec";
						
						
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingListsec";
					}
				}else{
					page.setSort("desc");
					page.setOrder("bettingscore");
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from(select a.memberid2,b.agentid,b.nickname,sum(a.bettingmoney) as bettingmoney,sum(a.bettingscore-a.bettingmoney) as bettingscore from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.settlementtime,1,10)=:date and a.gcname=:gcname and a.state!=2 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute("gcname", gcname);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
//					return "/lottery/betreportform/betreportformgameclassbettingList";
					return "/lottery/betreportform/betreportformmemberbettingListxxsec";
				}
			}else{
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("result");
				page.setPageSize(50);
				page.setSort("desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
				List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.state!=2 and substr(a.settlementtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//				if(datas!=null){
//					for (BetBetting betBetting2 : datas) {
//						betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//					}
//				}
				
				returnObject.setQueryBean(betBetting);
				returnObject.setPage(page);
				returnObject.setData(datas);
				model.addAttribute("bettingtime", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				return "/lottery/betreportform/betreportformgameclassbettingListxxsec";
//				return "/lottery/betreportform/betreportformbettingList";
			}
			
		
		}else if("27".equals(request.getParameter("k"))){
			//个人扣税
//			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
//			Page page = newPage(request);
//			page.setOrder("mks");
//			page.setSort("desc");
////			page.setOrder("a.dayscore");
////			page.setSort("desc");
//			String date = request.getParameter("date");
//			BetRankMember betRankMember = new BetRankMember();
//			List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select b.id2,b.nickname, sum(a.mks) as mks from bet_betting a left join bet_member b on a.memberid=b.id where b.agentid=:agentid and TO_DAYS(settlementtime)=TO_DAYS(:date)  group by memberid  HAVING sum(a.mks)>0").setParam("agentid", agentid).setParam("date", date), page);
//			returnObject.setQueryBean(betRankMember);
//			returnObject.setPage(page);
//			returnObject.setData(datas);
//			model.addAttribute("date", date);
//			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformmemberListmkssec";
		}else if("28".equals(request.getParameter("k"))){
			//游戏扣税
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			page.setOrder("gks");
			page.setSort("desc");
//			page.setOrder("a.dayscore");
//			page.setSort("desc");
			String date = request.getParameter("date");
			BetRankMember betRankMember = new BetRankMember();
			List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select gcname, sum(a.gks) as gks from bet_betting a left join bet_member b on a.memberid=b.id where (b.agentid=:agentid or b.agentparentids like :aid) and TO_DAYS(settlementtime)=TO_DAYS(:date)   group by gcname HAVING sum(a.gks)>0 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), page);
			returnObject.setQueryBean(betRankMember);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("date", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformmemberListgkssec";
		}else if("29".equals(request.getParameter("k"))){
				//未结算

				String gcname = request.getParameter("gcname");
				String memberid2 = request.getParameter("memberid2");
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
					Page page = newPage(request,"bettingtime","desc");
					String date = request.getParameter("date");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
					if(StringUtils.isNoneEmpty(memberid2)){
						if("竞彩足球".equals(gcname)){
//							List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//							List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							List<SoccerScheme> datas=new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=0 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=0 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
							}
							
							soccer(datas);
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
//							return "/lottery/betreportform/betreportformgameclassbettingList";
//							return "/lottery/betreportform/betreportformbettingList";
							return "/lottery/betreportform/betreportformsoccerbettingListuntreatedsec";
						}else if("北京单场".equals(gcname)){
							List<BjdcScheme> datas =new ArrayList<BjdcScheme>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = bjdcSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = bjdcSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
							}
							corebjdc(datas);
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
							
							return "/lottery/betreportform/betreportformbjdcbettingListuntreatedsec";
							
						}else if("竞彩篮球".equals(gcname)){
							List<BasketballScheme> datas =new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
							}
							
							basketball(datas);
							
							
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
							return "/lottery/betreportform/betreportformbasketballschemeListuntreatedsec";
							
							
						}else{
							List<BetBetting> datas=new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
								model.addAttribute("virtualmember", 1);
							}else{
								datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							}
//							if(datas!=null){
//								for (BetBetting betBetting2 : datas) {
//									betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//								}
//							}
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
//							return "/lottery/betreportform/betreportformgameclassbettingList";
							return "/lottery/betreportform/betreportformbettingListuntreatedsec";
						}
					}else{
						page.setSort("desc");
						page.setOrder("bettingmoney");
						List<Map<String, Object>> datas = new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=0 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=0 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
						}
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformmemberbettingListuntreatedsec";
					}
				}else{
					ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
					Page page = newPage(request);
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					String date = request.getParameter("date");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas=new ArrayList<>();
					if("1".equals(request.getParameter("virtualmember"))){
						datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=0 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
						model.addAttribute("virtualmember", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=0 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
					}
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbettingListuntreatedsec";
//					return "/lottery/betreportform/betreportformbettingList";
				}
				
			
			}else if("30".equals(request.getParameter("k"))){

				//已结算

				String gcname = request.getParameter("gcname");
				String memberid2 = request.getParameter("memberid2");
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
					Page page = newPage(request,"bettingtime","desc");
					String date = request.getParameter("date");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
					if(StringUtils.isNoneEmpty(memberid2)){
						if("竞彩足球".equals(gcname)){
//							List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//							List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							List<SoccerScheme> datas=new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=1 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=1 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
							}
							
							soccer(datas);
							
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
//							return "/lottery/betreportform/betreportformgameclassbettingList";
//							return "/lottery/betreportform/betreportformbettingList";
							return "/lottery/betreportform/betreportformsoccerbettingListtreatedsec";
						}else if("北京单场".equals(gcname)){
							List<BjdcScheme> datas =new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
							}
							corebjdc(datas);
							return "/lottery/betreportform/betreportformbjdcbettingListtreatedsec";
						}else if("竞彩篮球".equals(gcname)){
							List<BasketballScheme> datas =new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
							}
							
							
							basketball(datas);
							
							
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
							return "/lottery/betreportform/betreportformbasketballschemeListtreatedsec";
							
							
						}else{
							List<BetBetting> datas=new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
								model.addAttribute("virtualmember", 1);
							}else{
								datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							}
							
//							if(datas!=null){
//								for (BetBetting betBetting2 : datas) {
//									betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//								}
//							}
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
//							return "/lottery/betreportform/betreportformgameclassbettingList";
							return "/lottery/betreportform/betreportformbettingListtreatedsec";
						}
					}else{
						page.setSort("desc");
						page.setOrder("bettingmoney");
						List<Map<String, Object>> datas =new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,sum(a.bettingscore) as bettingscore,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=1 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,sum(a.bettingscore) as bettingscore,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=1 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
						}
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformmemberbettingListtreatedsec";
					}
				}else{
					ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
					Page page = newPage(request);
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					String date = request.getParameter("date");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas =new ArrayList<>();
					if("1".equals(request.getParameter("virtualmember"))){
						datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=1 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
						model.addAttribute("virtualmember", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=1 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
					}
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbettingListtreatedsec";
//					return "/lottery/betreportform/betreportformbettingList";
				}
			}else if("31".equals(request.getParameter("k"))){

				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request);
				// ==执行分页查询
				String date = request.getParameter("date");
				BetAgentwithdraw betMember = new BetAgentwithdraw();
				List<BetAgentwithdraw> datas=betAgentwithdrawService.findListDataByFinder(new Finder("select * from bet_agentwithdraw where (agentid=:agentid or agentparentids like :aid) and substring(audittime,1,10)=:date and state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetAgentwithdraw.class,betMember );
				returnObject.setQueryBean(betMember);
				returnObject.setPage(page);
				returnObject.setData(datas);
				
				model.addAttribute("date", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				return "/lottery/betreportform/betreportformagentwithdrawListsec";
			
			}else{
				//本周
				Date date =  new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
//				Double gamewin= betReportformService.queryForObject(new Finder("select SUM(winorloss) from bet_agentreportform where YEARWEEK(date_format(date,:ppp),1) = YEARWEEK(:date,1) and agentid=:agentid ").setParam("agentid", agentid).setParam("ppp", "%Y-%m-%d").setParam("date", new Date()), Double.class);
//				if(gamewin==null){
//					gamewin=0.;
//				}
//				
//				Double welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where YEARWEEK(date_format(date,:ppp),1) = YEARWEEK(:date,1) and agentid=:agentid ").setParam("agentid", agentid).setParam("ppp", "%Y-%m-%d").setParam("date", new Date()), Double.class);
//				if(welfare==null){
//					welfare=0.;
//				}
//				
//				
//				
//				
//				model.addAttribute("gamewin", gamewin);
//				
//				
//				model.addAttribute("welfare", welfare);
//				SimpleDateFormat sdfdate = new SimpleDateFormat("yyyy-MM-dd");
//				Calendar cal11 = Calendar.getInstance();
//				cal11.add(Calendar.DATE, -1);
//				model.addAttribute("startDate", sdf.format(date)+"-01");
//				model.addAttribute("endDate", sdfdate.format(new Date()));
				SimpleDateFormat sdfdate = new SimpleDateFormat("yyyy-MM-dd");
				Calendar cal11 = Calendar.getInstance();
				cal11.add(Calendar.DATE, -1);
				Calendar cal = Calendar.getInstance();
				cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONDAY), cal.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
				cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
				Date startDate = cal.getTime();
				model.addAttribute("startDate", sdfdate.format(startDate));
				Calendar currentDate = new GregorianCalendar();   
				currentDate.setFirstDayOfWeek(Calendar.MONDAY);  
				currentDate.set(Calendar.HOUR_OF_DAY, 23);  
				currentDate.set(Calendar.MINUTE, 59);  
				currentDate.set(Calendar.SECOND, 59);  
				currentDate.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);  
				model.addAttribute("endDate", sdfdate.format(currentDate.getTime()));
				ReturnDatas returnObject = listjson(request, model, betReportform);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				model.addAttribute("p", "0");
				model.addAttribute("show", 0);
				model.addAttribute("agentparentid", betagent.getParentid());
				return listurlsec;
				
				
				
				
				
				
	
				
			
				
			}
	}



	private void corebjdc(List<BjdcScheme> datas) throws Exception {
		if(datas!=null){
			List<String> schemeids=new ArrayList<String>();
			schemeids.add("");
			for (BjdcScheme soccerScheme2 : datas) {
				String schemeid = soccerScheme2.getSchemeid();
				if(schemeid!=null){
					schemeids.add(soccerScheme2.getSchemeid());
				}
			}
			List<BjdcSchemeMatch> matchDatas= bjdcSchemeMatchService.queryForList(new Finder("select a.schemeid,a.id,a.fid,a.dan,b.matchname,b.hometeam,b.guestteam,b.starttime,b.endtime,b.num,c.halfscore,c.allscore from bjdc_scheme_match a LEFT JOIN bjdc_arrange b on a.fid = b.fid left join bjdc_result c on a.fid = c.fid where a.schemeid in (:schemeid)  order by a.id").setParam("schemeid", schemeids), BjdcSchemeMatch.class);
			if(matchDatas!=null){
				List<Map<String, Object>> resultMap = bjdcSchemeMatchService.queryForList(new Finder("select a.oddsname,a.fid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.playid,c.schemeid from bjdc_order_content a LEFT JOIN bjdc_playmethod_oddsname b on a.oddsname=b.oddsname LEFT JOIN bjdc_order c on a.orderid = c.orderid where c.schemeid in (:schemeid)  group by c.schemeid, a.fid,a.oddsname").setParam("schemeid", schemeids));
				if(resultMap!=null){
					for (Map<String, Object> m : resultMap){
						String oddsname  = m.get("oddsname").toString();
					    if("rqwin".equals(oddsname)||"rqflat".equals(oddsname)||"rqlose".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("bdsfp_"+m.get("fid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
						    		BjdcOdds readValue = mmmm.readValue(cached2, BjdcOdds.class);
						    		String letpoints = readValue.getLetpoints();
						    		String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}else{
						    		String letpoints = bjdcOddsService.queryForObject(new Finder("select letpoints from bjdc_odds where fid = :fid ").setParam("fid", m.get("fid").toString()), String.class);
							    	String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								String letpoints = bjdcOddsService.queryForObject(new Finder("select letpoints from bjdc_odds where fid = :fid ").setParam("fid", m.get("fid").toString()), String.class);
						    	String betname = m.get("betname").toString();
						    	m.put("betname",betname+"("+ letpoints+")");
							}
					    }
					}
				}
				for(BjdcSchemeMatch schemeMatch : matchDatas){
					String schemeid = schemeMatch.getSchemeid();
					String fid = schemeMatch.getFid();
					List<Map<String, Object>> mmm=new ArrayList<Map<String, Object>>();
					for (Map<String, Object> m : resultMap){
						if(schemeid.equals((String)m.get("schemeid"))&&fid.equals((String)m.get("fid"))){
							mmm.add(m);
						}
					}
					schemeMatch.setResultMap(mmm);
					schemeMatch.setNum(schemeMatch.getNum());
				}
			}
			
			for(BjdcScheme scheme : datas){
				List<BjdcSchemeMatch> sss=new ArrayList<BjdcSchemeMatch>();
				if(matchDatas!=null){
					for(BjdcSchemeMatch schemeMatch : matchDatas){
						String schemeid = schemeMatch.getSchemeid();
						if(schemeid.equals(scheme.getSchemeid())){
							sss.add(schemeMatch);
						}
					}
				}
				scheme.setSchemecontent(sss);
			}
		}
	}
	
	private void superlotto(List<LotteryScheme> datas) throws Exception {
		if(datas!=null){
			List<String> schemeids=new ArrayList<String>();
			schemeids.add("");
			for (LotteryScheme lotteryScheme2 : datas) {
				String schemeid = lotteryScheme2.getSchemeid();
				if(schemeid!=null){
					schemeids.add(lotteryScheme2.getSchemeid());
				}
			}
			List<LotteryOrder> orderDatas=null;
			if(!schemeids.isEmpty()){
				orderDatas= lotteryOrderService.queryForList(new Finder("select a.*,b.name as playmethod from lottery_order a LEFT JOIN lottery_playmethod b on a.playtype = b.id where a.schemeid in (:schemeid) order by a.id").setParam("schemeid", schemeids), LotteryOrder.class);
			}
			for(LotteryScheme scheme : datas){
				List<LotteryOrder> sss=new ArrayList<LotteryOrder>();
				if(orderDatas!=null){
					for(LotteryOrder schemeMatch : orderDatas){
						String schemeid = schemeMatch.getSchemeid();
						if(schemeid.equals(scheme.getSchemeid())){
							sss.add(schemeMatch);
						}
					}
				}
				scheme.setSchemecontent(sss);
			}
		}
	}
	
	
	
	/**
	 * 列表数据,调用listjson方法,保证和app端数据统一
	 * 
	 * @param request
	 * @param model
	 * @param betReportform
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/list")
	public String list(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		BetAgent betagent = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", agentid), BetAgent.class);
		if("1".equals(request.getParameter("k"))){
			//上月 &搜索
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			String starttime = request.getParameter("starttime");
			String endtime = request.getParameter("endtime");
			if(StringUtils.isBlank(starttime)){
				starttime="0000-01-01";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="3000-01-01";
			}
			java.sql.Date startDate = java.sql.Date.valueOf(starttime);
			java.sql.Date endDate = java.sql.Date.valueOf(endtime);
			List<BetReportform> datas = null;
			if(starttime=="0000-01-01" && endtime=="3000-01-01"){
				datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid  ").setParam("agentid", agentid),page,BetReportform.class,betReportform);
				model.addAttribute("show", 2);
				
				if(page.getPageIndex()==1){
					//用户留存
	    			Double sumScore = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
	    			if(sumScore==null){
	    				sumScore=0.;
	    			}
	    			//不出票库存
	    			Double sumScoree = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and isissue=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
	    			if(sumScoree==null){
	    				sumScoree=0.;
	    			}
	    			//出票用户游戏分库存
	    			Double sumgamescore = betRankMemberService.queryForObject(new Finder("select sum(gamescore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
	    			if(sumgamescore==null){
	    				sumgamescore=0.;
	    			}
	    			//出票用户银行分库存
	    			Double sumbankscore = betRankMemberService.queryForObject(new Finder("select sum(bankscore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
	    			if(sumbankscore==null){
	    				sumbankscore=0.;
	    			}
	    			//昨天的日期
	    			Calendar cal = Calendar.getInstance();
	    			String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	    			//前天的日期
	    			Calendar cal1 = Calendar.getInstance();
	    			cal1.add(Calendar.DATE, -1);
	    			String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
	    			//注册人数
	    			Integer registNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and substring(signdate,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
	    			if(registNum==null) {
	    				registNum=0;
	    			}
	    			//充值统计
	    			Double sumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND (b.agentid=:agentid or b.agentparentids like :aid) AND a.state=2 and substring(a.rechargetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumBetGoldMoney==null){
	    				sumBetGoldMoney=0.;
	    			}
	    			//提现统计
	    			Double sumBetWithdrawcashMoney = betWithdrawcashService.queryForObject(new Finder("select sum(a.money) from bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=2 and substring(a.audittime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumBetWithdrawcashMoney==null){
	    				sumBetWithdrawcashMoney=0.;
	    			}
	    			//卡充
//	    			//卡收
//	    			List<BetRechargecard> betRechargecardList = betRechargecardService.queryForList(new Finder("select a.money from bet_rechargecard a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.state=2 and substring(a.rechargetime,1,10)=:date order by a.id asc ").setParam("date", yesterday), BetRechargecard.class);
//	    			double sumBetRechargecard = 0d;//卡收总额
//	    			if(!betRechargecardList.isEmpty()){
//	    				for (BetRechargecard betRechargecard : betRechargecardList) {
//	    					sumBetRechargecard+=betRechargecard.getMoney();
//	    				}
//	    			}
//	    			sumBetRechargecard = Math.round(sumBetRechargecard*100)*0.01d;
//	    			//签到 金额
//	    			Integer sumBetScorerecordMoney = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=3 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Integer.class);
	    			Double sumBetScorerecordMoney =betSigninRewardService.queryForObject(new Finder("select sum(reward) from bet_signin_reward a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumBetScorerecordMoney==null){
	    				sumBetScorerecordMoney = 0.;
	    			}
	    			
	    			//总救济金
	    			Integer sumReliefScore = betReliefRecordService.queryForObject(new Finder("select sum(a.reliefscore) from bet_relief_record a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.date,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
	    			if(sumReliefScore==null){
	    				sumReliefScore=0;
	    			}
	    			//当日输赢返利
	    			Double sumDaywinorfailRebate = betDaywinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_daywinorfailrebate a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumDaywinorfailRebate==null){
	    				sumDaywinorfailRebate=0.;
	    			}
	    			//总排行返利
//	    			Double sumRankRebate = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=9 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Double.class);
	    			Double sumRankRebate = betRankMemberService.queryForObject(new Finder("select sum(award) from bet_rank_member a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and  a.state =1 and substring(a.receivetime,1,10)=:date  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumRankRebate==null){
	    				sumRankRebate=0.;
	    			}
	    			//红包
	    			Double sumRedRecord =  betRedenvelopeRecordService.queryForObject(new Finder("select sum(a.receivescore) from bet_redenvelope_record a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumRedRecord==null){
	    				sumRedRecord=0.;
	    			}
	    			//下线(推广返利)
	    			Double sumSubordinaterebate = betSubordinaterebateDetailService.queryForObject(new Finder("select sum(a.income) from bet_subordinaterebate_detail a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumSubordinaterebate==null){
	    				sumSubordinaterebate=0.;
	    			}
	    			//首冲返利
	    			Double firstrebate = betFirstrechargerebateService.queryForObject(new Finder("select sum(rebate) from bet_firstrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(firstrebate==null){
	    				firstrebate=0.;
	    			}
	    			//游戏输赢
//	    			Double sumGameWin = betBettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and substring(a.settlementtime,1,10)=:date ").setParam("date", yesterday), Double.class);
	    			Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumGameWin==null){
	    				sumGameWin=0.;
	    			}
	    			//投注额
//	    			Double sumBettingMoney = betBettingService.queryForObject(new Finder("select sum(a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("date", yesterday), Double.class);
	    			Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumBettingMoney==null){
	    				sumBettingMoney=0.;
	    			}
	    			//退佣
	    			Double betsumty = betBettingService.queryForObject(new Finder("select sum(memberty) from bet_betting where membertystate=1 and (agentid=:agentid or agentparentids like :aid) and substring(membertytime,1,10)=:membertytime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("membertytime", yesterday), Double.class);
	    			if(betsumty == null){
	    				betsumty =0.;
	    			}
	    			//单笔充值返利
	    			Double payrebate = betSinglerechargeService.queryForObject(new Finder("select sum(a.rebate) from bet_singlerecharge a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(payrebate == null){
	    				payrebate = 0.;
	    			}
	    			//当日充值返
	    			Double todayrebate = betTodayrechargerebateService.queryForObject(new Finder("select sum(a.reward) from bet_todayrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday),Double.class);
	    			if(todayrebate == null){
	    				todayrebate = 0.;
	    			}
	    			//注册送
	    			Double registersend = betRegisterRewardService.queryForObject(new Finder("select sum(a.reward) from bet_register_reward a  left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(registersend == null){
	    				registersend = 0.;
	    			}
	    			//昨日留存
	    			Double result = betReportformService.queryForObject(new Finder("select score from bet_agentreportform where agentid=:agentid and date=:date limit 1 ").setParam("agentid", agentid).setParam("date", before_yesterday), Double.class);
	    			if(result == null){
	    				result = 0.;
	    			}
	    			//周返利
	    			Double sumWeekwinorfailrebate = betWeekwinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_weekwinorfailrebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and a.state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumWeekwinorfailrebate==null){
	    				sumWeekwinorfailrebate=0.;
	    			}
	    			//转账
	    			Double sumtransferaccount = betTransferAccountsService.queryForObject(new Finder("select sum(a.transferaccountsscore) from bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumtransferaccount==null){
	    				sumtransferaccount=0.;
	    			}
	    			//代理提现
	    			Double sumagentwithdrawcash = betAgentwithdrawService.queryForObject(new Finder("select sum(money) from bet_agentwithdraw where  (agentid=:agentid or agentparentids like :aid) and substring(audittime,1,10)=:date and state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumagentwithdrawcash==null){
	    				sumagentwithdrawcash=0.;
	    			}
	    			//总福利
	    			Double allwelfare = sumDaywinorfailRebate+sumWeekwinorfailrebate+sumRankRebate+sumReliefScore+sumBetScorerecordMoney+todayrebate+firstrebate+sumSubordinaterebate+registersend+payrebate;
	    			//用户。游戏扣税
//	    			Double gks = betBettingService.queryForObject(new Finder("select sum(gks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(gks==null){
//	    				gks=0.;
//	    			}
//	    			Double mks = betBettingService.queryForObject(new Finder("select sum(mks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(mks==null){
//	    				mks=0.;
//	    			}
	    			
	    			
	    			BetReportform betReportform1 = new BetReportform();
	    			betReportform1.setDate(cal.getTime());
	    			betReportform1.setRegisternum(registNum);
	    			betReportform1.setRegistersend(registersend);
	    			betReportform1.setRecharge(sumBetGoldMoney);
	    			betReportform1.setWithdrawcash(sumBetWithdrawcashMoney);
	    			//betReportform.setCardrecycle(sumBetRechargecard);
	    			betReportform1.setCardrecycle(0d);
	    			betReportform1.setSignin(sumBetScorerecordMoney.intValue());
	    			betReportform1.setRelief(sumReliefScore);
	    			betReportform1.setDaywinorfailrebate(sumDaywinorfailRebate);
	    			betReportform1.setWeekwinorfailrebate(sumWeekwinorfailrebate);
//	    			betReportform.setDaywinorfailrebate(0d);
	    			betReportform1.setFirstrecharge(firstrebate);
	    			betReportform1.setRank(sumRankRebate);
	    			betReportform1.setRedpackage(sumRedRecord);
	    			betReportform1.setSubordinaterebate(sumSubordinaterebate);
	    			betReportform1.setWinorloss(sumGameWin);
	    			betReportform1.setScore(sumScore);
	    			betReportform1.setBettingmoney(sumBettingMoney);
	    			betReportform1.setTy(betsumty);
	    			betReportform1.setResult(result);
	    			betReportform1.setAllwelfare(allwelfare);
	    			betReportform1.setPayrebate(payrebate);
	    			betReportform1.setTodayrechargerebate(todayrebate);
	    			betReportform1.setTransferaccount(sumtransferaccount);
	    			betReportform1.setAgentwithdrawcash(sumagentwithdrawcash);
	    			betReportform1.setAgentid(agentid);
//	    			betReportform1.setScoree(sumScoree);
	    			betReportform1.setNoissuescore(sumScoree);
	    			betReportform1.setGamescore(sumgamescore);
	    			betReportform1.setBankscore(sumbankscore);
//	    			betReportform1.setAgentparentid(betAgent.getParentid());
//	    			betReportform1.setAgentparentids(betAgent.getParentids());
//	    			betReportform1.setMks(mks);
//	    			betReportform1.setGks(gks);
	    			
					
					betReportform1.setId(Integer.MAX_VALUE);
					if(datas==null){
						datas=new ArrayList<BetReportform>();
					}
					datas.add(0, betReportform1);
				}
				model.addAttribute("addtotalcount", 1);
				
				
			}else{
				datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid and  date>=:starttime and date<=:endtime ").setParam("agentid", agentid).setParam("starttime",startDate).setParam("endtime", endDate),page,BetReportform.class,betReportform);
				if("-1".equals(request.getParameter("show"))){
					model.addAttribute("show", -1);
				}else{
					model.addAttribute("show", 2);
				}
				
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				Date parse = new SimpleDateFormat("yyyy-MM-dd").parse(starttime);
				Date parse2 = new SimpleDateFormat("yyyy-MM-dd").parse(endtime);
				String early = DateFormatUtils.format(date, "yyyy-MM-dd 00:00:00");
				date = sdf.parse(early);
				if((date.equals(parse) || date.after(parse)) && date.equals(parse2) || date.before(parse2)){
					if(page.getPageIndex()==1){
						//用户留存
		    			Double sumScore = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		    			if(sumScore==null){
		    				sumScore=0.;
		    			}
		    			//不出票库存
		    			Double sumScoree = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and isissue=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		    			if(sumScoree==null){
		    				sumScoree=0.;
		    			}
		    			//出票用户游戏分库存
		    			Double sumgamescore = betRankMemberService.queryForObject(new Finder("select sum(gamescore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		    			if(sumgamescore==null){
		    				sumgamescore=0.;
		    			}
		    			//出票用户银行分库存
		    			Double sumbankscore = betRankMemberService.queryForObject(new Finder("select sum(bankscore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		    			if(sumbankscore==null){
		    				sumbankscore=0.;
		    			}
		    			//昨天的日期
		    			Calendar cal = Calendar.getInstance();
		    			String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
		    			//前天的日期
		    			Calendar cal1 = Calendar.getInstance();
		    			cal1.add(Calendar.DATE, -1);
		    			String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
		    			//注册人数
		    			Integer registNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and substring(signdate,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
		    			if(registNum==null) {
		    				registNum=0;
		    			}
		    			//充值统计
		    			Double sumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND (b.agentid=:agentid or b.agentparentids like :aid) AND a.state=2 and substring(a.rechargetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumBetGoldMoney==null){
		    				sumBetGoldMoney=0.;
		    			}
		    			//提现统计
		    			Double sumBetWithdrawcashMoney = betWithdrawcashService.queryForObject(new Finder("select sum(a.money) from bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=2 and substring(a.audittime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumBetWithdrawcashMoney==null){
		    				sumBetWithdrawcashMoney=0.;
		    			}
		    			//卡充
//		    			//卡收
//		    			List<BetRechargecard> betRechargecardList = betRechargecardService.queryForList(new Finder("select a.money from bet_rechargecard a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.state=2 and substring(a.rechargetime,1,10)=:date order by a.id asc ").setParam("date", yesterday), BetRechargecard.class);
//		    			double sumBetRechargecard = 0d;//卡收总额
//		    			if(!betRechargecardList.isEmpty()){
//		    				for (BetRechargecard betRechargecard : betRechargecardList) {
//		    					sumBetRechargecard+=betRechargecard.getMoney();
//		    				}
//		    			}
//		    			sumBetRechargecard = Math.round(sumBetRechargecard*100)*0.01d;
//		    			//签到 金额
//		    			Integer sumBetScorerecordMoney = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=3 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Integer.class);
		    			Double sumBetScorerecordMoney =betSigninRewardService.queryForObject(new Finder("select sum(reward) from bet_signin_reward a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumBetScorerecordMoney==null){
		    				sumBetScorerecordMoney = 0.;
		    			}
		    			
		    			//总救济金
		    			Integer sumReliefScore = betReliefRecordService.queryForObject(new Finder("select sum(a.reliefscore) from bet_relief_record a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.date,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
		    			if(sumReliefScore==null){
		    				sumReliefScore=0;
		    			}
		    			//当日输赢返利
		    			Double sumDaywinorfailRebate = betDaywinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_daywinorfailrebate a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumDaywinorfailRebate==null){
		    				sumDaywinorfailRebate=0.;
		    			}
		    			//总排行返利
//		    			Double sumRankRebate = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=9 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Double.class);
		    			Double sumRankRebate = betRankMemberService.queryForObject(new Finder("select sum(award) from bet_rank_member a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and  a.state =1 and substring(a.receivetime,1,10)=:date  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumRankRebate==null){
		    				sumRankRebate=0.;
		    			}
		    			//红包
		    			Double sumRedRecord =  betRedenvelopeRecordService.queryForObject(new Finder("select sum(a.receivescore) from bet_redenvelope_record a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumRedRecord==null){
		    				sumRedRecord=0.;
		    			}
		    			//下线(推广返利)
		    			Double sumSubordinaterebate = betSubordinaterebateDetailService.queryForObject(new Finder("select sum(a.income) from bet_subordinaterebate_detail a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumSubordinaterebate==null){
		    				sumSubordinaterebate=0.;
		    			}
		    			//首冲返利
		    			Double firstrebate = betFirstrechargerebateService.queryForObject(new Finder("select sum(rebate) from bet_firstrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(firstrebate==null){
		    				firstrebate=0.;
		    			}
		    			//游戏输赢
//		    			Double sumGameWin = betBettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and substring(a.settlementtime,1,10)=:date ").setParam("date", yesterday), Double.class);
		    			Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumGameWin==null){
		    				sumGameWin=0.;
		    			}
		    			//投注额
//		    			Double sumBettingMoney = betBettingService.queryForObject(new Finder("select sum(a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("date", yesterday), Double.class);
		    			Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumBettingMoney==null){
		    				sumBettingMoney=0.;
		    			}
		    			//退佣
		    			Double betsumty = betBettingService.queryForObject(new Finder("select sum(memberty) from bet_betting where membertystate=1 and (agentid=:agentid or agentparentids like :aid) and substring(membertytime,1,10)=:membertytime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("membertytime", yesterday), Double.class);
		    			if(betsumty == null){
		    				betsumty =0.;
		    			}
		    			//单笔充值返利
		    			Double payrebate = betSinglerechargeService.queryForObject(new Finder("select sum(a.rebate) from bet_singlerecharge a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(payrebate == null){
		    				payrebate = 0.;
		    			}
		    			//当日充值返
		    			Double todayrebate = betTodayrechargerebateService.queryForObject(new Finder("select sum(a.reward) from bet_todayrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday),Double.class);
		    			if(todayrebate == null){
		    				todayrebate = 0.;
		    			}
		    			//注册送
		    			Double registersend = betRegisterRewardService.queryForObject(new Finder("select sum(a.reward) from bet_register_reward a  left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("agentid", agentid).setParam("aid", "%,"+agentid+",%").setParam("date", yesterday), Double.class);
		    			if(registersend == null){
		    				registersend = 0.;
		    			}
		    			//昨日留存
		    			Double result = betReportformService.queryForObject(new Finder("select score from bet_agentreportform where agentid=:agentid and date=:date limit 1 ").setParam("agentid", agentid).setParam("date", before_yesterday), Double.class);
		    			if(result == null){
		    				result = 0.;
		    			}
		    			//周返利
		    			Double sumWeekwinorfailrebate = betWeekwinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_weekwinorfailrebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and a.state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumWeekwinorfailrebate==null){
		    				sumWeekwinorfailrebate=0.;
		    			}
		    			//转账
		    			Double sumtransferaccount = betTransferAccountsService.queryForObject(new Finder("select sum(a.transferaccountsscore) from bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumtransferaccount==null){
		    				sumtransferaccount=0.;
		    			}
		    			//代理提现
		    			Double sumagentwithdrawcash = betAgentwithdrawService.queryForObject(new Finder("select sum(money) from bet_agentwithdraw where  (agentid=:agentid or agentparentids like :aid) and substring(audittime,1,10)=:date and state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumagentwithdrawcash==null){
		    				sumagentwithdrawcash=0.;
		    			}
		    			//总福利
		    			Double allwelfare = sumDaywinorfailRebate+sumWeekwinorfailrebate+sumRankRebate+sumReliefScore+sumBetScorerecordMoney+todayrebate+firstrebate+sumSubordinaterebate+registersend+payrebate;
		    			//用户。游戏扣税
//		    			Double gks = betBettingService.queryForObject(new Finder("select sum(gks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(gks==null){
//		    				gks=0.;
//		    			}
//		    			Double mks = betBettingService.queryForObject(new Finder("select sum(mks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(mks==null){
//		    				mks=0.;
//		    			}
		    			
		    			
		    			BetReportform betReportform1 = new BetReportform();
		    			betReportform1.setDate(cal.getTime());
		    			betReportform1.setRegisternum(registNum);
		    			betReportform1.setRegistersend(registersend);
		    			betReportform1.setRecharge(sumBetGoldMoney);
		    			betReportform1.setWithdrawcash(sumBetWithdrawcashMoney);
		    			//betReportform.setCardrecycle(sumBetRechargecard);
		    			betReportform1.setCardrecycle(0d);
		    			betReportform1.setSignin(sumBetScorerecordMoney.intValue());
		    			betReportform1.setRelief(sumReliefScore);
		    			betReportform1.setDaywinorfailrebate(sumDaywinorfailRebate);
		    			betReportform1.setWeekwinorfailrebate(sumWeekwinorfailrebate);
//		    			betReportform.setDaywinorfailrebate(0d);
		    			betReportform1.setFirstrecharge(firstrebate);
		    			betReportform1.setRank(sumRankRebate);
		    			betReportform1.setRedpackage(sumRedRecord);
		    			betReportform1.setSubordinaterebate(sumSubordinaterebate);
		    			betReportform1.setWinorloss(sumGameWin);
		    			betReportform1.setScore(sumScore);
		    			betReportform1.setBettingmoney(sumBettingMoney);
		    			betReportform1.setTy(betsumty);
		    			betReportform1.setResult(result);
		    			betReportform1.setAllwelfare(allwelfare);
		    			betReportform1.setPayrebate(payrebate);
		    			betReportform1.setTodayrechargerebate(todayrebate);
		    			betReportform1.setTransferaccount(sumtransferaccount);
		    			betReportform1.setAgentwithdrawcash(sumagentwithdrawcash);
		    			betReportform1.setAgentid(agentid);
//		    			betReportform1.setScoree(sumScoree);
		    			betReportform1.setNoissuescore(sumScoree);
		    			betReportform1.setGamescore(sumgamescore);
		    			betReportform1.setBankscore(sumbankscore);
//		    			betReportform1.setAgentparentid(betAgent.getParentid());
//		    			betReportform1.setAgentparentids(betAgent.getParentids());
//		    			betReportform1.setMks(mks);
//		    			betReportform1.setGks(gks);
		    			
						
						betReportform1.setId(Integer.MAX_VALUE);
						if(datas==null){
							datas=new ArrayList<BetReportform>();
						}
						datas.add(0, betReportform1);
					}
					model.addAttribute("addtotalcount", 1);
				}
				
			}
			if(datas!=null){
				for (BetReportform betReportform2 : datas) {
					Double transferaccount = betReportform2.getTransferaccount();
					Double allwelfare = betReportform2.getAllwelfare();
					Double recharge = betReportform2.getRecharge();
					Double withdrawcash = betReportform2.getWithdrawcash();
					Double redpackage = betReportform2.getRedpackage();
					Double ty = betReportform2.getTy();
					Double winorloss = betReportform2.getWinorloss();
					Double result = betReportform2.getResult();
					if(transferaccount==null){
						transferaccount=0.;
					}
					if(allwelfare==null){
						allwelfare=0.;
					}
					if(recharge==null){
						recharge=0.;
					}
					if(withdrawcash==null){
						withdrawcash=0.;
					}
					if(redpackage==null){
						redpackage=0.;
					}
					if(ty==null){
						ty=0.;
					}
					if(winorloss==null){
						winorloss=0.;
					}
					if(result==null){
						result=0.;
					}
//					betReportform2.setDayscore(transferaccount+allwelfare+recharge-withdrawcash+redpackage+ty+winorloss+result);
					
					betReportform2.setDayscore(transferaccount+allwelfare+recharge*1000-withdrawcash*1000+redpackage+ty+winorloss+result);
					
				}
			}
			Calendar cal = Calendar.getInstance();
			cal.setTime(endDate);
			cal.add(Calendar.DATE, 1);
			Date eeeeee=cal.getTime();
			try {
				List<Map<String, Object>> untreatedbettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a where  (a.agentid=:agentid or a.agentparentids like :aid) and a.state=0 group by  DATE_FORMAT(a.bettingtime,:formate) having  bettingtime>=:starttime and bettingtime<:endtime ").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(untreatedbettinglist!=null){
					for (Map<String, Object> map : untreatedbettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setUntreatedbettingmoney(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//按投注时间统计已结算投注额、游戏输赢
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney,SUM(a.bettingscore) as bettingscore,SUM(a.bettingscore-a.bettingmoney) as bettingwin FROM soccer_allbetting a  where  (a.agentid=:agentid or a.agentparentids like :aid) and a.state=1 group by  DATE_FORMAT(a.bettingtime,:formate) having  bettingtime>=:starttime and bettingtime<:endtime  ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						double bettingscore1 = ((BigDecimal)map.get("bettingscore")).doubleValue();
						double bettingwin1 = ((BigDecimal)map.get("bettingwin")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setBettingtimebettingmoney(bettingmoney1);
									b.setBettingtimebettingscore(bettingscore1);
									b.setBettingtimebettingwin(bettingwin1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			//投注佣金
			try {
				
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("select DATE_FORMAT(b.bettingtime,:formate) as bettingtime,sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_agent hh on a.agentid=hh.agentid where (hh.agentid=:id or hh.parentids like :aid) group by  DATE_FORMAT(b.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("id", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingtimecommission = ((BigDecimal)map.get("bettingtimecommission")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setBettingtimecommission(bettingtimecommission);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户转账
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.time,:formate) as bettingtime,SUM(a.transferaccountsscore) as bettingmoney FROM bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.time,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuetransferscore(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户充值
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.rechargetime,:formate) as bettingtime,SUM(a.money) as bettingmoney FROM bet_gold a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.isissue=0 and a.state=2 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.rechargetime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebetgold(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户提现
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.audittime,:formate) as bettingtime,SUM(a.money) as bettingmoney FROM bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.isissue=0 and a.state=2 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.audittime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebetwithdrawcash(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户投注额
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2 group by  DATE_FORMAT(a.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebettingtimetotalbettingmoney(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			//不出票用户未结算
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state=0 group by DATE_FORMAT(a.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebettingtimeunsettlebettingmoney(bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			//不出票用户投注佣金
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("select DATE_FORMAT(b.bettingtime,:formate) as bettingtime,sum(a.commission) as bettingtimecommission from bet_commission a left join soccer_allbetting b on a.orderid=b.id left join bet_member mm on a.memberid2=mm.id2 left join bet_agent hh on a.agentid=hh.agentid where (hh.agentid=:id or hh.parentids like :aid) and mm.isissue=0 group by  DATE_FORMAT(b.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("id", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingtimecommission = ((BigDecimal)map.get("bettingtimecommission")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebettingtimecommission(bettingtimecommission);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			//不出票用户已结算
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney,SUM(a.bettingscore) as bettingscore,SUM(a.bettingscore-a.bettingmoney) as bettingwin FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state=1 group by  DATE_FORMAT(a.bettingtime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map : bettingtimebettinglist) {
						String bettingtime=(String)map.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
						double bettingscore1 = ((BigDecimal)map.get("bettingscore")).doubleValue();
						double bettingwin1 = ((BigDecimal)map.get("bettingwin")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									b.setNoissuebettingtimebettingmoney(bettingmoney1);
									b.setNoissuebettingtimebettingscore(bettingscore1);
									b.setNoissuebettingtimebettingwin(bettingwin1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			returnObject.setQueryBean(betReportform);
			returnObject.setPage(page);
			returnObject.setData(datas);
			Double gamewin = 0d;
			Double welfare = 0d;
			if(starttime=="0000-01-01" && endtime=="3000-01-01"){
				gamewin = betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid =:agentid ").setParam("agentid", agentid), Double.class);
				welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where agentid =:agentid ").setParam("agentid", agentid), Double.class);
			}else{
				if(!starttime.equals(endtime)){
					gamewin = betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid =:agentid and (date between :starttime and :endtime) ").setParam("agentid", agentid).setParam("starttime", starttime).setParam("endtime", endtime), Double.class);
					welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where agentid =:agentid and (date between :starttime and :endtime) ").setParam("agentid", agentid).setParam("starttime", starttime).setParam("endtime", endtime), Double.class);
				}else{
					gamewin = betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid =:agentid and date=:date").setParam("agentid", agentid).setParam("date", starttime), Double.class);
					welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where agentid =:agentid and date=:date ").setParam("agentid", agentid).setParam("date", starttime), Double.class);
					//welfare = betReportformService.queryForObject(new Finder("select sum(signin)+SUM(relief)+SUM(daywinorfailrebate)+SUM(firstrecharge)+SUM(rank)+SUM(redpackage)+SUM(subordinaterebate) from bet_agentreportform where agentid is null and date=:date ").setParam("date", starttime), Double.class);
				}
			}
			if(gamewin==null){
				gamewin=0.;
			}
			if(welfare==null){
				welfare=0.;
			}
			model.addAttribute("gamewin", gamewin);
			model.addAttribute("welfare", welfare);
			model.addAttribute("xs", 1);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			if(starttime=="0000-01-01"){
				starttime=null;
			}
			if(endtime=="3000-01-01"){
				endtime=null;
			}
			model.addAttribute("startDate", starttime);
			model.addAttribute("endDate", endtime);
			return listurl;
		}else if("2".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			String starttime = request.getParameter("starttime");
			String endtime = request.getParameter("endtime");
			if(StringUtils.isBlank(starttime)){
				starttime="0000-01-01";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="3000-01-01";
			}
			java.sql.Date startDate = java.sql.Date.valueOf(starttime);
			java.sql.Date endDate=java.sql.Date.valueOf(endtime);
			List<BetReportform> datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid=:agentid and date>=:starttime and date<=:endtime ").setParam("agentid", agentid).setParam("starttime",startDate).setParam("endtime", endDate),page,BetReportform.class,betReportform);
			returnObject.setQueryBean(betReportform);
			returnObject.setPage(page);
			returnObject.setData(datas);
			if(starttime=="0000-01-01"){
				startDate=null;
			}
			if(endtime=="3000-01-01"){
				endDate=null;
			}
			Double allresult = 0d;
			allresult= betReportformService.queryForObject(new Finder("select sum(result) from bet_agentreportform where  agentid=:agentid and date>=:starttime and date<=:endtime").setParam("agentid", agentid).setParam("starttime",startDate).setParam("endtime", endDate), Double.class);
			model.addAttribute("allresult", allresult);
			model.addAttribute("startDate", startDate);
			model.addAttribute("endDate", endDate);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return listurl;
		}else if("3".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			String date = request.getParameter("date");
			BetMember betMember = new BetMember();
			List<BetMember> datas=betMemberService.findListDataByFinder(new Finder("select * from bet_member where (agentid=:agentid or agentparentids like :aid) and isinternal=0 and substring(signdate,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetMember.class,betMember );
			returnObject.setQueryBean(betMember);
			returnObject.setPage(page);
			returnObject.setData(datas);
			
			model.addAttribute("signdate", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformregisterList";
		}else if("4".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			List<Map<String, Object>> idandbanktypelist = betPaymentInterfaceService.queryForList(new Finder("select banktype,id from bet_payment_interface  "));
			String date = request.getParameter("date");
			BetGold betGold = new BetGold();
			List<BetGold> datas=new ArrayList<>();
			if("1".equals(request.getParameter("virtualmember"))){
				datas=betGoldService.findListDataByFinder(new Finder("select  a.*,b.id2 as memberid2  from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.rechargetime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetGold.class,betGold);
				model.addAttribute("virtualmember", 1);
			}else{
				datas=betGoldService.findListDataByFinder(new Finder("select  a.*,b.id2 as memberid2  from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.rechargetime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetGold.class,betGold);
			}
			if(datas!=null){
				for (BetGold betGold2 : datas) {
//					BetMember betMember = betMemberService.findBetMemberById(betGold2.getMemberid());
//					betGold2.setMemberid2(betMember.getId2());
					if(idandbanktypelist!=null){
						for (Map<String, Object> map : idandbanktypelist) {
							if(map.get("id").equals(betGold2.getSource())){
								betGold2.setSource((String)map.get("banktype"));
								break;
							}else{
								betGold2.setSource(null);
							}
						}
					}
				}
			}
			
			returnObject.setQueryBean(betGold);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("rechargetime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformrechargeList";
		}else if("5".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetWithdrawcash betWithdrawcash = new BetWithdrawcash();
			List<BetWithdrawcash> datas=new ArrayList<BetWithdrawcash>();
			if("1".equals(request.getParameter("virtualmember"))){
				datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_withdrawcash a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.audittime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetWithdrawcash.class,betWithdrawcash);
				model.addAttribute("virtualmember", 1);
			}else{
				datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_withdrawcash a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.audittime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetWithdrawcash.class,betWithdrawcash);
			}
			returnObject.setQueryBean(betWithdrawcash);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("audittime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformwithdrawcashList";
		}else if("7".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetRedenvelopeRecord betRedenvelopeRecord = new BetRedenvelopeRecord();
			List<BetRedenvelopeRecord> datas=betRedenvelopeRecordService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.redenvelopecode,a.receivescore,a.receivetime,a.source,a.state,a.redenvelopeid,a.agentid,a.agentparentid,a.agentparentids from bet_redenvelope_record a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetRedenvelopeRecord.class,betRedenvelopeRecord);
			returnObject.setQueryBean(betRedenvelopeRecord);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("receivetime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformredenveloperecordList";
		}else  if("8".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetSubordinaterebateDetail betSubordinaterebateDetail = new BetSubordinaterebateDetail();
			List<BetSubordinaterebateDetail> datas=betSubordinaterebateDetailService.findListDataByFinder(new Finder("select  a.id,a.memberid2,a.nickname,a.recommendnum,a.sb,a.subordinatebet,a.sc,a.subordinaterecharge,a.sl,a.subordinatelose,a.income,a.subtime,a.receivetime,a.receiveip,a.state,a.agentid,a.agentparentid,a.agentparentids from bet_subordinaterebate_detail a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.subtime=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetSubordinaterebateDetail.class,betSubordinaterebateDetail);
//			for (BetSubordinaterebateDetail betSubordinaterebateDetail2 : datas) {
//				BetMember member = betMemberService.findBetMemberById(betSubordinaterebateDetail2.getSubordinateid());
//				betSubordinaterebateDetail2.setMemberid2(betSubordinaterebateDetail2.getMemberid2());
//				betSubordinaterebateDetail2.setSubordinateid2(betSubordinaterebateDetail2.getMemberid2());
//			}
			returnObject.setQueryBean(betSubordinaterebateDetail);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("subtime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformsubordinaterebateList";
		}else if("9".equals(request.getParameter("k"))){
			String gcname = request.getParameter("gcname");
			String memberid2 = request.getParameter("memberid2");
			if(StringUtils.isNoneEmpty(gcname)){
				gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request,"bettingtime","desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
				if(StringUtils.isNoneEmpty(memberid2)){
					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas=new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
						}
						
						soccer(datas);
						
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingList";
					}else if("北京单场".equals(gcname)){
						List<BjdcScheme> datas =new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
						}
						corebjdc(datas);
						return "/lottery/betreportform/betreportformbjdcbettingList";
					}else if("大乐透".equals(gcname)){
						List<LotteryScheme> datas =new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas = basketballSchemeService.queryForList(new Finder("select a.*,c.nickname as membernickname from lottery_scheme a left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),LotteryScheme.class,page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas = basketballSchemeService.queryForList(new Finder("select a.*,c.nickname as membernickname from lottery_scheme a left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),LotteryScheme.class,page);
						}
						superlotto(datas);
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformlotterybettingList";
					}else if("竞彩篮球".equals(gcname)){
						List<BasketballScheme> datas =new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
						}
						
						
						basketball(datas);
						
						
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbasketballschemeList";
						
						
					}else{
						List<BetBetting> datas=new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							model.addAttribute("virtualmember", 1);
						}else{
							datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						}
						
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList";
					}
				}else{
					page.setSort("desc");
					page.setOrder("bettingmoney");
					List<Map<String, Object>> datas =new ArrayList<>();
					if("1".equals(request.getParameter("virtualmember"))){
						datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,b.nickname,b.agentid,sum(a.bettingmoney) as bettingmoney from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state!=2 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
						model.addAttribute("virtualmember", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,b.nickname,b.agentid,sum(a.bettingmoney) as bettingmoney from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state!=2 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute("gcname", gcname);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
//					return "/lottery/betreportform/betreportformgameclassbettingList";
					return "/lottery/betreportform/betreportformmemberbettingList";
				}
			}else{
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("totallybettingmoney");
				page.setPageSize(50);
				page.setSort("desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
				List<Map<String, Object>> datas =new ArrayList<>();
				if("1".equals(request.getParameter("virtualmember"))){
					datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state!=2 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
					model.addAttribute("virtualmember", 1);
				}else{
					datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state!=2 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
				}
				
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//				if(datas!=null){
//					for (BetBetting betBetting2 : datas) {
//						betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//					}
//				}
				
				returnObject.setQueryBean(betBetting);
				returnObject.setPage(page);
				returnObject.setData(datas);
				model.addAttribute("bettingtime", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				return "/lottery/betreportform/betreportformgameclassbettingList";
//				return "/lottery/betreportform/betreportformbettingList";
			}
			
		}else if("10".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
//			if(page.getOrder()=="id"){
//				page.setOrder("a.id");
//			}
			page.setOrder("a."+page.getOrder());
			String date = request.getParameter("date");
			BetRankMember betRankMember = new BetRankMember();
			List<BetRankMember> datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.memberid,b.id2,a.nickname,a.score,a.gamemoney,a.bankmoney,a.freezingscore from bet_rank_member a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.date=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetRankMember.class,betRankMember);
			returnObject.setQueryBean(betRankMember);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("date", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformmemberList";
		}else if("11".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			if(page.getOrder()=="id"){
				page.setOrder("a.id");
			}
			String date = request.getParameter("date");
			BetBetting betBetting = new BetBetting();
			List<BetBetting> datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.bettingtime,a.gcname,a.name1,sum(a.bettingmoney) AS bettingmoney from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date GROUP BY a.name1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetBetting.class,betBetting);
			returnObject.setQueryBean(betBetting);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("bettingtime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformbettingmoneyList";
		}else if("12".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetDaywinorfailrebate betdaywinorfailrebate = new BetDaywinorfailrebate();
			List<BetDaywinorfailrebate> datas=betDaywinorfailrebateService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.nickname,a.dayscore,a.daybettingmoney,a.rebate,a.receivetime,a.receiveip,a.gamescore,a.bankscore,a.state,a.date,a.agentid,a.agentparentid,a.agentparentids from bet_daywinorfailrebate a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetDaywinorfailrebate.class,betdaywinorfailrebate);
			returnObject.setQueryBean(betdaywinorfailrebate);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("receivetime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformdaywinorfailList";
		}else if("13".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetReliefRecord betReliefRecord = new BetReliefRecord();
			List<BetReliefRecord> datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.id,a.memberid,a.memberid2,a.reliefscore,a.date,a.agentid,a.agentparentid,a.agentparentids from bet_relief_record a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.date,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetReliefRecord.class,betReliefRecord);
			returnObject.setQueryBean(betReliefRecord);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("date", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformreliefList";
		}else if("14".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetScorerecord betScorerecord = new BetScorerecord();
			List<BetScorerecord> datas=betScorerecordService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.time,a.content,a.originalscore,a.changescore,a.balance,a.state,a.remark,a.type,a.agentid,a.agentparentid,a.agentparentids from bet_scorerecord a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.time,1,10)=:date and type=:state ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date).setParam("state", 9),page,BetScorerecord.class,betScorerecord);
			returnObject.setQueryBean(betScorerecord);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("state", 9);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformrankList";
		}else if("15".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetScorerecord betScorerecord = new BetScorerecord();
			List<BetScorerecord> datas=betScorerecordService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.time,a.content,a.originalscore,a.changescore,a.balance,a.state,a.remark,a.type,a.agentid,a.agentparentid,a.agentparentids from bet_scorerecord a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.time,1,10)=:date and type=:state ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date).setParam("state", 3),page,BetScorerecord.class,betScorerecord);
			returnObject.setQueryBean(betScorerecord);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("state", 3);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformsigninList";
		}else if("16".equals(request.getParameter("k"))){
			//首冲送
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetFirstrechargerebate betFirstrechargerebate = new BetFirstrechargerebate();
			List<BetFirstrechargerebate> datas=betFirstrechargerebateService.findListDataByFinder(new Finder("select a.id,a.memberid2,a.nickname,a.recharge,a.bettingmoney,a.rebate,a.receivetime,a.receiveip,a.gamescore,a.bankscore,a.state,a.date,a.agentid,a.agentparentid,a.agentparentids from bet_firstrechargerebate a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetFirstrechargerebate.class,betFirstrechargerebate);
			returnObject.setQueryBean(betFirstrechargerebate);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("receivetime", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformfirstrechargeList";
		}else if("17".equals(request.getParameter("k"))){
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetRechargecard betRechargecard = new BetRechargecard();
			List<BetRechargecard> datas=betRechargecardService.findListDataByFinder(new Finder("select a.id,a.password,a.money,a.state,a.ip,a.time,a.memberid2,a.operator,a.validity,a.rechargetime,a.agentid,a.agentparentid,a.agentparentids,a.exchangeid2 from bet_rechargecard a LEFT JOIN bet_member b ON a.memberid2=b.id2 WHERE b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetRechargecard.class,betRechargecard);
			returnObject.setQueryBean(betRechargecard);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformrechargecardList";
		}else if("18".equals(request.getParameter("k"))){
			String starttime = request.getParameter("starttime");
			String endtime = request.getParameter("endtime");
			if(StringUtils.isBlank(starttime)){
				starttime="0000-01-01";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="3000-01-01";
			}
			Date date =  new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
			//
			Double gamewin= betReportformService.queryForObject(new Finder("select sum(winorloss) from bet_agentreportform where agentid=:agentid and substr(date,1,7)=:date ").setParam("agentid", agentid).setParam("date", sdf.format(date)), Double.class);
			model.addAttribute("gamewin", gamewin);
			Double welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where agentid=:agentid and substr(date,1,7)=:date ").setParam("agentid", agentid).setParam("date", sdf.format(date)), Double.class);
			model.addAttribute("welfare", welfare);
			
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			List<BetReportform> datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid and date between :starttime and :endtime ").setParam("agentid", agentid).setParam("starttime",starttime).setParam("endtime",endtime),page,BetReportform.class,betReportform);
				returnObject.setQueryBean(betReportform);
			returnObject.setPage(page);
			returnObject.setData(datas);
			
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			if(starttime=="0000-01-01"){
				starttime=null;
			}
			if(endtime=="3000-01-01"){
				endtime=null;
			}
			model.addAttribute("startDate", starttime);
			model.addAttribute("endDate", endtime);
			model.addAttribute("p", "1");
			return listurl;
		}else if("19".equals(request.getParameter("k"))){
			//退佣
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			List<BetBetting> datas = betBettingService.queryForList(new Finder("select a.bettingmoney,a.memberty,a.membertytime,b.id2 as memberid2 from bet_betting a left join bet_member b on a.memberid=b.id  where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.membertystate=1 and substring(a.membertytime,1,10)=:date order by b.id2").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), BetBetting.class);
			returnObject.setQueryBean(new BetBetting());
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformtymemberList";
		}else if("20".equals(request.getParameter("k"))){
			//总福利
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			List<BetReportform> data =new ArrayList<BetReportform>();
//			BetReportform data = null;
			if(new SimpleDateFormat("yyyy-MM-dd").format(new Date()).equals(date)){
				Double registersend = betRegisterRewardService.queryForObject(new Finder("select sum(reward) from bet_register_reward where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(registersend == null){
					registersend = 0.;
				}
				Double signinreward = betSigninRewardService.queryForObject(new Finder("select sum(reward) from bet_signin_reward where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid)  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(signinreward==null){
					signinreward=0.;
				}
				Double firstrebate = betFirstrechargerebateService.queryForObject(new Finder("select sum(rebate) from bet_firstrechargerebate where date=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(firstrebate==null){
					firstrebate=0.;
				}
				Double sumSubordinaterebate = betSubordinaterebateDetailService.queryForObject(new Finder("select sum(a.income) from bet_subordinaterebate_detail a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.subtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(sumSubordinaterebate==null){
					sumSubordinaterebate=0.;
				}
				Double payrebate = betSinglerechargeService.queryForObject(new Finder("select sum(rebate) from bet_singlerecharge where state=1 and substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(payrebate == null){
					payrebate = 0.;
				}
				Double todayrebate = betTodayrechargerebateService.queryForObject(new Finder("select sum(reward) from bet_todayrechargerebate where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("agentid", agentid).setParam("aid", "%,"+agentid+",%").setParam("date", date),Double.class);
				if(todayrebate == null){
					todayrebate = 0.;
				}
				Double relief = betReliefRecordService.queryForObject(new Finder("select sum(reliefscore) from bet_relief_record where substring(date,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(relief==null){
					relief=0.;
				}
				Double rankmember = betRankMemberService.queryForObject(new Finder("select sum(award) from bet_rank_member where state=1 and substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date),Double.class);
				if(rankmember==null){
					rankmember=0.;
				}
				Double weekwinorfail = betWeekwinorfailrebateService.queryForObject(new Finder("select sum(rebate) from bet_weekwinorfailrebate where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(weekwinorfail==null){
					weekwinorfail=0.;
				}
				Double daywinorfail = betDaywinorfailrebateService.queryForObject(new Finder("select sum(rebate) from bet_daywinorfailrebate  where substring(receivetime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), Double.class);
				if(daywinorfail==null){
					daywinorfail=0.;
				}
				BetReportform reportform = new BetReportform();
				reportform.setRegistersend(registersend);
				reportform.setFirstrecharge(firstrebate);
				reportform.setSubordinaterebate(sumSubordinaterebate);
				reportform.setPayrebate(payrebate);
				reportform.setTodayrechargerebate(todayrebate);
//				reportform.setAllwelfare(registersend+firstrebate+sumSubordinaterebate+payrebate+todayrebate);
				reportform.setSignin(signinreward.intValue());
				reportform.setRelief(relief.intValue());
				reportform.setRank(rankmember);
				reportform.setWeekwinorfailrebate(weekwinorfail);
				reportform.setDaywinorfailrebate(daywinorfail);
				data.add(reportform);
			}else{
				data = betReportformService.queryForList(new Finder("select * from bet_agentreportform where date=:date and agentid=:agentid  ").setParam("agentid", agentid).setParam("date", date), BetReportform.class);
			}
				returnObject.setData(data);
				model.addAttribute("time", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
			
//			List<BetReportform> datas = betReportformService.queryForList(new Finder("select * from bet_agentreportform where date=:date ").setParam("date", date), BetReportform.class);
//			returnObject.setQueryBean(new BetReportform());
//			returnObject.setPage(page);
//			returnObject.setData(datas);
//			model.addAttribute("time", date);
//			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformallwelfareList";
		}else if("21".equals(request.getParameter("k"))){
			//注册 送
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetRegisterReward betRegisterReward = new BetRegisterReward();
			List<BetRegisterReward> datas=betRegisterRewardService.findListDataByFinder(new Finder("select a.* from bet_register_reward a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetRegisterReward.class,betRegisterReward);
			returnObject.setQueryBean(betRegisterReward);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformRegisterSendList";
		}else if("22".equals(request.getParameter("k"))){
			//单笔充值返利
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetSinglerecharge betSinglerecharge = new BetSinglerecharge();
			List<BetSinglerecharge> datas=betSinglerechargeService.findListDataByFinder(new Finder("select a.* from bet_singlerecharge a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetSinglerecharge.class,betSinglerecharge);
			returnObject.setQueryBean(betSinglerecharge);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformSinglereChargeList";
		}else if("23".equals(request.getParameter("k"))){
			//当日充值返利
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetTodayrechargerebate betTodayrechargerebate = new BetTodayrechargerebate();
			List<BetTodayrechargerebate> datas=betTodayrechargerebateService.findListDataByFinder(new Finder("select a.* from bet_todayrechargerebate a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetTodayrechargerebate.class,betTodayrechargerebate);
			returnObject.setQueryBean(betTodayrechargerebate);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformTodayrechargereList";
		}else if("24".equals(request.getParameter("k"))){
			//周输赢返利
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetWeekwinorfailrebate betWeekwinorfailrebate = new BetWeekwinorfailrebate();
			List<BetWeekwinorfailrebate> datas=betWeekwinorfailrebateService.findListDataByFinder(new Finder("select a.* from bet_weekwinorfailrebate a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substr(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetWeekwinorfailrebate.class,betWeekwinorfailrebate);
			returnObject.setQueryBean(betWeekwinorfailrebate);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("time", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformWeekwinorfailrebateList";
		}else if("25".equals(request.getParameter("k"))){
			//转账分
			
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			String date = request.getParameter("date");
			BetTransferAccounts betTransferAccounts = new BetTransferAccounts();
			List<BetTransferAccounts> datas=new ArrayList<>();
			if("1".equals(request.getParameter("virtualmember"))){
				datas=betTransferAccountsService.findListDataByFinder(new Finder("select a.* from bet_transfer_accounts a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetTransferAccounts.class,betTransferAccounts);
				model.addAttribute("virtualmember", 1);
			}else{
				datas=betTransferAccountsService.findListDataByFinder(new Finder("select a.* from bet_transfer_accounts a LEFT JOIN bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetTransferAccounts.class,betTransferAccounts);
			}
			
			returnObject.setQueryBean(betTransferAccounts);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("date", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformbetTransferAccountsList";
		}else if("26".equals(request.getParameter("k"))){
			
//			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
//			Page page = newPage(request,"dayscore","desc");
//			if(!page.getOrder().contains("a.")){
//				page.setOrder("a."+page.getOrder());
//			}
////			page.setOrder("a.dayscore");
////			page.setSort("desc");
//			String date = request.getParameter("date");
//			BetRankMember betRankMember = new BetRankMember();
//			List<BetRankMember> datas=betWithdrawcashService.findListDataByFinder(new Finder("select a.memberid,b.id2,a.nickname,a.bettingmoney,a.dayscore,a.score,a.gamemoney,a.bankmoney,a.freezingscore from bet_rank_member a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and a.bettingmoney!=0 and a.date=:date ").setParam("date",date),page,BetRankMember.class,betRankMember);
//			returnObject.setQueryBean(betRankMember);
//			returnObject.setPage(page);
//			returnObject.setData(datas);
//			model.addAttribute("date", date);
//			model.addAttribute(GlobalStatic.returnDatas, returnObject);
//			return "/lottery/betreportform/betreportformmemberListxx";
			
			
			
			

			String gcname = request.getParameter("gcname");
			String memberid2 = request.getParameter("memberid2");
			if(StringUtils.isNoneEmpty(gcname)){
				gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request,"bettingtime","desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
				if(StringUtils.isNoneEmpty(memberid2)){
					if("竞彩足球".equals(gcname)){
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
						List<SoccerScheme> datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where (c.agentid=:agentid or c.agentparentids like :aid) and substr(a.settlementtime,1,10)=:date and a.memberid2=:memberid2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
						
						soccer(datas);
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
//						return "/lottery/betreportform/betreportformbettingList";
						return "/lottery/betreportform/betreportformsoccerbettingListxx";
					}else if("北京单场".equals(gcname)){
						gcbjdc(model, agentid, gcname, memberid2, returnObject, page, date, betBetting);
						return "/lottery/betreportform/betreportformbjdcbettingListxx";
					}else if("竞彩篮球".equals(gcname)){
						List<BasketballScheme> datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  (c.agentid=:agentid or c.agentparentids like :aid) and a.memberid2 = :memberid2  and substr(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
						
						basketball(datas);
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
						return "/lottery/betreportform/betreportformbasketballschemeListsettle";
						
						
					}else{
						List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//						if(datas!=null){
//							for (BetBetting betBetting2 : datas) {
//								betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//							}
//						}
						
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute("memberid2", memberid2);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformbettingList";
					}
				}else{
					page.setSort("desc");
					page.setOrder("bettingscore");
					List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from(select a.memberid2,b.agentid,b.nickname,sum(a.bettingmoney) as bettingmoney,sum(a.bettingscore-a.bettingmoney) as bettingscore from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where (b.agentid=:agentid or b.agentparentids like :aid) and substr(a.settlementtime,1,10)=:date and a.gcname=:gcname and a.state!=2 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute("gcname", gcname);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
//					return "/lottery/betreportform/betreportformgameclassbettingList";
					return "/lottery/betreportform/betreportformmemberbettingListxx";
				}
			}else{
				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				Page page = newPage(request);
				page.setOrder("result");
				page.setPageSize(50);
				page.setSort("desc");
				String date = request.getParameter("date");
				BetBetting betBetting = new BetBetting();
//				List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
				List<Map<String, Object>> datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) AND a.state!=2 and substr(a.settlementtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
//				List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//				if(datas!=null){
//					for (BetBetting betBetting2 : datas) {
//						betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//					}
//				}
				
				returnObject.setQueryBean(betBetting);
				returnObject.setPage(page);
				returnObject.setData(datas);
				model.addAttribute("bettingtime", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				return "/lottery/betreportform/betreportformgameclassbettingListxx";
//				return "/lottery/betreportform/betreportformbettingList";
			}
			
		
		}else if("27".equals(request.getParameter("k"))){
			//个人扣税
//			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
//			Page page = newPage(request);
//			page.setOrder("mks");
//			page.setSort("desc");
////			page.setOrder("a.dayscore");
////			page.setSort("desc");
//			String date = request.getParameter("date");
//			BetRankMember betRankMember = new BetRankMember();
//			List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select b.id2,b.nickname, sum(a.mks) as mks from bet_betting a left join bet_member b on a.memberid=b.id where b.agentid=:agentid and TO_DAYS(settlementtime)=TO_DAYS(:date)  group by memberid  HAVING sum(a.mks)>0").setParam("agentid", agentid).setParam("date", date), page);
//			returnObject.setQueryBean(betRankMember);
//			returnObject.setPage(page);
//			returnObject.setData(datas);
//			model.addAttribute("date", date);
//			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformmemberListmks";
		}else if("28".equals(request.getParameter("k"))){
			//游戏扣税
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Page page = newPage(request);
			page.setOrder("gks");
			page.setSort("desc");
//			page.setOrder("a.dayscore");
//			page.setSort("desc");
			String date = request.getParameter("date");
			BetRankMember betRankMember = new BetRankMember();
			List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select gcname, sum(a.gks) as gks from bet_betting a left join bet_member b on a.memberid=b.id where (b.agentid=:agentid or b.agentparentids like :aid) and TO_DAYS(settlementtime)=TO_DAYS(:date)   group by gcname HAVING sum(a.gks)>0 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date), page);
			returnObject.setQueryBean(betRankMember);
			returnObject.setPage(page);
			returnObject.setData(datas);
			model.addAttribute("date", date);
			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return "/lottery/betreportform/betreportformmemberListgks";
		}else if("29".equals(request.getParameter("k"))){
				//未结算
				String gcname = request.getParameter("gcname");
				String memberid2 = request.getParameter("memberid2");
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
					Page page = newPage(request,"bettingtime","desc");
					String date = request.getParameter("date");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
					if(StringUtils.isNoneEmpty(memberid2)){
						if("竞彩足球".equals(gcname)){
//							List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//							List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							List<SoccerScheme> datas=new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=0 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=0 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
							}
							
							soccer(datas);
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
//							return "/lottery/betreportform/betreportformgameclassbettingList";
//							return "/lottery/betreportform/betreportformbettingList";
							return "/lottery/betreportform/betreportformsoccerbettingListuntreated";
						}else if("北京单场".equals(gcname)){
							List<BjdcScheme> datas =new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
							}
							corebjdc(datas);
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
							return "/lottery/betreportform/betreportformbjdcbettingListuntreated";
						}else if("竞彩篮球".equals(gcname)){
							List<BasketballScheme> datas =new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
							}
							
							basketball(datas);
							
							
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
							return "/lottery/betreportform/betreportformbasketballschemeListuntreated";
							
						}else if("大乐透".equals(gcname)){
							List<LotteryScheme> datas =new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = basketballSchemeService.queryForList(new Finder("select a.*,c.nickname as membernickname from lottery_scheme a left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),LotteryScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = basketballSchemeService.queryForList(new Finder("select a.*,c.nickname as membernickname from lottery_scheme a left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),LotteryScheme.class,page);
							}
							
							superlotto(datas);
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
							return "/lottery/betreportform/betreportformlotteryschemeListuntreated";	
						}else{
							List<BetBetting> datas=new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
								model.addAttribute("virtualmember", 1);
							}else{
								datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							}
//							if(datas!=null){
//								for (BetBetting betBetting2 : datas) {
//									betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//								}
//							}
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
//							return "/lottery/betreportform/betreportformgameclassbettingList";
							return "/lottery/betreportform/betreportformbettingListuntreated";
						}
					}else{
						page.setSort("desc");
						page.setOrder("bettingmoney");
						List<Map<String, Object>> datas = new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=0 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=0 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
						}
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformmemberbettingListuntreated";
					}
				}else{
					ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
					Page page = newPage(request);
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					String date = request.getParameter("date");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas=new ArrayList<>();
					if("1".equals(request.getParameter("virtualmember"))){
						datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=0 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
						model.addAttribute("virtualmember", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=0 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
					}
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbettingListuntreated";
//					return "/lottery/betreportform/betreportformbettingList";
				}
				
			
			}else if("30".equals(request.getParameter("k"))){

				//已结算

				String gcname = request.getParameter("gcname");
				String memberid2 = request.getParameter("memberid2");
				if(StringUtils.isNoneEmpty(gcname)){
					gcname=new String(gcname.getBytes("iso-8859-1"),"utf-8");
					ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
					Page page = newPage(request,"bettingtime","desc");
					String date = request.getParameter("date");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname,a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gameclassid=:gameclassid ").setParam("gameclassid", gameclassid).setParam("date",date),page,BetBetting.class,betBetting);
					if(StringUtils.isNoneEmpty(memberid2)){
						if("竞彩足球".equals(gcname)){
//							List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
//							List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							List<SoccerScheme> datas=new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=1 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas= soccerSchemeService.queryForList(new Finder("select a.*,b.name as playmethod, c.nickname as membernickname from soccer_scheme a LEFT JOIN soccer_league_playmethod b on a.playmethodid = b.id left join bet_member c on a.memberid2=c.id2 where substr(a.bettingtime,1,10)=:date and a.memberid2=:memberid2 and a.situation=1 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date",date),SoccerScheme.class,page);
							}
							
							soccer(datas);
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
//							return "/lottery/betreportform/betreportformgameclassbettingList";
//							return "/lottery/betreportform/betreportformbettingList";
							return "/lottery/betreportform/betreportformsoccerbettingListtreated";
						}else if("北京单场".equals(gcname)){
							List<BjdcScheme> datas =new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from bjdc_scheme a LEFT JOIN bjdc_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=0 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BjdcScheme.class,page);
							}
							corebjdc(datas);
							return "/lottery/betreportform/betreportformbjdcbettingListtreated";
						}else if("竞彩篮球".equals(gcname)){
							List<BasketballScheme> datas =new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = basketballSchemeService.queryForList(new Finder("select a.*,b.name as playmethod,c.nickname as membernickname from basketball_scheme a LEFT JOIN basketball_league_playmethod b on a.playmethodid = b.id left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),BasketballScheme.class,page);
							}
							
							basketball(datas);
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
							return "/lottery/betreportform/betreportformbasketballschemeListtreated";
							
						}else if("大乐透".equals(gcname)){
							List<LotteryScheme> datas =new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas = basketballSchemeService.queryForList(new Finder("select a.*,c.nickname as membernickname from lottery_scheme a left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),LotteryScheme.class,page);
								model.addAttribute("virtualmember", 1);
							}else{
								datas = basketballSchemeService.queryForList(new Finder("select a.*,c.nickname as membernickname from lottery_scheme a left join bet_member c on c.id2=a.memberid2  where  a.memberid2 = :memberid2  and substr(a.bettingtime,1,10)=:date and a.situation=1 and c.isinternal=0 and c.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid)").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("date", date),LotteryScheme.class,page);
							}
							
							superlotto(datas);
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
							return "/lottery/betreportform/betreportformlotteryschemeListtreated";
															
						}else{
							List<BetBetting> datas=new ArrayList<>();
							if("1".equals(request.getParameter("virtualmember"))){
								datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
								model.addAttribute("virtualmember", 1);
							}else{
								datas=betBettingService.findListDataByFinder(new Finder("select c.*,d.name2 from (select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and b.id2=:memberid2 and a.state=0) c left join bet_gameplay d on c.gameplayid =d.id ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("memberid2", memberid2).setParam("gcname", gcname).setParam("date",date),page,BetBetting.class,betBetting);
							}
							
//							if(datas!=null){
//								for (BetBetting betBetting2 : datas) {
//									betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//								}
//							}
							
							returnObject.setQueryBean(betBetting);
							returnObject.setPage(page);
							returnObject.setData(datas);
							model.addAttribute("bettingtime", date);
							model.addAttribute("gcname", gcname);
							model.addAttribute("memberid2", memberid2);
							model.addAttribute(GlobalStatic.returnDatas, returnObject);
//							return "/lottery/betreportform/betreportformgameclassbettingList";
							return "/lottery/betreportform/betreportformbettingListtreated";
						}
					}else{
						page.setSort("desc");
						page.setOrder("bettingmoney");
						List<Map<String, Object>> datas =new ArrayList<>();
						if("1".equals(request.getParameter("virtualmember"))){
							datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,sum(a.bettingscore) as bettingscore,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=1 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
							model.addAttribute("virtualmember", 1);
						}else{
							datas = soccerAllbettingService.queryForList(new Finder("select c.*,d.account as agentaccount,d.nickname as agentnickname from (select a.memberid2,sum(a.bettingmoney) as bettingmoney,sum(a.bettingscore) as bettingscore,b.nickname as membernickname,b.agentid from soccer_allbetting a  left join bet_member b on a.memberid2 = b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) and substr(a.bettingtime,1,10)=:date and a.gcname=:gcname and a.state=1 group by a.memberid2) c left join bet_agent d on c.agentid=d.agentid  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", date).setParam("gcname", gcname),  page);
						}
						returnObject.setQueryBean(betBetting);
						returnObject.setPage(page);
						returnObject.setData(datas);
						model.addAttribute("bettingtime", date);
						model.addAttribute("gcname", gcname);
						model.addAttribute(GlobalStatic.returnDatas, returnObject);
//						return "/lottery/betreportform/betreportformgameclassbettingList";
						return "/lottery/betreportform/betreportformmemberbettingListtreated";
					}
				}else{
					ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
					Page page = newPage(request);
					page.setOrder("totallybettingmoney");
					page.setPageSize(50);
					page.setSort("desc");
					String date = request.getParameter("date");
					BetBetting betBetting = new BetBetting();
//					List<Map<String, Object>> datas = betBettingService.queryForList(new Finder("select  a.gcname, a.gameclassid, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore-a.bettingmoney) as result from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date group by gcname ").setParam("date",date), page);
					List<Map<String, Object>> datas =new ArrayList<>();
					if("1".equals(request.getParameter("virtualmember"))){
						datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=1 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
						model.addAttribute("virtualmember", 1);
					}else{
						datas = soccerAllbettingService.queryForList(new Finder("select  a.gcname, sum(a.bettingmoney) as totallybettingmoney,sum(a.bettingscore) as result from soccer_allbetting a LEFT JOIN bet_member b ON a.memberid2=b.id2 where b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=1 and substr(a.bettingtime,1,10)=:date group by gcname ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date), page);
					}
					
//					List<BetBetting> datas=betBettingService.findListDataByFinder(new Finder("select a.*,b.id2 as memberid2 from bet_betting a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND substr(a.bettingtime,1,10)=:date ").setParam("date",date),page,BetBetting.class,betBetting);
//					if(datas!=null){
//						for (BetBetting betBetting2 : datas) {
//							betBetting2.setBettingscore(betBetting2.getBettingscore()-betBetting2.getBettingmoney());
//						}
//					}
					
					returnObject.setQueryBean(betBetting);
					returnObject.setPage(page);
					returnObject.setData(datas);
					model.addAttribute("bettingtime", date);
					model.addAttribute(GlobalStatic.returnDatas, returnObject);
					return "/lottery/betreportform/betreportformgameclassbettingListtreated";
//					return "/lottery/betreportform/betreportformbettingList";
				}
			}else if("31".equals(request.getParameter("k"))){

				ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
				// ==构造分页请求
				Page page = newPage(request);
				// ==执行分页查询
				String date = request.getParameter("date");
				BetAgentwithdraw betMember = new BetAgentwithdraw();
				List<BetAgentwithdraw> datas=betAgentwithdrawService.findListDataByFinder(new Finder("select * from bet_agentwithdraw where (agentid=:agentid or agentparentids like :aid) and substring(audittime,1,10)=:date and state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetAgentwithdraw.class,betMember );
				returnObject.setQueryBean(betMember);
				returnObject.setPage(page);
				returnObject.setData(datas);
				
				model.addAttribute("date", date);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				return "/lottery/betreportform/betreportformagentwithdrawList";
			
			}else{
				//本周
				Date date =  new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
//				Double gamewin= betReportformService.queryForObject(new Finder("select SUM(winorloss) from bet_agentreportform where YEARWEEK(date_format(date,:ppp),1) = YEARWEEK(:date,1) and agentid=:agentid ").setParam("agentid", agentid).setParam("ppp", "%Y-%m-%d").setParam("date", new Date()), Double.class);
//				if(gamewin==null){
//					gamewin=0.;
//				}
//				
//				Double welfare = betReportformService.queryForObject(new Finder("select SUM(allwelfare) from bet_agentreportform where YEARWEEK(date_format(date,:ppp),1) = YEARWEEK(:date,1) and agentid=:agentid ").setParam("agentid", agentid).setParam("ppp", "%Y-%m-%d").setParam("date", new Date()), Double.class);
//				if(welfare==null){
//					welfare=0.;
//				}
//				
//				
//				
//				
//				model.addAttribute("gamewin", gamewin);
//				
//				
//				model.addAttribute("welfare", welfare);
//				SimpleDateFormat sdfdate = new SimpleDateFormat("yyyy-MM-dd");
//				Calendar cal11 = Calendar.getInstance();
//				cal11.add(Calendar.DATE, -1);
//				model.addAttribute("startDate", sdf.format(date)+"-01");
//				model.addAttribute("endDate", sdfdate.format(new Date()));
				SimpleDateFormat sdfdate = new SimpleDateFormat("yyyy-MM-dd");
				Calendar cal11 = Calendar.getInstance();
				cal11.add(Calendar.DATE, -1);
				Calendar cal = Calendar.getInstance();
				cal.set(cal.get(Calendar.YEAR), cal.get(Calendar.MONDAY), cal.get(Calendar.DAY_OF_MONTH), 0, 0, 0);
				cal.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY);
				Date startDate = cal.getTime();
				model.addAttribute("startDate", sdfdate.format(startDate));
				Calendar currentDate = new GregorianCalendar();   
				currentDate.setFirstDayOfWeek(Calendar.MONDAY);  
				currentDate.set(Calendar.HOUR_OF_DAY, 23);  
				currentDate.set(Calendar.MINUTE, 59);  
				currentDate.set(Calendar.SECOND, 59);  
				currentDate.set(Calendar.DAY_OF_WEEK, Calendar.SUNDAY);  
				model.addAttribute("endDate", sdfdate.format(currentDate.getTime()));
				ReturnDatas returnObject = listjson(request, model, betReportform);
				model.addAttribute(GlobalStatic.returnDatas, returnObject);
				model.addAttribute("p", "0");
				model.addAttribute("show", 0);
				model.addAttribute("agentparentid", betagent.getParentid());
				return listurl;
				
				
				
				
				
				
	
				
			
				
			}
	}



	private void basketball(List<BasketballScheme> datas) throws Exception {
		if(datas!=null){
			List<String> schemeids=new ArrayList<String>();
			schemeids.add("");
			for (BasketballScheme basketballScheme2 : datas) {
				String schemeid = basketballScheme2.getSchemeid();
				if(schemeid!=null){
					schemeids.add(basketballScheme2.getSchemeid());
				}
			}
			List<BasketballSchemeMatch> matchDatas= basketballSchemeMatchService.queryForList(new Finder("select a.schemeid,a.id,a.zid,a.dan,b.matchname,b.hometeam,b.awayteam,b.starttime,b.endtime,b.num,b.matchdate,c.score from basketball_scheme_match a LEFT JOIN basketball_league_arrange b on a.zid = b.zid left join basketball_league_result c on a.zid = c.zid where a.schemeid in (:schemeid)  order by a.id").setParam("schemeid", schemeids), BasketballSchemeMatch.class);
			if(matchDatas!=null){
				List<Map<String, Object>> resultMap = basketballSchemeMatchService.queryForList(new Finder("select a.oddsname,a.zid,a.odds,a.result,a.resultname,b.oddsrealname,b.betname,b.shortname,c.schemeid from basketball_order_content a LEFT JOIN basketball_league_playmethod_oddsname b on a.oddsname=b.oddsname LEFT JOIN basketball_order c on a.orderid = c.orderid where c.schemeid in (:schemeid)  group by c.schemeid, a.mid,a.oddsname").setParam("schemeid", schemeids));
				if(resultMap!=null){
					for (Map<String, Object> m : resultMap){
						String oddsname  = m.get("oddsname").toString();
						String oddsrealname = "";
					    
						if("big".equals(oddsname)||"small".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("basketballOdds_"+m.get("zid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
						    		BasketballLeagueOdds readValue = mmmm.readValue(cached2, BasketballLeagueOdds.class);
						    		String dxf = readValue.getDxf().toString();
						    		String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ dxf+")");
						    	}else{
						    		String dxf = basketballLeagueOddsService.queryForObject(new Finder("select dxf from basketball_league_odds where zid = :zid ").setParam("zid", m.get("zid").toString()), String.class);
							    	String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ dxf+")");
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								String dxf = basketballLeagueOddsService.queryForObject(new Finder("select dxf from basketball_league_odds where zid = :zid ").setParam("zid", m.get("zid").toString()), String.class);
						    	String betname = m.get("betname").toString();
						    	m.put("betname",betname+"("+ dxf+")");
							}
					    }
					    if("rfzs".equals(oddsname)||"rfzf".equals(oddsname)){
					    	try{
					    		String cached2 = (String)cached.getCached(("basketballOdds_"+m.get("zid").toString()).getBytes());
						    	if(cached2!=null){
						    		ObjectMapper mmmm=new ObjectMapper();
						    		BasketballLeagueOdds readValue = mmmm.readValue(cached2, BasketballLeagueOdds.class);
						    		String letpoints = readValue.getLetpoints().toString();
						    		String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}else{
						    		String letpoints = basketballLeagueOddsService.queryForObject(new Finder("select letpoints from basketball_league_odds where zid = :zid ").setParam("zid", m.get("zid").toString()), String.class);
							    	String betname = m.get("betname").toString();
							    	m.put("betname",betname+"("+ letpoints+")");
						    	}
					    	}catch (Exception e) {
								e.printStackTrace();
								String letpoints = basketballLeagueOddsService.queryForObject(new Finder("select letpoints from basketball_league_odds where zid = :zid ").setParam("zid", m.get("zid").toString()), String.class);
						    	String betname = m.get("betname").toString();
						    	m.put("betname",betname+"("+ letpoints+")");
							}
					    }
					}
				}
				for(BasketballSchemeMatch basketballMatch : matchDatas){
					String schemeid = basketballMatch.getSchemeid();
					String zid = basketballMatch.getZid();
					List<Map<String, Object>> mmm=new ArrayList<Map<String, Object>>();
					for (Map<String, Object> m : resultMap){
						if(schemeid.equals((String)m.get("schemeid"))&&zid.equals((String)m.get("zid"))){
							mmm.add(m);
						}
					}
					basketballMatch.setResultMap(mmm);
					basketballMatch.setNum(basketballWeekOfDate.getWeekOfDate(basketballMatch.getMatchdate())+basketballMatch.getNum());
				}
			}
			for(BasketballScheme scheme : datas){
				List<BasketballSchemeMatch> sss=new ArrayList<BasketballSchemeMatch>();
				if(matchDatas!=null){
					for(BasketballSchemeMatch schemeMatch : matchDatas){
						String schemeid = schemeMatch.getSchemeid();
						if(schemeid.equals(scheme.getSchemeid())){
							sss.add(schemeMatch);
						}
					}
				}
				scheme.setSchemecontent(sss);
			}
		}
	}
	
	
	
	
	/**
	 * 手机版接口充值，注册列表数据
	 * 
	 * @param request
	 * @param model
	 * @param betReportform
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/goldregisterlist")
	@ResponseBody
	public ReturnDatas goldregisterlist(HttpServletRequest request, Model model,BetReportform betReportform) 
			throws Exception {
		String agentid = SessionUser.getShiroUser().getAgentid();
		BetAgent betagent = betAgentService.queryForObject(new Finder("select *from bet_agent where agentid=:agentid and active=1 ").setParam("agentid", agentid), BetAgent.class);
		if("1".equals(request.getParameter("k"))){
			//上月 &搜索
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			Map<String,Object> map=new HashMap<>();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			String starttime = request.getParameter("starttime");
			String endtime = request.getParameter("endtime");
			SimpleDateFormat sdf1 =new SimpleDateFormat("yyyy-MM-dd");
			starttime=sdf1.format(new Date(new Date().getTime()-1000*60*60*24*6));
			endtime=sdf1.format(new Date());
			if(StringUtils.isBlank(starttime)){
				starttime="0000-01-01";
			}
			if(StringUtils.isBlank(endtime)){
				endtime="3000-01-01";
			}
			java.sql.Date startDate = java.sql.Date.valueOf(starttime);
			java.sql.Date endDate = java.sql.Date.valueOf(endtime);
			List<BetReportform> datas = null;
			if(starttime=="0000-01-01" && endtime=="3000-01-01"){
				datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid  ").setParam("agentid", agentid),page,BetReportform.class,betReportform);
				model.addAttribute("show", 2);
				
				if(page.getPageIndex()==1){
//					//用户留存
//	    			Double sumScore = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
//	    			if(sumScore==null){
//	    				sumScore=0.;
//	    			}
//	    			//不出票库存
//	    			Double sumScoree = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and isissue=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
//	    			if(sumScoree==null){
//	    				sumScoree=0.;
//	    			}
//	    			//出票用户游戏分库存
//	    			Double sumgamescore = betRankMemberService.queryForObject(new Finder("select sum(gamescore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
//	    			if(sumgamescore==null){
//	    				sumgamescore=0.;
//	    			}
//	    			//出票用户银行分库存
//	    			Double sumbankscore = betRankMemberService.queryForObject(new Finder("select sum(bankscore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
//	    			if(sumbankscore==null){
//	    				sumbankscore=0.;
//	    			}
	    			//昨天的日期
	    			Calendar cal = Calendar.getInstance();
	    			String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
	    			//前天的日期
	    			Calendar cal1 = Calendar.getInstance();
	    			cal1.add(Calendar.DATE, -1);
	    			String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
	    			//注册人数
	    			Integer registNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and substring(signdate,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
	    			if(registNum==null) {
	    				registNum=0;
	    			}
	    			//充值统计
	    			Double sumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND (b.agentid=:agentid or b.agentparentids like :aid) AND a.state=2 and substring(a.rechargetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
	    			if(sumBetGoldMoney==null){
	    				sumBetGoldMoney=0.;
	    			}
	    			//提现统计
//	    			Double sumBetWithdrawcashMoney = betWithdrawcashService.queryForObject(new Finder("select sum(a.money) from bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=2 and substring(a.audittime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumBetWithdrawcashMoney==null){
//	    				sumBetWithdrawcashMoney=0.;
//	    			}
	    			//卡充
//	    			//卡收
//	    			List<BetRechargecard> betRechargecardList = betRechargecardService.queryForList(new Finder("select a.money from bet_rechargecard a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.state=2 and substring(a.rechargetime,1,10)=:date order by a.id asc ").setParam("date", yesterday), BetRechargecard.class);
//	    			double sumBetRechargecard = 0d;//卡收总额
//	    			if(!betRechargecardList.isEmpty()){
//	    				for (BetRechargecard betRechargecard : betRechargecardList) {
//	    					sumBetRechargecard+=betRechargecard.getMoney();
//	    				}
//	    			}
//	    			sumBetRechargecard = Math.round(sumBetRechargecard*100)*0.01d;
//	    			//签到 金额
//	    			Integer sumBetScorerecordMoney = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=3 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Integer.class);
//	    			Double sumBetScorerecordMoney =betSigninRewardService.queryForObject(new Finder("select sum(reward) from bet_signin_reward a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumBetScorerecordMoney==null){
//	    				sumBetScorerecordMoney = 0.;
//	    			}
//	    			
//	    			//总救济金
//	    			Integer sumReliefScore = betReliefRecordService.queryForObject(new Finder("select sum(a.reliefscore) from bet_relief_record a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.date,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
//	    			if(sumReliefScore==null){
//	    				sumReliefScore=0;
//	    			}
//	    			//当日输赢返利
//	    			Double sumDaywinorfailRebate = betDaywinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_daywinorfailrebate a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumDaywinorfailRebate==null){
//	    				sumDaywinorfailRebate=0.;
//	    			}
//	    			//总排行返利
////	    			Double sumRankRebate = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=9 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Double.class);
//	    			Double sumRankRebate = betRankMemberService.queryForObject(new Finder("select sum(award) from bet_rank_member a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and  a.state =1 and substring(a.receivetime,1,10)=:date  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumRankRebate==null){
//	    				sumRankRebate=0.;
//	    			}
//	    			//红包
//	    			Double sumRedRecord =  betRedenvelopeRecordService.queryForObject(new Finder("select sum(a.receivescore) from bet_redenvelope_record a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumRedRecord==null){
//	    				sumRedRecord=0.;
//	    			}
//	    			//下线(推广返利)
//	    			Double sumSubordinaterebate = betSubordinaterebateDetailService.queryForObject(new Finder("select sum(a.income) from bet_subordinaterebate_detail a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumSubordinaterebate==null){
//	    				sumSubordinaterebate=0.;
//	    			}
//	    			//首冲返利
//	    			Double firstrebate = betFirstrechargerebateService.queryForObject(new Finder("select sum(rebate) from bet_firstrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(firstrebate==null){
//	    				firstrebate=0.;
//	    			}
//	    			//游戏输赢
////	    			Double sumGameWin = betBettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and substring(a.settlementtime,1,10)=:date ").setParam("date", yesterday), Double.class);
//	    			Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumGameWin==null){
//	    				sumGameWin=0.;
//	    			}
//	    			//投注额
////	    			Double sumBettingMoney = betBettingService.queryForObject(new Finder("select sum(a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("date", yesterday), Double.class);
//	    			Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumBettingMoney==null){
//	    				sumBettingMoney=0.;
//	    			}
//	    			//退佣
//	    			Double betsumty = betBettingService.queryForObject(new Finder("select sum(memberty) from bet_betting where membertystate=1 and (agentid=:agentid or agentparentids like :aid) and substring(membertytime,1,10)=:membertytime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("membertytime", yesterday), Double.class);
//	    			if(betsumty == null){
//	    				betsumty =0.;
//	    			}
//	    			//单笔充值返利
//	    			Double payrebate = betSinglerechargeService.queryForObject(new Finder("select sum(a.rebate) from bet_singlerecharge a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(payrebate == null){
//	    				payrebate = 0.;
//	    			}
//	    			//当日充值返
//	    			Double todayrebate = betTodayrechargerebateService.queryForObject(new Finder("select sum(a.reward) from bet_todayrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday),Double.class);
//	    			if(todayrebate == null){
//	    				todayrebate = 0.;
//	    			}
//	    			//注册送
//	    			Double registersend = betRegisterRewardService.queryForObject(new Finder("select sum(a.reward) from bet_register_reward a  left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(registersend == null){
//	    				registersend = 0.;
//	    			}
//	    			//昨日留存
//	    			Double result = betReportformService.queryForObject(new Finder("select score from bet_agentreportform where agentid=:agentid and date=:date limit 1 ").setParam("agentid", agentid).setParam("date", before_yesterday), Double.class);
//	    			if(result == null){
//	    				result = 0.;
//	    			}
//	    			//周返利
//	    			Double sumWeekwinorfailrebate = betWeekwinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_weekwinorfailrebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and a.state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumWeekwinorfailrebate==null){
//	    				sumWeekwinorfailrebate=0.;
//	    			}
//	    			//转账
//	    			Double sumtransferaccount = betTransferAccountsService.queryForObject(new Finder("select sum(a.transferaccountsscore) from bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumtransferaccount==null){
//	    				sumtransferaccount=0.;
//	    			}
//	    			//代理提现
//	    			Double sumagentwithdrawcash = betAgentwithdrawService.queryForObject(new Finder("select sum(money) from bet_agentwithdraw where  (agentid=:agentid or agentparentids like :aid) and substring(audittime,1,10)=:date and state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(sumagentwithdrawcash==null){
//	    				sumagentwithdrawcash=0.;
//	    			}
//	    			//总福利
//	    			Double allwelfare = sumDaywinorfailRebate+sumWeekwinorfailrebate+sumRankRebate+sumReliefScore+sumBetScorerecordMoney+todayrebate+firstrebate+sumSubordinaterebate+registersend+payrebate;
	    			//用户。游戏扣税
//	    			Double gks = betBettingService.queryForObject(new Finder("select sum(gks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(gks==null){
//	    				gks=0.;
//	    			}
//	    			Double mks = betBettingService.queryForObject(new Finder("select sum(mks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//	    			if(mks==null){
//	    				mks=0.;
//	    			}
	    			
	    			
	    			BetReportform betReportform1 = new BetReportform();
	    			betReportform1.setDate(cal.getTime());
	    			betReportform1.setRegisternum(registNum);
//	    			betReportform1.setRegistersend(registersend);
	    			betReportform1.setRecharge(sumBetGoldMoney);
//	    			betReportform1.setWithdrawcash(sumBetWithdrawcashMoney);
	    			//betReportform.setCardrecycle(sumBetRechargecard);
//	    			betReportform1.setCardrecycle(0d);
//	    			betReportform1.setSignin(sumBetScorerecordMoney.intValue());
//	    			betReportform1.setRelief(sumReliefScore);
//	    			betReportform1.setDaywinorfailrebate(sumDaywinorfailRebate);
//	    			betReportform1.setWeekwinorfailrebate(sumWeekwinorfailrebate);
//	    			betReportform.setDaywinorfailrebate(0d);
//	    			betReportform1.setFirstrecharge(firstrebate);
//	    			betReportform1.setRank(sumRankRebate);
//	    			betReportform1.setRedpackage(sumRedRecord);
//	    			betReportform1.setSubordinaterebate(sumSubordinaterebate);
//	    			betReportform1.setWinorloss(sumGameWin);
//	    			betReportform1.setScore(sumScore);
//	    			betReportform1.setBettingmoney(sumBettingMoney);
//	    			betReportform1.setTy(betsumty);
//	    			betReportform1.setResult(result);
//	    			betReportform1.setAllwelfare(allwelfare);
//	    			betReportform1.setPayrebate(payrebate);
//	    			betReportform1.setTodayrechargerebate(todayrebate);
//	    			betReportform1.setTransferaccount(sumtransferaccount);
//	    			betReportform1.setAgentwithdrawcash(sumagentwithdrawcash);
	    			betReportform1.setAgentid(agentid);
//	    			betReportform1.setScoree(sumScoree);
//	    			betReportform1.setNoissuescore(sumScoree);
//	    			betReportform1.setGamescore(sumgamescore);
//	    			betReportform1.setBankscore(sumbankscore);
//	    			betReportform1.setAgentparentid(betAgent.getParentid());
//	    			betReportform1.setAgentparentids(betAgent.getParentids());
//	    			betReportform1.setMks(mks);
//	    			betReportform1.setGks(gks);
	    			
					
					betReportform1.setId(Integer.MAX_VALUE);
					if(datas==null){
						datas=new ArrayList<BetReportform>();
					}
					datas.add(0, betReportform1);
				}
//				model.addAttribute("addtotalcount", 1);
				map.put("addtotalcount",1);
				
				
			}else{
				datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid and  date>=:starttime and date<=:endtime ").setParam("agentid", agentid).setParam("starttime",startDate).setParam("endtime", endDate),page,BetReportform.class,betReportform);
//				if("-1".equals(request.getParameter("show"))){
//					model.addAttribute("show", -1);
//				}else{
//					model.addAttribute("show", 2);
//				}
				
				Date date = new Date();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				Date parse = new SimpleDateFormat("yyyy-MM-dd").parse(starttime);
				Date parse2 = new SimpleDateFormat("yyyy-MM-dd").parse(endtime);
				String early = DateFormatUtils.format(date, "yyyy-MM-dd 00:00:00");
				date = sdf.parse(early);
				if((date.equals(parse) || date.after(parse)) && date.equals(parse2) || date.before(parse2)){
					if(page.getPageIndex()==1){
						//用户留存
//		    			Double sumScore = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
//		    			if(sumScore==null){
//		    				sumScore=0.;
//		    			}
//		    			//不出票库存
//		    			Double sumScoree = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and isissue=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
//		    			if(sumScoree==null){
//		    				sumScoree=0.;
//		    			}
//		    			//出票用户游戏分库存
//		    			Double sumgamescore = betRankMemberService.queryForObject(new Finder("select sum(gamescore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
//		    			if(sumgamescore==null){
//		    				sumgamescore=0.;
//		    			}
//		    			//出票用户银行分库存
//		    			Double sumbankscore = betRankMemberService.queryForObject(new Finder("select sum(bankscore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
//		    			if(sumbankscore==null){
//		    				sumbankscore=0.;
//		    			}
		    			//昨天的日期
		    			Calendar cal = Calendar.getInstance();
		    			String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
		    			//前天的日期
		    			Calendar cal1 = Calendar.getInstance();
		    			cal1.add(Calendar.DATE, -1);
		    			String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
		    			//注册人数
		    			Integer registNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and substring(signdate,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
		    			if(registNum==null) {
		    				registNum=0;
		    			}
		    			//充值统计
		    			Double sumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND (b.agentid=:agentid or b.agentparentids like :aid) AND a.state=2 and substring(a.rechargetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		    			if(sumBetGoldMoney==null){
		    				sumBetGoldMoney=0.;
		    			}
		    			//提现统计
//		    			Double sumBetWithdrawcashMoney = betWithdrawcashService.queryForObject(new Finder("select sum(a.money) from bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=2 and substring(a.audittime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumBetWithdrawcashMoney==null){
//		    				sumBetWithdrawcashMoney=0.;
//		    			}
		    			//卡充
//		    			//卡收
//		    			List<BetRechargecard> betRechargecardList = betRechargecardService.queryForList(new Finder("select a.money from bet_rechargecard a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.state=2 and substring(a.rechargetime,1,10)=:date order by a.id asc ").setParam("date", yesterday), BetRechargecard.class);
//		    			double sumBetRechargecard = 0d;//卡收总额
//		    			if(!betRechargecardList.isEmpty()){
//		    				for (BetRechargecard betRechargecard : betRechargecardList) {
//		    					sumBetRechargecard+=betRechargecard.getMoney();
//		    				}
//		    			}
//		    			sumBetRechargecard = Math.round(sumBetRechargecard*100)*0.01d;
//		    			//签到 金额
//		    			Integer sumBetScorerecordMoney = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=3 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Integer.class);
//		    			Double sumBetScorerecordMoney =betSigninRewardService.queryForObject(new Finder("select sum(reward) from bet_signin_reward a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumBetScorerecordMoney==null){
//		    				sumBetScorerecordMoney = 0.;
//		    			}
//		    			
//		    			//总救济金
//		    			Integer sumReliefScore = betReliefRecordService.queryForObject(new Finder("select sum(a.reliefscore) from bet_relief_record a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.date,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
//		    			if(sumReliefScore==null){
//		    				sumReliefScore=0;
//		    			}
//		    			//当日输赢返利
//		    			Double sumDaywinorfailRebate = betDaywinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_daywinorfailrebate a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumDaywinorfailRebate==null){
//		    				sumDaywinorfailRebate=0.;
//		    			}
//		    			//总排行返利
////		    			Double sumRankRebate = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=9 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Double.class);
//		    			Double sumRankRebate = betRankMemberService.queryForObject(new Finder("select sum(award) from bet_rank_member a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and  a.state =1 and substring(a.receivetime,1,10)=:date  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumRankRebate==null){
//		    				sumRankRebate=0.;
//		    			}
//		    			//红包
//		    			Double sumRedRecord =  betRedenvelopeRecordService.queryForObject(new Finder("select sum(a.receivescore) from bet_redenvelope_record a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumRedRecord==null){
//		    				sumRedRecord=0.;
//		    			}
//		    			//下线(推广返利)
//		    			Double sumSubordinaterebate = betSubordinaterebateDetailService.queryForObject(new Finder("select sum(a.income) from bet_subordinaterebate_detail a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumSubordinaterebate==null){
//		    				sumSubordinaterebate=0.;
//		    			}
//		    			//首冲返利
//		    			Double firstrebate = betFirstrechargerebateService.queryForObject(new Finder("select sum(rebate) from bet_firstrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(firstrebate==null){
//		    				firstrebate=0.;
//		    			}
//		    			//游戏输赢
////		    			Double sumGameWin = betBettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and substring(a.settlementtime,1,10)=:date ").setParam("date", yesterday), Double.class);
//		    			Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumGameWin==null){
//		    				sumGameWin=0.;
//		    			}
//		    			//投注额
////		    			Double sumBettingMoney = betBettingService.queryForObject(new Finder("select sum(a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("date", yesterday), Double.class);
//		    			Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumBettingMoney==null){
//		    				sumBettingMoney=0.;
//		    			}
//		    			//退佣
//		    			Double betsumty = betBettingService.queryForObject(new Finder("select sum(memberty) from bet_betting where membertystate=1 and (agentid=:agentid or agentparentids like :aid) and substring(membertytime,1,10)=:membertytime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("membertytime", yesterday), Double.class);
//		    			if(betsumty == null){
//		    				betsumty =0.;
//		    			}
//		    			//单笔充值返利
//		    			Double payrebate = betSinglerechargeService.queryForObject(new Finder("select sum(a.rebate) from bet_singlerecharge a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(payrebate == null){
//		    				payrebate = 0.;
//		    			}
//		    			//当日充值返
//		    			Double todayrebate = betTodayrechargerebateService.queryForObject(new Finder("select sum(a.reward) from bet_todayrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday),Double.class);
//		    			if(todayrebate == null){
//		    				todayrebate = 0.;
//		    			}
//		    			//注册送
//		    			Double registersend = betRegisterRewardService.queryForObject(new Finder("select sum(a.reward) from bet_register_reward a  left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("agentid", agentid).setParam("aid", "%,"+agentid+",%").setParam("date", yesterday), Double.class);
//		    			if(registersend == null){
//		    				registersend = 0.;
//		    			}
//		    			//昨日留存
//		    			Double result = betReportformService.queryForObject(new Finder("select score from bet_agentreportform where agentid=:agentid and date=:date limit 1 ").setParam("agentid", agentid).setParam("date", before_yesterday), Double.class);
//		    			if(result == null){
//		    				result = 0.;
//		    			}
//		    			//周返利
//		    			Double sumWeekwinorfailrebate = betWeekwinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_weekwinorfailrebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and a.state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumWeekwinorfailrebate==null){
//		    				sumWeekwinorfailrebate=0.;
//		    			}
//		    			//转账
//		    			Double sumtransferaccount = betTransferAccountsService.queryForObject(new Finder("select sum(a.transferaccountsscore) from bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumtransferaccount==null){
//		    				sumtransferaccount=0.;
//		    			}
//		    			//代理提现
//		    			Double sumagentwithdrawcash = betAgentwithdrawService.queryForObject(new Finder("select sum(money) from bet_agentwithdraw where  (agentid=:agentid or agentparentids like :aid) and substring(audittime,1,10)=:date and state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(sumagentwithdrawcash==null){
//		    				sumagentwithdrawcash=0.;
//		    			}
//		    			//总福利
//		    			Double allwelfare = sumDaywinorfailRebate+sumWeekwinorfailrebate+sumRankRebate+sumReliefScore+sumBetScorerecordMoney+todayrebate+firstrebate+sumSubordinaterebate+registersend+payrebate;
		    			//用户。游戏扣税
//		    			Double gks = betBettingService.queryForObject(new Finder("select sum(gks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(gks==null){
//		    				gks=0.;
//		    			}
//		    			Double mks = betBettingService.queryForObject(new Finder("select sum(mks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//		    			if(mks==null){
//		    				mks=0.;
//		    			}
		    			
		    			
		    			BetReportform betReportform1 = new BetReportform();
		    			betReportform1.setDate(cal.getTime());
		    			betReportform1.setRegisternum(registNum);
		    			betReportform1.setRecharge(sumBetGoldMoney);
		    			betReportform1.setAgentid(agentid);
						betReportform1.setId(Integer.MAX_VALUE);
						if(datas==null){
							datas=new ArrayList<BetReportform>();
						}
						datas.add(0, betReportform1);
					}
					map.put("addtotalcount", 1);
				}
				
			}
			Calendar cal = Calendar.getInstance();
			cal.setTime(endDate);
			cal.add(Calendar.DATE, 1);
			Date eeeeee=cal.getTime();
			//不出票用户充值
			try {
				List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.rechargetime,:formate) as bettingtime,SUM(a.money) as bettingmoney FROM bet_gold a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.isissue=0 and a.state=2 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.rechargetime,:formate) having bettingtime>=:starttime and bettingtime<:endtime ").setParam("ppp", "%Y-%m-%d").setParam("starttime",startDate).setParam("endtime", eeeeee).setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
				if(bettingtimebettinglist!=null){
					for (Map<String, Object> map11 : bettingtimebettinglist) {
						String bettingtime=(String)map11.get("bettingtime");
						double bettingmoney1 = ((BigDecimal)map11.get("bettingmoney")).doubleValue();
						if(datas!=null){
							for (BetReportform b : datas) {
								if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
									
									b.setRecharge(b.getRecharge()-bettingmoney1);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			returnObject.setQueryBean(betReportform);
			returnObject.setPage(page);
			model.addAttribute("xs", 1);
			if(starttime=="0000-01-01"){
				starttime=null;
			}
			if(endtime=="3000-01-01"){
				endtime=null;
			}
//			model.addAttribute("startDate", starttime);
			map.put("startDate", starttime);
//			model.addAttribute("endDate", endtime);
			map.put("endDate", endtime);
			map.put("data", datas);
			returnObject.setData(map);
			return returnObject;
//			return listurl;
		}else if("2".equals(request.getParameter("k"))){
			Map<String ,Object> mppp=new HashMap<>();
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			
			Date beginDayOfWeek = org.springrain.lottery.utils.DateUtils.getBeginDayOfWeek();
			Date endDayOfWeek =new Date(org.springrain.lottery.utils.DateUtils.getEndDayOfWeek().getTime()+24*3600*1000);
			//注册人数本周
			Integer weekregistNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and signdate>=:starttime and signdate<:endtime and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("starttime", beginDayOfWeek).setParam("endtime", endDayOfWeek), Integer.class);
			if(weekregistNum==null) {
				weekregistNum=0;
			}
			//充值统计本周
			Double weeksumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND b.isissue=1 AND (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=2 and rechargetime>=:starttime and rechargetime<:endtime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("starttime", beginDayOfWeek).setParam("endtime", endDayOfWeek), Double.class);
			if(weeksumBetGoldMoney==null){
				weeksumBetGoldMoney=0.;
			}
			
			Date beginDayOfMonth = org.springrain.lottery.utils.DateUtils.getBeginDayOfMonth();
			Date endDayOfMonth = new Date(org.springrain.lottery.utils.DateUtils.getEndDayOfMonth().getTime()+24*3600*1000);
			//注册人数本月
			Integer monthregistNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and signdate>=:starttime and signdate<:endtime and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("starttime", beginDayOfMonth).setParam("endtime", endDayOfMonth), Integer.class);
			if(monthregistNum==null) {
				monthregistNum=0;
			}
			//充值统计本月
			Double monthsumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND b.isissue=1 AND (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=2 and rechargetime>=:starttime and rechargetime<:endtime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("starttime", beginDayOfMonth).setParam("endtime", endDayOfMonth), Double.class);
			if(monthsumBetGoldMoney==null){
				monthsumBetGoldMoney=0.;
			}
			
			Date beginDayOfYear = org.springrain.lottery.utils.DateUtils.getBeginDayOfYear();
			Date endDayOfYear = new Date(org.springrain.lottery.utils.DateUtils.getEndDayOfYear().getTime()+24*3600*1000);
			//注册人数本年
			Integer yearregistNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and signdate>=:starttime and signdate<:endtime and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("starttime", beginDayOfYear).setParam("endtime", endDayOfYear), Integer.class);
			if(yearregistNum==null) {
				yearregistNum=0;
			}
			//充值统计本年
			Double yearsumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND b.isissue=1 AND (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=2 and rechargetime>=:starttime and rechargetime<:endtime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("starttime", beginDayOfYear).setParam("endtime", endDayOfYear), Double.class);
			if(yearsumBetGoldMoney==null){
				yearsumBetGoldMoney=0.;
			}
			//注册人数所有
			Integer allregistNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("starttime", beginDayOfYear).setParam("endtime", endDayOfYear), Integer.class);
			if(yearregistNum==null) {
				yearregistNum=0;
			}
			//充值统计所有
			Double allsumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND b.isissue=1 AND (a.agentid=:agentid or a.agentparentids like :aid) AND a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("starttime", beginDayOfYear).setParam("endtime", endDayOfYear), Double.class);
			if(yearsumBetGoldMoney==null){
				yearsumBetGoldMoney=0.;
			}
			mppp.put("weekregistNum", weekregistNum);
			mppp.put("weeksumBetGoldMoney", weeksumBetGoldMoney);
			mppp.put("monthregistNum", monthregistNum);
			mppp.put("monthsumBetGoldMoney", monthsumBetGoldMoney);
			mppp.put("yearregistNum", yearregistNum);
			mppp.put("yearsumBetGoldMoney", yearsumBetGoldMoney);
			mppp.put("allregistNum", allregistNum);
			mppp.put("allsumBetGoldMoney", allsumBetGoldMoney);
			returnObject.setData(mppp);
			return returnObject;
		}else if("3".equals(request.getParameter("k"))){
			Map<String ,Object> mppp=new HashMap<>();
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			String date = request.getParameter("date");
			BetMember betMember = new BetMember();
			List<BetMember> datas=betMemberService.findListDataByFinder(new Finder("select * from bet_member where (agentid=:agentid or agentparentids like :aid) and isinternal=0 and substring(signdate,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetMember.class,betMember );
			returnObject.setQueryBean(betMember);
			returnObject.setPage(page);
//			returnObject.setData(datas);
			mppp.put("data", datas);
			mppp.put("date", date);
			returnObject.setData(mppp);
//			model.addAttribute("signdate", date);
//			model.addAttribute(GlobalStatic.returnDatas, returnObject);
			return returnObject;
//			return "/lottery/betreportform/betreportformregisterList";
		}else if("4".equals(request.getParameter("k"))){
			Map<String,Object> mppp=new HashMap<>();
			ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
			// ==构造分页请求
			Page page = newPage(request);
			// ==执行分页查询
			List<Map<String, Object>> idandbanktypelist = betPaymentInterfaceService.queryForList(new Finder("select banktype,id from bet_payment_interface  "));
			String date = request.getParameter("date");
			BetGold betGold = new BetGold();
			List<BetGold> datas=new ArrayList<>();
			if("1".equals(request.getParameter("virtualmember"))){
				datas=betGoldService.findListDataByFinder(new Finder("select  a.*,b.id2 as memberid2  from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.rechargetime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetGold.class,betGold);
				model.addAttribute("virtualmember", 1);
			}else{
				datas=betGoldService.findListDataByFinder(new Finder("select  a.*,b.id2 as memberid2  from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id WHERE b.isinternal=0 and b.isissue=1 and (a.agentid=:agentid or a.agentparentids like :aid) AND substr(a.rechargetime,1,10)=:date and a.state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date",date),page,BetGold.class,betGold);
			}
			if(datas!=null){
				for (BetGold betGold2 : datas) {
//					BetMember betMember = betMemberService.findBetMemberById(betGold2.getMemberid());
//					betGold2.setMemberid2(betMember.getId2());
					if(idandbanktypelist!=null){
						for (Map<String, Object> map : idandbanktypelist) {
							if(map.get("id").equals(betGold2.getSource())){
								betGold2.setSource((String)map.get("banktype"));
								break;
							}else{
								betGold2.setSource(null);
							}
						}
					}
				}
			}
			
			returnObject.setQueryBean(betGold);
			returnObject.setPage(page);
//			returnObject.setData(datas);
			model.addAttribute("rechargetime", date);
			mppp.put("date", date);
			mppp.put("data", datas);
			returnObject.setData(mppp);
			return returnObject;
//			model.addAttribute(GlobalStatic.returnDatas, returnObject);
//			return "/lottery/betreportform/betreportformrechargeList";
		}else{
			return null;
		}
	}
	
	/**
	 * json数据,为APP提供数据
	 * 
	 * @param request
	 * @param model
	 * @param betReportform
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/list/json")
	public @ResponseBody
	ReturnDatas listjson(HttpServletRequest request, Model model,BetReportform betReportform) throws Exception{
		String agentid = SessionUser.getShiroUser().getAgentid();
		ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
		// ==构造分页请求
		Page page = newPage(request);
		page.setPageSize(50);
		// ==执行分页查询
		List<BetReportform> datas=betReportformService.findListDataByFinder(new Finder("select*from bet_agentreportform where agentid =:agentid and  YEARWEEK(date_format(date,:ppp),1) = YEARWEEK(:date,1)  ").setParam("agentid", agentid).setParam("ppp", "%Y-%m-%d").setParam("date", new Date()),page,BetReportform.class,betReportform);
		
		
		
		
		
		//用户留存
		Double sumScore = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		if(sumScore==null){
			sumScore=0.;
		}
		//不出票库存
		Double sumScoree = betRankMemberService.queryForObject(new Finder("select sum(score) from bet_member where isinternal=0 and isissue=0 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		if(sumScoree==null){
			sumScoree=0.;
		}
		//出票用户游戏分库存
		Double sumgamescore = betRankMemberService.queryForObject(new Finder("select sum(gamescore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		if(sumgamescore==null){
			sumgamescore=0.;
		}
		//出票用户银行分库存
		Double sumbankscore = betRankMemberService.queryForObject(new Finder("select sum(bankscore) from bet_member where isinternal=0 and isissue=1 and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid), Double.class);
		if(sumbankscore==null){
			sumbankscore=0.;
		}
		//昨天的日期
		Calendar cal = Calendar.getInstance();
		String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal.getTime());
		//前天的日期
		Calendar cal1 = Calendar.getInstance();
		cal1.add(Calendar.DATE, -1);
		String before_yesterday = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime());
		//注册人数
		Integer registNum = betMemberService.queryForObject(new Finder("select count(*) from bet_member where isinternal=0 and substring(signdate,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
		if(registNum==null) {
			registNum=0;
		}
		//充值统计
		Double sumBetGoldMoney = betGoldService.queryForObject(new Finder("select sum(a.money) from bet_gold a LEFT JOIN bet_member b ON a.memberid=b.id where b.isinternal=0 AND (b.agentid=:agentid or b.agentparentids like :aid) AND a.state=2 and substring(a.rechargetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumBetGoldMoney==null){
			sumBetGoldMoney=0.;
		}
		//提现统计
		Double sumBetWithdrawcashMoney = betWithdrawcashService.queryForObject(new Finder("select sum(a.money) from bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=2 and substring(a.audittime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumBetWithdrawcashMoney==null){
			sumBetWithdrawcashMoney=0.;
		}
		//卡充
//		//卡收
//		List<BetRechargecard> betRechargecardList = betRechargecardService.queryForList(new Finder("select a.money from bet_rechargecard a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.state=2 and substring(a.rechargetime,1,10)=:date order by a.id asc ").setParam("date", yesterday), BetRechargecard.class);
//		double sumBetRechargecard = 0d;//卡收总额
//		if(!betRechargecardList.isEmpty()){
//			for (BetRechargecard betRechargecard : betRechargecardList) {
//				sumBetRechargecard+=betRechargecard.getMoney();
//			}
//		}
//		sumBetRechargecard = Math.round(sumBetRechargecard*100)*0.01d;
//		//签到 金额
//		Integer sumBetScorerecordMoney = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=3 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Integer.class);
		Double sumBetScorerecordMoney =betSigninRewardService.queryForObject(new Finder("select sum(reward) from bet_signin_reward a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumBetScorerecordMoney==null){
			sumBetScorerecordMoney = 0.;
		}
		
		//总救济金
		Integer sumReliefScore = betReliefRecordService.queryForObject(new Finder("select sum(a.reliefscore) from bet_relief_record a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.date,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Integer.class);
		if(sumReliefScore==null){
			sumReliefScore=0;
		}
		//当日输赢返利
		Double sumDaywinorfailRebate = betDaywinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_daywinorfailrebate a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumDaywinorfailRebate==null){
			sumDaywinorfailRebate=0.;
		}
		//总排行返利
//		Double sumRankRebate = betScorerecordService.queryForObject(new Finder("select sum(a.changescore) from bet_scorerecord a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and a.type=9 and substring(a.time,1,10)=:date ").setParam("date", yesterday), Double.class);
		Double sumRankRebate = betRankMemberService.queryForObject(new Finder("select sum(award) from bet_rank_member a left join bet_member b on a.memberid=b.id where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and  a.state =1 and substring(a.receivetime,1,10)=:date  ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumRankRebate==null){
			sumRankRebate=0.;
		}
		//红包
		Double sumRedRecord =  betRedenvelopeRecordService.queryForObject(new Finder("select sum(a.receivescore) from bet_redenvelope_record a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumRedRecord==null){
			sumRedRecord=0.;
		}
		//下线(推广返利)
		Double sumSubordinaterebate = betSubordinaterebateDetailService.queryForObject(new Finder("select sum(a.income) from bet_subordinaterebate_detail a left join bet_member b on a.memberid2=b.id2 where a.state=1 and b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumSubordinaterebate==null){
			sumSubordinaterebate=0.;
		}
		//首冲返利
		Double firstrebate = betFirstrechargerebateService.queryForObject(new Finder("select sum(rebate) from bet_firstrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(firstrebate==null){
			firstrebate=0.;
		}
		//游戏输赢
//		Double sumGameWin = betBettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and substring(a.settlementtime,1,10)=:date ").setParam("date", yesterday), Double.class);
		Double sumGameWin = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingscore-a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.settlementtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumGameWin==null){
			sumGameWin=0.;
		}
		//投注额
//		Double sumBettingMoney = betBettingService.queryForObject(new Finder("select sum(a.bettingmoney) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("date", yesterday), Double.class);
		Double sumBettingMoney = soccerAllbettingService.queryForObject(new Finder("select sum(a.bettingmoney) from soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state!=2 and substring(a.bettingtime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumBettingMoney==null){
			sumBettingMoney=0.;
		}
		//退佣
		Double betsumty = betBettingService.queryForObject(new Finder("select sum(memberty) from bet_betting where membertystate=1 and (agentid=:agentid or agentparentids like :aid) and substring(membertytime,1,10)=:membertytime ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("membertytime", yesterday), Double.class);
		if(betsumty == null){
			betsumty =0.;
		}
		//单笔充值返利
		Double payrebate = betSinglerechargeService.queryForObject(new Finder("select sum(a.rebate) from bet_singlerecharge a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(payrebate == null){
			payrebate = 0.;
		}
		//当日充值返
		Double todayrebate = betTodayrechargerebateService.queryForObject(new Finder("select sum(a.reward) from bet_todayrechargerebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and a.state=1 and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday),Double.class);
		if(todayrebate == null){
			todayrebate = 0.;
		}
		//注册送
		Double registersend = betRegisterRewardService.queryForObject(new Finder("select sum(a.reward) from bet_register_reward a  left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(registersend == null){
			registersend = 0.;
		}
		//昨日留存
		Double result = betReportformService.queryForObject(new Finder("select score from bet_agentreportform where agentid=:agentid and date=:date limit 1 ").setParam("agentid", agentid).setParam("date", before_yesterday), Double.class);
		if(result == null){
			result = 0.;
		}
		//周返利
		Double sumWeekwinorfailrebate = betWeekwinorfailrebateService.queryForObject(new Finder("select sum(a.rebate) from bet_weekwinorfailrebate a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.receivetime,1,10)=:date and a.state=1 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumWeekwinorfailrebate==null){
			sumWeekwinorfailrebate=0.;
		}
		//转账
		Double sumtransferaccount = betTransferAccountsService.queryForObject(new Finder("select sum(a.transferaccountsscore) from bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and (b.agentid=:agentid or b.agentparentids like :aid) and substring(a.time,1,10)=:date ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumtransferaccount==null){
			sumtransferaccount=0.;
		}
		//代理提现
		Double sumagentwithdrawcash = betAgentwithdrawService.queryForObject(new Finder("select sum(money) from bet_agentwithdraw where  (agentid=:agentid or agentparentids like :aid) and substring(audittime,1,10)=:date and state=2 ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		if(sumagentwithdrawcash==null){
			sumagentwithdrawcash=0.;
		}
		//总福利
		Double allwelfare = sumDaywinorfailRebate+sumWeekwinorfailrebate+sumRankRebate+sumReliefScore+sumBetScorerecordMoney+todayrebate+firstrebate+sumSubordinaterebate+registersend+payrebate;
		//用户。游戏扣税
//				Double gks = betBettingService.queryForObject(new Finder("select sum(gks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//				if(gks==null){
//					gks=0.;
//				}
//				Double mks = betBettingService.queryForObject(new Finder("select sum(mks) from bet_betting a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.agentid=:agentid and substring(a.settlementtime,1,10)=:date ").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
//				if(mks==null){
//					mks=0.;
//				}
		Double ttzzttyy=betReportformService.queryForObject(new Finder("select sum(commission) as commission from bet_commission  where substring(settlementtime,1,10)=:date and (agentid=:agentid or agentparentids like :aid) ").setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("date", yesterday), Double.class);
		
		BetReportform betReportform1 = new BetReportform();
		betReportform1.setDate(cal.getTime());
		betReportform1.setRegisternum(registNum);
		betReportform1.setRegistersend(registersend);
		betReportform1.setRecharge(sumBetGoldMoney);
		betReportform1.setWithdrawcash(sumBetWithdrawcashMoney);
		//betReportform.setCardrecycle(sumBetRechargecard);
		betReportform1.setCardrecycle(0d);
		betReportform1.setSignin(sumBetScorerecordMoney.intValue());
		betReportform1.setRelief(sumReliefScore);
		betReportform1.setDaywinorfailrebate(sumDaywinorfailRebate);
		betReportform1.setWeekwinorfailrebate(sumWeekwinorfailrebate);
//		betReportform.setDaywinorfailrebate(0d);
		betReportform1.setFirstrecharge(firstrebate);
		betReportform1.setRank(sumRankRebate);
		betReportform1.setRedpackage(sumRedRecord);
		betReportform1.setSubordinaterebate(sumSubordinaterebate);
		betReportform1.setWinorloss(sumGameWin);
		betReportform1.setScore(sumScore);
		betReportform1.setBettingmoney(sumBettingMoney);
		betReportform1.setTy(betsumty);
		betReportform1.setResult(result);
		betReportform1.setAllwelfare(allwelfare);
		betReportform1.setPayrebate(payrebate);
		betReportform1.setTodayrechargerebate(todayrebate);
		betReportform1.setTransferaccount(sumtransferaccount);
		betReportform1.setAgentwithdrawcash(sumagentwithdrawcash);
		betReportform1.setAgentid(agentid);
		betReportform1.setTzty(ttzzttyy);
//		betReportform1.setScoree(sumScoree);
		betReportform1.setNoissuescore(sumScoree);
		betReportform1.setGamescore(sumgamescore);
		betReportform1.setBankscore(sumbankscore);
//		betReportform1.setAgentparentid(betAgent.getParentid());
//		betReportform1.setAgentparentids(betAgent.getParentids());
//		betReportform1.setMks(mks);
//		betReportform1.setGks(gks);
		
		
		betReportform1.setId(Integer.MAX_VALUE);
		if(datas==null){
			datas=new ArrayList<BetReportform>();
		}
		datas.add(0, betReportform1);

		
		
		
		
		
		
		
		
		
		if(datas!=null){
			for (BetReportform betReportform2 : datas) {
				Double transferaccount = betReportform2.getTransferaccount();
				Double allwelfarex = betReportform2.getAllwelfare();
				Double recharge = betReportform2.getRecharge();
				Double withdrawcash = betReportform2.getWithdrawcash();
				Double redpackage = betReportform2.getRedpackage();
				Double ty = betReportform2.getTy();
				Double winorloss = betReportform2.getWinorloss();
				Double resultx = betReportform2.getResult();
				if(transferaccount==null){
					transferaccount=0.;
				}
				if(allwelfarex==null){
					allwelfarex=0.;
				}
				if(recharge==null){
					recharge=0.;
				}
				if(withdrawcash==null){
					withdrawcash=0.;
				}
				if(redpackage==null){
					redpackage=0.;
				}
				if(ty==null){
					ty=0.;
				}
				if(winorloss==null){
					winorloss=0.;
				}
				if(resultx==null){
					resultx=0.;
				}
//				betReportform2.setDayscore(transferaccount+allwelfare+recharge-withdrawcash+redpackage+ty+winorloss+result);
				
				betReportform2.setDayscore(transferaccount+allwelfarex+recharge*1000-withdrawcash*1000+redpackage+ty+winorloss+resultx);
			}
		}
		page.setTotalCount(page.getTotalCount());
		try {
			List<Map<String, Object>> untreatedbettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a  where  (a.agentid=:agentid or a.agentparentids like :aid) and a.state=0 group by  DATE_FORMAT(a.bettingtime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
			if(untreatedbettinglist!=null){
				for (Map<String, Object> map : untreatedbettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setUntreatedbettingmoney(bettingmoney1);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//按投注时间统计已结算投注额、游戏输赢
		try {
			List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney,SUM(a.bettingscore) as bettingscore,SUM(a.bettingscore-a.bettingmoney) as bettingwin FROM soccer_allbetting a where  (a.agentid=:agentid or a.agentparentids like :aid) and a.state=1 group by  DATE_FORMAT(a.bettingtime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
			if(bettingtimebettinglist!=null){
				for (Map<String, Object> map : bettingtimebettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
					double bettingscore1 = ((BigDecimal)map.get("bettingscore")).doubleValue();
					double bettingwin1 = ((BigDecimal)map.get("bettingwin")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setBettingtimebettingmoney(bettingmoney1);
								b.setBettingtimebettingscore(bettingscore1);
								b.setBettingtimebettingwin(bettingwin1);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//投注佣金
		try {
			
			List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("select DATE_FORMAT(bettingtime,:formate) as bettingtime,sum(commission) as bettingtimecommission from bet_commission where (agentid=:id or agentparentids like :aid) group by  DATE_FORMAT(bettingtime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1)").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("id", agentid).setParam("formate", "%Y-%m-%d"));
			if(bettingtimebettinglist!=null){
				for (Map<String, Object> map : bettingtimebettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingtimecommission = ((BigDecimal)map.get("bettingtimecommission")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setBettingtimecommission(bettingtimecommission);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//不出票用户转账
		try {
			List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.time,:formate) as bettingtime,SUM(a.transferaccountsscore) as bettingmoney FROM bet_transfer_accounts a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.time,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
			if(bettingtimebettinglist!=null){
				for (Map<String, Object> map : bettingtimebettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setNoissuetransferscore(bettingmoney1);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//不出票用户充值
		try {
			List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.rechargetime,:formate) as bettingtime,SUM(a.money) as bettingmoney FROM bet_gold a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.isissue=0 and a.state=2 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.rechargetime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
			if(bettingtimebettinglist!=null){
				for (Map<String, Object> map : bettingtimebettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setNoissuebetgold(bettingmoney1);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//不出票用户提现
		try {
			List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.audittime,:formate) as bettingtime,SUM(a.money) as bettingmoney FROM bet_withdrawcash a left join bet_member b on a.memberid=b.id where b.isinternal=0 and b.isissue=0 and a.state=2 and (a.agentid=:agentid or a.agentparentids like :aid)  group by  DATE_FORMAT(a.audittime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
			if(bettingtimebettinglist!=null){
				for (Map<String, Object> map : bettingtimebettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setNoissuebetwithdrawcash(bettingmoney1);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//不出票用户投注额
		try {
			List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state!=2  group by  DATE_FORMAT(a.bettingtime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
			if(bettingtimebettinglist!=null){
				for (Map<String, Object> map : bettingtimebettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setNoissuebettingtimetotalbettingmoney(bettingmoney1);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		//不出票用户未结算
		try {
			List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state=0 group by DATE_FORMAT(a.bettingtime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
			if(bettingtimebettinglist!=null){
				for (Map<String, Object> map : bettingtimebettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setNoissuebettingtimeunsettlebettingmoney(bettingmoney1);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//不出票用户投注佣金
		try {
			List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("select DATE_FORMAT(a.bettingtime,:formate) as bettingtime,sum(a.commission) as bettingtimecommission from bet_commission a  left join bet_member mm on a.memberid2=mm.id2  where (a.agentid=:id or a.agentparentids like :aid) and mm.isissue=0 group by  DATE_FORMAT(a.bettingtime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1)").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("id", agentid).setParam("formate", "%Y-%m-%d"));
			if(bettingtimebettinglist!=null){
				for (Map<String, Object> map : bettingtimebettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingtimecommission = ((BigDecimal)map.get("bettingtimecommission")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setNoissuebettingtimecommission(bettingtimecommission);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		//不出票用户已结算
		try {
			List<Map<String, Object>> bettingtimebettinglist = soccerAllbettingService.queryForList(new Finder("SELECT DATE_FORMAT(a.bettingtime,:formate) as bettingtime,SUM(a.bettingmoney) as bettingmoney,SUM(a.bettingscore) as bettingscore,SUM(a.bettingscore-a.bettingmoney) as bettingwin FROM soccer_allbetting a left join bet_member b on a.memberid2=b.id2 where b.isinternal=0 and b.isissue=0 and (a.agentid=:agentid or a.agentparentids like :aid) and a.state=1 group by  DATE_FORMAT(a.bettingtime,:formate) having YEARWEEK(date_format(bettingtime,:ppp),1) = YEARWEEK(:date,1) ").setParam("ppp", "%Y-%m-%d").setParam("date", new Date()).setParam("aid", "%,"+agentid+",%").setParam("agentid", agentid).setParam("formate", "%Y-%m-%d"));
			if(bettingtimebettinglist!=null){
				for (Map<String, Object> map : bettingtimebettinglist) {
					String bettingtime=(String)map.get("bettingtime");
					double bettingmoney1 = ((BigDecimal)map.get("bettingmoney")).doubleValue();
					double bettingscore1 = ((BigDecimal)map.get("bettingscore")).doubleValue();
					double bettingwin1 = ((BigDecimal)map.get("bettingwin")).doubleValue();
					if(datas!=null){
						for (BetReportform b : datas) {
							if(bettingtime.equals(new SimpleDateFormat("yyyy-MM-dd").format(b.getDate()))){
								b.setNoissuebettingtimebettingmoney(bettingmoney1);
								b.setNoissuebettingtimebettingscore(bettingscore1);
								b.setNoissuebettingtimebettingwin(bettingwin1);
							}
						}
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		

		model.addAttribute("addtotalcount", 1);
		returnObject.setQueryBean(betReportform);
		returnObject.setPage(page);
		returnObject.setData(datas);
		return returnObject;
	}
	
	
	@RequestMapping("/list/export")
	public void listexport(HttpServletRequest request,HttpServletResponse response, Model model,BetReportform betReportform) throws Exception{
		// ==构造分页请求
		Page page = newPage(request);
	
		File file = betReportformService.findDataExportExcel(null,listurl, page,BetReportform.class,betReportform);
		String fileName="betReportform"+GlobalStatic.excelext;
		downFile(response, file, fileName,true);
		return;
	}
	
		/**
	 * 查看操作,调用APP端lookjson方法
	 */
	@RequestMapping(value = "/look")
	public String look(Model model,HttpServletRequest request,HttpServletResponse response)  throws Exception {
		ReturnDatas returnObject = lookjson(model, request, response);
		model.addAttribute(GlobalStatic.returnDatas, returnObject);
		return "/lottery/betreportform/betreportformLook";
	}

	
	/**
	 * 查看的Json格式数据,为APP端提供数据
	 */
	@RequestMapping(value = "/look/json")
	public @ResponseBody
	ReturnDatas lookjson(Model model,HttpServletRequest request,HttpServletResponse response) throws Exception {
		ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
		  String  strId=request.getParameter("id");
		  java.lang.Integer id=null;
		  if(StringUtils.isNotBlank(strId)){
			 id= java.lang.Integer.valueOf(strId.trim());
		  BetReportform betReportform = betReportformService.findBetReportformById(id);
		   returnObject.setData(betReportform);
		}else{
		returnObject.setStatus(ReturnDatas.ERROR);
		}
		return returnObject;
		
	}
	
	
	/**
	 * 新增/修改 操作吗,返回json格式数据
	 * 
	 */
	@RequestMapping("/update")
	public @ResponseBody
	ReturnDatas saveorupdate(Model model,BetReportform betReportform,HttpServletRequest request,HttpServletResponse response) throws Exception{
		ReturnDatas returnObject = ReturnDatas.getSuccessReturnDatas();
		returnObject.setMessage(MessageUtils.UPDATE_SUCCESS);
		try {
		
		
//			betReportformService.saveorupdate(betReportform);
			
		} catch (Exception e) {
			String errorMessage = e.getLocalizedMessage();
			logger.error(errorMessage,e);
			returnObject.setStatus(ReturnDatas.ERROR);
			returnObject.setMessage(MessageUtils.UPDATE_ERROR);
		}
		return returnObject;
	
	}
	
	

}
